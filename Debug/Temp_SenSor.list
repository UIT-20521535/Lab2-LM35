
Temp_SenSor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077c0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  080078d0  080078d0  000178d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d48  08007d48  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08007d48  08007d48  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d48  08007d48  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d48  08007d48  00017d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d4c  08007d4c  00017d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007d50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  200001d4  08007f24  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  08007f24  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000912f  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c2d  00000000  00000000  0002936f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000888  00000000  00000000  0002afa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000067a  00000000  00000000  0002b828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001836a  00000000  00000000  0002bea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000af65  00000000  00000000  0004420c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088c98  00000000  00000000  0004f171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003684  00000000  00000000  000d7e0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000db490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080078b8 	.word	0x080078b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080078b8 	.word	0x080078b8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int	_write(int file, char *ptr, int len)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bec:	68b9      	ldr	r1, [r7, #8]
 8000bee:	4804      	ldr	r0, [pc, #16]	; (8000c00 <_write+0x28>)
 8000bf0:	f002 f91a 	bl	8002e28 <HAL_UART_Transmit>
	return len;
 8000bf4:	687b      	ldr	r3, [r7, #4]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000220 	.word	0x20000220

08000c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0a:	f000 faf7 	bl	80011fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c0e:	f000 f821 	bl	8000c54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c12:	f000 f8e3 	bl	8000ddc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000c16:	f000 f879 	bl	8000d0c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000c1a:	f000 f8b5 	bl	8000d88 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 8000c1e:	480c      	ldr	r0, [pc, #48]	; (8000c50 <main+0x4c>)
 8000c20:	f000 fc4a 	bl	80014b8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000c24:	2164      	movs	r1, #100	; 0x64
 8000c26:	480a      	ldr	r0, [pc, #40]	; (8000c50 <main+0x4c>)
 8000c28:	f000 fd20 	bl	800166c <HAL_ADC_PollForConversion>
	  ADC_val = HAL_ADC_GetValue(&hadc1);
 8000c2c:	4808      	ldr	r0, [pc, #32]	; (8000c50 <main+0x4c>)
 8000c2e:	f000 fe23 	bl	8001878 <HAL_ADC_GetValue>
 8000c32:	4603      	mov	r3, r0
 8000c34:	80fb      	strh	r3, [r7, #6]
	  HAL_ADC_Stop(&hadc1);
 8000c36:	4806      	ldr	r0, [pc, #24]	; (8000c50 <main+0x4c>)
 8000c38:	f000 fcec 	bl	8001614 <HAL_ADC_Stop>
	  temp_conv(ADC_val);
 8000c3c:	88fb      	ldrh	r3, [r7, #6]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 f8ee 	bl	8000e20 <temp_conv>
	  HAL_Delay(500);
 8000c44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c48:	f000 fb3a 	bl	80012c0 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000c4c:	e7e7      	b.n	8000c1e <main+0x1a>
 8000c4e:	bf00      	nop
 8000c50:	200001f0 	.word	0x200001f0

08000c54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b094      	sub	sp, #80	; 0x50
 8000c58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c5e:	2228      	movs	r2, #40	; 0x28
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f003 fa03 	bl	800406e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c84:	2301      	movs	r3, #1
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c92:	2301      	movs	r3, #1
 8000c94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c96:	2302      	movs	r3, #2
 8000c98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ca0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ca4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000caa:	4618      	mov	r0, r3
 8000cac:	f001 faf0 	bl	8002290 <HAL_RCC_OscConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000cb6:	f000 f8e7 	bl	8000e88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cba:	230f      	movs	r3, #15
 8000cbc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f001 fd5c 	bl	8002794 <HAL_RCC_ClockConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000ce2:	f000 f8d1 	bl	8000e88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cee:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f001 fedc 	bl	8002ab0 <HAL_RCCEx_PeriphCLKConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000cfe:	f000 f8c3 	bl	8000e88 <Error_Handler>
  }
}
 8000d02:	bf00      	nop
 8000d04:	3750      	adds	r7, #80	; 0x50
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d1c:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <MX_ADC1_Init+0x74>)
 8000d1e:	4a19      	ldr	r2, [pc, #100]	; (8000d84 <MX_ADC1_Init+0x78>)
 8000d20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d22:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <MX_ADC1_Init+0x74>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d28:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <MX_ADC1_Init+0x74>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d2e:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <MX_ADC1_Init+0x74>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <MX_ADC1_Init+0x74>)
 8000d36:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d3a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d3c:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <MX_ADC1_Init+0x74>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <MX_ADC1_Init+0x74>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d48:	480d      	ldr	r0, [pc, #52]	; (8000d80 <MX_ADC1_Init+0x74>)
 8000d4a:	f000 fadd 	bl	8001308 <HAL_ADC_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000d54:	f000 f898 	bl	8000e88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000d60:	2307      	movs	r3, #7
 8000d62:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_ADC1_Init+0x74>)
 8000d6a:	f000 fe63 	bl	8001a34 <HAL_ADC_ConfigChannel>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000d74:	f000 f888 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	200001f0 	.word	0x200001f0
 8000d84:	40012400 	.word	0x40012400

08000d88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <MX_USART1_UART_Init+0x4c>)
 8000d8e:	4a12      	ldr	r2, [pc, #72]	; (8000dd8 <MX_USART1_UART_Init+0x50>)
 8000d90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <MX_USART1_UART_Init+0x4c>)
 8000d94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <MX_USART1_UART_Init+0x4c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <MX_USART1_UART_Init+0x4c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000da6:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <MX_USART1_UART_Init+0x4c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dac:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <MX_USART1_UART_Init+0x4c>)
 8000dae:	220c      	movs	r2, #12
 8000db0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <MX_USART1_UART_Init+0x4c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <MX_USART1_UART_Init+0x4c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dbe:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <MX_USART1_UART_Init+0x4c>)
 8000dc0:	f001 ffe2 	bl	8002d88 <HAL_UART_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dca:	f000 f85d 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000220 	.word	0x20000220
 8000dd8:	40013800 	.word	0x40013800

08000ddc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <MX_GPIO_Init+0x40>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	4a0d      	ldr	r2, [pc, #52]	; (8000e1c <MX_GPIO_Init+0x40>)
 8000de8:	f043 0320 	orr.w	r3, r3, #32
 8000dec:	6193      	str	r3, [r2, #24]
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <MX_GPIO_Init+0x40>)
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	f003 0320 	and.w	r3, r3, #32
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <MX_GPIO_Init+0x40>)
 8000dfc:	699b      	ldr	r3, [r3, #24]
 8000dfe:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <MX_GPIO_Init+0x40>)
 8000e00:	f043 0304 	orr.w	r3, r3, #4
 8000e04:	6193      	str	r3, [r2, #24]
 8000e06:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <MX_GPIO_Init+0x40>)
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr
 8000e1c:	40021000 	.word	0x40021000

08000e20 <temp_conv>:

/* USER CODE BEGIN 4 */
void temp_conv(uint16_t temp_var)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	80fb      	strh	r3, [r7, #6]
	temp = (temp_var*0.006);
 8000e2a:	88fb      	ldrh	r3, [r7, #6]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fae9 	bl	8000404 <__aeabi_i2d>
 8000e32:	a311      	add	r3, pc, #68	; (adr r3, 8000e78 <temp_conv+0x58>)
 8000e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e38:	f7ff fb4e 	bl	80004d8 <__aeabi_dmul>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	460b      	mov	r3, r1
 8000e40:	4610      	mov	r0, r2
 8000e42:	4619      	mov	r1, r3
 8000e44:	f7ff fe40 	bl	8000ac8 <__aeabi_d2f>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <temp_conv+0x60>)
 8000e4c:	6013      	str	r3, [r2, #0]
	printf("\nTemp: %2.f", temp);
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <temp_conv+0x60>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fae8 	bl	8000428 <__aeabi_f2d>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	4809      	ldr	r0, [pc, #36]	; (8000e84 <temp_conv+0x64>)
 8000e5e:	f003 f891 	bl	8003f84 <iprintf>
	HAL_Delay(500);
 8000e62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e66:	f000 fa2b 	bl	80012c0 <HAL_Delay>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	f3af 8000 	nop.w
 8000e78:	bc6a7efa 	.word	0xbc6a7efa
 8000e7c:	3f789374 	.word	0x3f789374
 8000e80:	20000268 	.word	0x20000268
 8000e84:	080078d0 	.word	0x080078d0

08000e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e8c:	b672      	cpsid	i
}
 8000e8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <Error_Handler+0x8>
	...

08000e94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_MspInit+0x40>)
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <HAL_MspInit+0x40>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6193      	str	r3, [r2, #24]
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_MspInit+0x40>)
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_MspInit+0x40>)
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <HAL_MspInit+0x40>)
 8000eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ebc:	61d3      	str	r3, [r2, #28]
 8000ebe:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <HAL_MspInit+0x40>)
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a18      	ldr	r2, [pc, #96]	; (8000f54 <HAL_ADC_MspInit+0x7c>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d129      	bne.n	8000f4c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ef8:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <HAL_ADC_MspInit+0x80>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	4a16      	ldr	r2, [pc, #88]	; (8000f58 <HAL_ADC_MspInit+0x80>)
 8000efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f02:	6193      	str	r3, [r2, #24]
 8000f04:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <HAL_ADC_MspInit+0x80>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <HAL_ADC_MspInit+0x80>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	4a10      	ldr	r2, [pc, #64]	; (8000f58 <HAL_ADC_MspInit+0x80>)
 8000f16:	f043 0304 	orr.w	r3, r3, #4
 8000f1a:	6193      	str	r3, [r2, #24]
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <HAL_ADC_MspInit+0x80>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	f003 0304 	and.w	r3, r3, #4
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 0310 	add.w	r3, r7, #16
 8000f34:	4619      	mov	r1, r3
 8000f36:	4809      	ldr	r0, [pc, #36]	; (8000f5c <HAL_ADC_MspInit+0x84>)
 8000f38:	f001 f826 	bl	8001f88 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2012      	movs	r0, #18
 8000f42:	f000 ffea 	bl	8001f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000f46:	2012      	movs	r0, #18
 8000f48:	f001 f803 	bl	8001f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f4c:	bf00      	nop
 8000f4e:	3720      	adds	r7, #32
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40012400 	.word	0x40012400
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40010800 	.word	0x40010800

08000f60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0310 	add.w	r3, r7, #16
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a1c      	ldr	r2, [pc, #112]	; (8000fec <HAL_UART_MspInit+0x8c>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d131      	bne.n	8000fe4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f80:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <HAL_UART_MspInit+0x90>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	4a1a      	ldr	r2, [pc, #104]	; (8000ff0 <HAL_UART_MspInit+0x90>)
 8000f86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f8a:	6193      	str	r3, [r2, #24]
 8000f8c:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <HAL_UART_MspInit+0x90>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f98:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <HAL_UART_MspInit+0x90>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	4a14      	ldr	r2, [pc, #80]	; (8000ff0 <HAL_UART_MspInit+0x90>)
 8000f9e:	f043 0304 	orr.w	r3, r3, #4
 8000fa2:	6193      	str	r3, [r2, #24]
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_UART_MspInit+0x90>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	f003 0304 	and.w	r3, r3, #4
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 0310 	add.w	r3, r7, #16
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	480b      	ldr	r0, [pc, #44]	; (8000ff4 <HAL_UART_MspInit+0x94>)
 8000fc6:	f000 ffdf 	bl	8001f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <HAL_UART_MspInit+0x94>)
 8000fe0:	f000 ffd2 	bl	8001f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fe4:	bf00      	nop
 8000fe6:	3720      	adds	r7, #32
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40013800 	.word	0x40013800
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40010800 	.word	0x40010800

08000ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <NMI_Handler+0x4>

08000ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001002:	e7fe      	b.n	8001002 <HardFault_Handler+0x4>

08001004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <MemManage_Handler+0x4>

0800100a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800100e:	e7fe      	b.n	800100e <BusFault_Handler+0x4>

08001010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <UsageFault_Handler+0x4>

08001016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr

08001022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr

0800102e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr

0800103a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800103e:	f000 f923 	bl	8001288 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <ADC1_2_IRQHandler+0x10>)
 800104e:	f000 fc1f 	bl	8001890 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200001f0 	.word	0x200001f0

0800105c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return 1;
 8001060:	2301      	movs	r3, #1
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr

0800106a <_kill>:

int _kill(int pid, int sig)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001074:	f003 f84e 	bl	8004114 <__errno>
 8001078:	4603      	mov	r3, r0
 800107a:	2216      	movs	r2, #22
 800107c:	601a      	str	r2, [r3, #0]
  return -1;
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <_exit>:

void _exit (int status)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001092:	f04f 31ff 	mov.w	r1, #4294967295
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff ffe7 	bl	800106a <_kill>
  while (1) {}    /* Make sure we hang here */
 800109c:	e7fe      	b.n	800109c <_exit+0x12>

0800109e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b086      	sub	sp, #24
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	60f8      	str	r0, [r7, #12]
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	e00a      	b.n	80010c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010b0:	f3af 8000 	nop.w
 80010b4:	4601      	mov	r1, r0
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	1c5a      	adds	r2, r3, #1
 80010ba:	60ba      	str	r2, [r7, #8]
 80010bc:	b2ca      	uxtb	r2, r1
 80010be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	3301      	adds	r3, #1
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	dbf0      	blt.n	80010b0 <_read+0x12>
  }

  return len;
 80010ce:	687b      	ldr	r3, [r7, #4]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr

080010ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
 80010f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010fe:	605a      	str	r2, [r3, #4]
  return 0;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr

0800110c <_isatty>:

int _isatty(int file)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001114:	2301      	movs	r3, #1
}
 8001116:	4618      	mov	r0, r3
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001140:	4a14      	ldr	r2, [pc, #80]	; (8001194 <_sbrk+0x5c>)
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <_sbrk+0x60>)
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <_sbrk+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d102      	bne.n	800115a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <_sbrk+0x64>)
 8001156:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <_sbrk+0x68>)
 8001158:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	429a      	cmp	r2, r3
 8001166:	d207      	bcs.n	8001178 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001168:	f002 ffd4 	bl	8004114 <__errno>
 800116c:	4603      	mov	r3, r0
 800116e:	220c      	movs	r2, #12
 8001170:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	e009      	b.n	800118c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <_sbrk+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800117e:	4b07      	ldr	r3, [pc, #28]	; (800119c <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	4a05      	ldr	r2, [pc, #20]	; (800119c <_sbrk+0x64>)
 8001188:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800118a:	68fb      	ldr	r3, [r7, #12]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20005000 	.word	0x20005000
 8001198:	00000400 	.word	0x00000400
 800119c:	2000026c 	.word	0x2000026c
 80011a0:	200003c0 	.word	0x200003c0

080011a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011b0:	f7ff fff8 	bl	80011a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011b4:	480b      	ldr	r0, [pc, #44]	; (80011e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011b6:	490c      	ldr	r1, [pc, #48]	; (80011e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011b8:	4a0c      	ldr	r2, [pc, #48]	; (80011ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011bc:	e002      	b.n	80011c4 <LoopCopyDataInit>

080011be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c2:	3304      	adds	r3, #4

080011c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c8:	d3f9      	bcc.n	80011be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ca:	4a09      	ldr	r2, [pc, #36]	; (80011f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011cc:	4c09      	ldr	r4, [pc, #36]	; (80011f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d0:	e001      	b.n	80011d6 <LoopFillZerobss>

080011d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d4:	3204      	adds	r2, #4

080011d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d8:	d3fb      	bcc.n	80011d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011da:	f002 ffa1 	bl	8004120 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011de:	f7ff fd11 	bl	8000c04 <main>
  bx lr
 80011e2:	4770      	bx	lr
  ldr r0, =_sdata
 80011e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80011ec:	08007d50 	.word	0x08007d50
  ldr r2, =_sbss
 80011f0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80011f4:	200003c0 	.word	0x200003c0

080011f8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011f8:	e7fe      	b.n	80011f8 <CAN1_RX1_IRQHandler>
	...

080011fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <HAL_Init+0x28>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a07      	ldr	r2, [pc, #28]	; (8001224 <HAL_Init+0x28>)
 8001206:	f043 0310 	orr.w	r3, r3, #16
 800120a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800120c:	2003      	movs	r0, #3
 800120e:	f000 fe79 	bl	8001f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001212:	200f      	movs	r0, #15
 8001214:	f000 f808 	bl	8001228 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001218:	f7ff fe3c 	bl	8000e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40022000 	.word	0x40022000

08001228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_InitTick+0x54>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_InitTick+0x58>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4619      	mov	r1, r3
 800123a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001242:	fbb2 f3f3 	udiv	r3, r2, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f000 fe91 	bl	8001f6e <HAL_SYSTICK_Config>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e00e      	b.n	8001274 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b0f      	cmp	r3, #15
 800125a:	d80a      	bhi.n	8001272 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800125c:	2200      	movs	r2, #0
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	f04f 30ff 	mov.w	r0, #4294967295
 8001264:	f000 fe59 	bl	8001f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001268:	4a06      	ldr	r2, [pc, #24]	; (8001284 <HAL_InitTick+0x5c>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	e000      	b.n	8001274 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000000 	.word	0x20000000
 8001280:	20000008 	.word	0x20000008
 8001284:	20000004 	.word	0x20000004

08001288 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <HAL_IncTick+0x1c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <HAL_IncTick+0x20>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4413      	add	r3, r2
 8001298:	4a03      	ldr	r2, [pc, #12]	; (80012a8 <HAL_IncTick+0x20>)
 800129a:	6013      	str	r3, [r2, #0]
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	20000008 	.word	0x20000008
 80012a8:	20000270 	.word	0x20000270

080012ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return uwTick;
 80012b0:	4b02      	ldr	r3, [pc, #8]	; (80012bc <HAL_GetTick+0x10>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	20000270 	.word	0x20000270

080012c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c8:	f7ff fff0 	bl	80012ac <HAL_GetTick>
 80012cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d8:	d005      	beq.n	80012e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012da:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <HAL_Delay+0x44>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	461a      	mov	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4413      	add	r3, r2
 80012e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012e6:	bf00      	nop
 80012e8:	f7ff ffe0 	bl	80012ac <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d8f7      	bhi.n	80012e8 <HAL_Delay+0x28>
  {
  }
}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000008 	.word	0x20000008

08001308 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001310:	2300      	movs	r3, #0
 8001312:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e0be      	b.n	80014a8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001334:	2b00      	cmp	r3, #0
 8001336:	d109      	bne.n	800134c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff fdc6 	bl	8000ed8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 fcc3 	bl	8001cd8 <ADC_ConversionStop_Disable>
 8001352:	4603      	mov	r3, r0
 8001354:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135a:	f003 0310 	and.w	r3, r3, #16
 800135e:	2b00      	cmp	r3, #0
 8001360:	f040 8099 	bne.w	8001496 <HAL_ADC_Init+0x18e>
 8001364:	7dfb      	ldrb	r3, [r7, #23]
 8001366:	2b00      	cmp	r3, #0
 8001368:	f040 8095 	bne.w	8001496 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001370:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001374:	f023 0302 	bic.w	r3, r3, #2
 8001378:	f043 0202 	orr.w	r2, r3, #2
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001388:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	7b1b      	ldrb	r3, [r3, #12]
 800138e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001390:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	4313      	orrs	r3, r2
 8001396:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013a0:	d003      	beq.n	80013aa <HAL_ADC_Init+0xa2>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d102      	bne.n	80013b0 <HAL_ADC_Init+0xa8>
 80013aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ae:	e000      	b.n	80013b2 <HAL_ADC_Init+0xaa>
 80013b0:	2300      	movs	r3, #0
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	7d1b      	ldrb	r3, [r3, #20]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d119      	bne.n	80013f4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7b1b      	ldrb	r3, [r3, #12]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d109      	bne.n	80013dc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	3b01      	subs	r3, #1
 80013ce:	035a      	lsls	r2, r3, #13
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	e00b      	b.n	80013f4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e0:	f043 0220 	orr.w	r2, r3, #32
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ec:	f043 0201 	orr.w	r2, r3, #1
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	430a      	orrs	r2, r1
 8001406:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <HAL_ADC_Init+0x1a8>)
 8001410:	4013      	ands	r3, r2
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6812      	ldr	r2, [r2, #0]
 8001416:	68b9      	ldr	r1, [r7, #8]
 8001418:	430b      	orrs	r3, r1
 800141a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001424:	d003      	beq.n	800142e <HAL_ADC_Init+0x126>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d104      	bne.n	8001438 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	3b01      	subs	r3, #1
 8001434:	051b      	lsls	r3, r3, #20
 8001436:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	430a      	orrs	r2, r1
 800144a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <HAL_ADC_Init+0x1ac>)
 8001454:	4013      	ands	r3, r2
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	429a      	cmp	r2, r3
 800145a:	d10b      	bne.n	8001474 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001466:	f023 0303 	bic.w	r3, r3, #3
 800146a:	f043 0201 	orr.w	r2, r3, #1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001472:	e018      	b.n	80014a6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001478:	f023 0312 	bic.w	r3, r3, #18
 800147c:	f043 0210 	orr.w	r2, r3, #16
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001488:	f043 0201 	orr.w	r2, r3, #1
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001494:	e007      	b.n	80014a6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149a:	f043 0210 	orr.w	r2, r3, #16
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	ffe1f7fd 	.word	0xffe1f7fd
 80014b4:	ff1f0efe 	.word	0xff1f0efe

080014b8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d101      	bne.n	80014d2 <HAL_ADC_Start+0x1a>
 80014ce:	2302      	movs	r3, #2
 80014d0:	e098      	b.n	8001604 <HAL_ADC_Start+0x14c>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2201      	movs	r2, #1
 80014d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 fba2 	bl	8001c24 <ADC_Enable>
 80014e0:	4603      	mov	r3, r0
 80014e2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f040 8087 	bne.w	80015fa <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014f4:	f023 0301 	bic.w	r3, r3, #1
 80014f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a41      	ldr	r2, [pc, #260]	; (800160c <HAL_ADC_Start+0x154>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d105      	bne.n	8001516 <HAL_ADC_Start+0x5e>
 800150a:	4b41      	ldr	r3, [pc, #260]	; (8001610 <HAL_ADC_Start+0x158>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d115      	bne.n	8001542 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800152c:	2b00      	cmp	r3, #0
 800152e:	d026      	beq.n	800157e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001534:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001538:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001540:	e01d      	b.n	800157e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001546:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a2f      	ldr	r2, [pc, #188]	; (8001610 <HAL_ADC_Start+0x158>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d004      	beq.n	8001562 <HAL_ADC_Start+0xaa>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a2b      	ldr	r2, [pc, #172]	; (800160c <HAL_ADC_Start+0x154>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d10d      	bne.n	800157e <HAL_ADC_Start+0xc6>
 8001562:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <HAL_ADC_Start+0x158>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800156a:	2b00      	cmp	r3, #0
 800156c:	d007      	beq.n	800157e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001572:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001576:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001582:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d006      	beq.n	8001598 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158e:	f023 0206 	bic.w	r2, r3, #6
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	62da      	str	r2, [r3, #44]	; 0x2c
 8001596:	e002      	b.n	800159e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f06f 0202 	mvn.w	r2, #2
 80015ae:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015ba:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015be:	d113      	bne.n	80015e8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015c4:	4a11      	ldr	r2, [pc, #68]	; (800160c <HAL_ADC_Start+0x154>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d105      	bne.n	80015d6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <HAL_ADC_Start+0x158>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d108      	bne.n	80015e8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	e00c      	b.n	8001602 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	e003      	b.n	8001602 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001602:	7bfb      	ldrb	r3, [r7, #15]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40012800 	.word	0x40012800
 8001610:	40012400 	.word	0x40012400

08001614 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800161c:	2300      	movs	r3, #0
 800161e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001626:	2b01      	cmp	r3, #1
 8001628:	d101      	bne.n	800162e <HAL_ADC_Stop+0x1a>
 800162a:	2302      	movs	r3, #2
 800162c:	e01a      	b.n	8001664 <HAL_ADC_Stop+0x50>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 fb4e 	bl	8001cd8 <ADC_ConversionStop_Disable>
 800163c:	4603      	mov	r3, r0
 800163e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d109      	bne.n	800165a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800164e:	f023 0301 	bic.w	r3, r3, #1
 8001652:	f043 0201 	orr.w	r2, r3, #1
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001662:	7bfb      	ldrb	r3, [r7, #15]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001682:	f7ff fe13 	bl	80012ac <HAL_GetTick>
 8001686:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00b      	beq.n	80016ae <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169a:	f043 0220 	orr.w	r2, r3, #32
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e0d3      	b.n	8001856 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d131      	bne.n	8001720 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d12a      	bne.n	8001720 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80016ca:	e021      	b.n	8001710 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d2:	d01d      	beq.n	8001710 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d007      	beq.n	80016ea <HAL_ADC_PollForConversion+0x7e>
 80016da:	f7ff fde7 	bl	80012ac <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d212      	bcs.n	8001710 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d10b      	bne.n	8001710 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fc:	f043 0204 	orr.w	r2, r3, #4
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e0a2      	b.n	8001856 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0d6      	beq.n	80016cc <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800171e:	e070      	b.n	8001802 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001720:	4b4f      	ldr	r3, [pc, #316]	; (8001860 <HAL_ADC_PollForConversion+0x1f4>)
 8001722:	681c      	ldr	r4, [r3, #0]
 8001724:	2002      	movs	r0, #2
 8001726:	f001 fa79 	bl	8002c1c <HAL_RCCEx_GetPeriphCLKFreq>
 800172a:	4603      	mov	r3, r0
 800172c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6919      	ldr	r1, [r3, #16]
 8001736:	4b4b      	ldr	r3, [pc, #300]	; (8001864 <HAL_ADC_PollForConversion+0x1f8>)
 8001738:	400b      	ands	r3, r1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d118      	bne.n	8001770 <HAL_ADC_PollForConversion+0x104>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68d9      	ldr	r1, [r3, #12]
 8001744:	4b48      	ldr	r3, [pc, #288]	; (8001868 <HAL_ADC_PollForConversion+0x1fc>)
 8001746:	400b      	ands	r3, r1
 8001748:	2b00      	cmp	r3, #0
 800174a:	d111      	bne.n	8001770 <HAL_ADC_PollForConversion+0x104>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6919      	ldr	r1, [r3, #16]
 8001752:	4b46      	ldr	r3, [pc, #280]	; (800186c <HAL_ADC_PollForConversion+0x200>)
 8001754:	400b      	ands	r3, r1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d108      	bne.n	800176c <HAL_ADC_PollForConversion+0x100>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68d9      	ldr	r1, [r3, #12]
 8001760:	4b43      	ldr	r3, [pc, #268]	; (8001870 <HAL_ADC_PollForConversion+0x204>)
 8001762:	400b      	ands	r3, r1
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <HAL_ADC_PollForConversion+0x100>
 8001768:	2314      	movs	r3, #20
 800176a:	e020      	b.n	80017ae <HAL_ADC_PollForConversion+0x142>
 800176c:	2329      	movs	r3, #41	; 0x29
 800176e:	e01e      	b.n	80017ae <HAL_ADC_PollForConversion+0x142>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6919      	ldr	r1, [r3, #16]
 8001776:	4b3d      	ldr	r3, [pc, #244]	; (800186c <HAL_ADC_PollForConversion+0x200>)
 8001778:	400b      	ands	r3, r1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d106      	bne.n	800178c <HAL_ADC_PollForConversion+0x120>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68d9      	ldr	r1, [r3, #12]
 8001784:	4b3a      	ldr	r3, [pc, #232]	; (8001870 <HAL_ADC_PollForConversion+0x204>)
 8001786:	400b      	ands	r3, r1
 8001788:	2b00      	cmp	r3, #0
 800178a:	d00d      	beq.n	80017a8 <HAL_ADC_PollForConversion+0x13c>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6919      	ldr	r1, [r3, #16]
 8001792:	4b38      	ldr	r3, [pc, #224]	; (8001874 <HAL_ADC_PollForConversion+0x208>)
 8001794:	400b      	ands	r3, r1
 8001796:	2b00      	cmp	r3, #0
 8001798:	d108      	bne.n	80017ac <HAL_ADC_PollForConversion+0x140>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68d9      	ldr	r1, [r3, #12]
 80017a0:	4b34      	ldr	r3, [pc, #208]	; (8001874 <HAL_ADC_PollForConversion+0x208>)
 80017a2:	400b      	ands	r3, r1
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_ADC_PollForConversion+0x140>
 80017a8:	2354      	movs	r3, #84	; 0x54
 80017aa:	e000      	b.n	80017ae <HAL_ADC_PollForConversion+0x142>
 80017ac:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80017ae:	fb02 f303 	mul.w	r3, r2, r3
 80017b2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80017b4:	e021      	b.n	80017fa <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017bc:	d01a      	beq.n	80017f4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d007      	beq.n	80017d4 <HAL_ADC_PollForConversion+0x168>
 80017c4:	f7ff fd72 	bl	80012ac <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d20f      	bcs.n	80017f4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d90b      	bls.n	80017f4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e0:	f043 0204 	orr.w	r2, r3, #4
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e030      	b.n	8001856 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3301      	adds	r3, #1
 80017f8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d8d9      	bhi.n	80017b6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f06f 0212 	mvn.w	r2, #18
 800180a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001810:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001822:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001826:	d115      	bne.n	8001854 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800182c:	2b00      	cmp	r3, #0
 800182e:	d111      	bne.n	8001854 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001834:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001840:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d105      	bne.n	8001854 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184c:	f043 0201 	orr.w	r2, r3, #1
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	371c      	adds	r7, #28
 800185a:	46bd      	mov	sp, r7
 800185c:	bd90      	pop	{r4, r7, pc}
 800185e:	bf00      	nop
 8001860:	20000000 	.word	0x20000000
 8001864:	24924924 	.word	0x24924924
 8001868:	00924924 	.word	0x00924924
 800186c:	12492492 	.word	0x12492492
 8001870:	00492492 	.word	0x00492492
 8001874:	00249249 	.word	0x00249249

08001878 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	f003 0320 	and.w	r3, r3, #32
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d03e      	beq.n	8001930 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d039      	beq.n	8001930 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c0:	f003 0310 	and.w	r3, r3, #16
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d105      	bne.n	80018d4 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80018de:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80018e2:	d11d      	bne.n	8001920 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d119      	bne.n	8001920 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 0220 	bic.w	r2, r2, #32
 80018fa:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001900:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d105      	bne.n	8001920 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001918:	f043 0201 	orr.w	r2, r3, #1
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 f874 	bl	8001a0e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f06f 0212 	mvn.w	r2, #18
 800192e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001936:	2b00      	cmp	r3, #0
 8001938:	d04d      	beq.n	80019d6 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b00      	cmp	r3, #0
 8001942:	d048      	beq.n	80019d6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001948:	f003 0310 	and.w	r3, r3, #16
 800194c:	2b00      	cmp	r3, #0
 800194e:	d105      	bne.n	800195c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001954:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001966:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800196a:	d012      	beq.n	8001992 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001976:	2b00      	cmp	r3, #0
 8001978:	d125      	bne.n	80019c6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001984:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001988:	d11d      	bne.n	80019c6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800198e:	2b00      	cmp	r3, #0
 8001990:	d119      	bne.n	80019c6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019a0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d105      	bne.n	80019c6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019be:	f043 0201 	orr.w	r2, r3, #1
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f9c7 	bl	8001d5a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f06f 020c 	mvn.w	r2, #12
 80019d4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d012      	beq.n	8001a06 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00d      	beq.n	8001a06 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f812 	bl	8001a20 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f06f 0201 	mvn.w	r2, #1
 8001a04:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr
	...

08001a34 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x20>
 8001a50:	2302      	movs	r3, #2
 8001a52:	e0dc      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x1da>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b06      	cmp	r3, #6
 8001a62:	d81c      	bhi.n	8001a9e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	3b05      	subs	r3, #5
 8001a76:	221f      	movs	r2, #31
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	4019      	ands	r1, r3
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	6818      	ldr	r0, [r3, #0]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	3b05      	subs	r3, #5
 8001a90:	fa00 f203 	lsl.w	r2, r0, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	635a      	str	r2, [r3, #52]	; 0x34
 8001a9c:	e03c      	b.n	8001b18 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b0c      	cmp	r3, #12
 8001aa4:	d81c      	bhi.n	8001ae0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	3b23      	subs	r3, #35	; 0x23
 8001ab8:	221f      	movs	r2, #31
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	4019      	ands	r1, r3
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	6818      	ldr	r0, [r3, #0]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	3b23      	subs	r3, #35	; 0x23
 8001ad2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	631a      	str	r2, [r3, #48]	; 0x30
 8001ade:	e01b      	b.n	8001b18 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	3b41      	subs	r3, #65	; 0x41
 8001af2:	221f      	movs	r2, #31
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	4019      	ands	r1, r3
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	6818      	ldr	r0, [r3, #0]
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	3b41      	subs	r3, #65	; 0x41
 8001b0c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b09      	cmp	r3, #9
 8001b1e:	d91c      	bls.n	8001b5a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68d9      	ldr	r1, [r3, #12]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4413      	add	r3, r2
 8001b30:	3b1e      	subs	r3, #30
 8001b32:	2207      	movs	r2, #7
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	4019      	ands	r1, r3
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	6898      	ldr	r0, [r3, #8]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4613      	mov	r3, r2
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	4413      	add	r3, r2
 8001b4a:	3b1e      	subs	r3, #30
 8001b4c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	60da      	str	r2, [r3, #12]
 8001b58:	e019      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6919      	ldr	r1, [r3, #16]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4613      	mov	r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	2207      	movs	r2, #7
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	4019      	ands	r1, r3
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	6898      	ldr	r0, [r3, #8]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4413      	add	r3, r2
 8001b82:	fa00 f203 	lsl.w	r2, r0, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2b10      	cmp	r3, #16
 8001b94:	d003      	beq.n	8001b9e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b9a:	2b11      	cmp	r3, #17
 8001b9c:	d132      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a1d      	ldr	r2, [pc, #116]	; (8001c18 <HAL_ADC_ConfigChannel+0x1e4>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d125      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d126      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001bc4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b10      	cmp	r3, #16
 8001bcc:	d11a      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bce:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <HAL_ADC_ConfigChannel+0x1e8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a13      	ldr	r2, [pc, #76]	; (8001c20 <HAL_ADC_ConfigChannel+0x1ec>)
 8001bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd8:	0c9a      	lsrs	r2, r3, #18
 8001bda:	4613      	mov	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001be4:	e002      	b.n	8001bec <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	3b01      	subs	r3, #1
 8001bea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f9      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x1b2>
 8001bf2:	e007      	b.n	8001c04 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf8:	f043 0220 	orr.w	r2, r3, #32
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr
 8001c18:	40012400 	.word	0x40012400
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	431bde83 	.word	0x431bde83

08001c24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d040      	beq.n	8001cc4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f042 0201 	orr.w	r2, r2, #1
 8001c50:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c52:	4b1f      	ldr	r3, [pc, #124]	; (8001cd0 <ADC_Enable+0xac>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a1f      	ldr	r2, [pc, #124]	; (8001cd4 <ADC_Enable+0xb0>)
 8001c58:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5c:	0c9b      	lsrs	r3, r3, #18
 8001c5e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c60:	e002      	b.n	8001c68 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	3b01      	subs	r3, #1
 8001c66:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f9      	bne.n	8001c62 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c6e:	f7ff fb1d 	bl	80012ac <HAL_GetTick>
 8001c72:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c74:	e01f      	b.n	8001cb6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c76:	f7ff fb19 	bl	80012ac <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d918      	bls.n	8001cb6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d011      	beq.n	8001cb6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c96:	f043 0210 	orr.w	r2, r3, #16
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca2:	f043 0201 	orr.w	r2, r3, #1
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e007      	b.n	8001cc6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d1d8      	bne.n	8001c76 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	431bde83 	.word	0x431bde83

08001cd8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d12e      	bne.n	8001d50 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 0201 	bic.w	r2, r2, #1
 8001d00:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d02:	f7ff fad3 	bl	80012ac <HAL_GetTick>
 8001d06:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d08:	e01b      	b.n	8001d42 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d0a:	f7ff facf 	bl	80012ac <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d914      	bls.n	8001d42 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d10d      	bne.n	8001d42 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2a:	f043 0210 	orr.w	r2, r3, #16
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d36:	f043 0201 	orr.w	r2, r3, #1
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e007      	b.n	8001d52 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d0dc      	beq.n	8001d0a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d9e:	4a04      	ldr	r2, [pc, #16]	; (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	60d3      	str	r3, [r2, #12]
}
 8001da4:	bf00      	nop
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db8:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <__NVIC_GetPriorityGrouping+0x18>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	f003 0307 	and.w	r3, r3, #7
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	db0b      	blt.n	8001dfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	f003 021f 	and.w	r2, r3, #31
 8001de8:	4906      	ldr	r1, [pc, #24]	; (8001e04 <__NVIC_EnableIRQ+0x34>)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	095b      	lsrs	r3, r3, #5
 8001df0:	2001      	movs	r0, #1
 8001df2:	fa00 f202 	lsl.w	r2, r0, r2
 8001df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr
 8001e04:	e000e100 	.word	0xe000e100

08001e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	6039      	str	r1, [r7, #0]
 8001e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	db0a      	blt.n	8001e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	490c      	ldr	r1, [pc, #48]	; (8001e54 <__NVIC_SetPriority+0x4c>)
 8001e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e26:	0112      	lsls	r2, r2, #4
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e30:	e00a      	b.n	8001e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	4908      	ldr	r1, [pc, #32]	; (8001e58 <__NVIC_SetPriority+0x50>)
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	3b04      	subs	r3, #4
 8001e40:	0112      	lsls	r2, r2, #4
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	440b      	add	r3, r1
 8001e46:	761a      	strb	r2, [r3, #24]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	e000e100 	.word	0xe000e100
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b089      	sub	sp, #36	; 0x24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f1c3 0307 	rsb	r3, r3, #7
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	bf28      	it	cs
 8001e7a:	2304      	movcs	r3, #4
 8001e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3304      	adds	r3, #4
 8001e82:	2b06      	cmp	r3, #6
 8001e84:	d902      	bls.n	8001e8c <NVIC_EncodePriority+0x30>
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3b03      	subs	r3, #3
 8001e8a:	e000      	b.n	8001e8e <NVIC_EncodePriority+0x32>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e90:	f04f 32ff 	mov.w	r2, #4294967295
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	401a      	ands	r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001eae:	43d9      	mvns	r1, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb4:	4313      	orrs	r3, r2
         );
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3724      	adds	r7, #36	; 0x24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr

08001ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed0:	d301      	bcc.n	8001ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e00f      	b.n	8001ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <SysTick_Config+0x40>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ede:	210f      	movs	r1, #15
 8001ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee4:	f7ff ff90 	bl	8001e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <SysTick_Config+0x40>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eee:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <SysTick_Config+0x40>)
 8001ef0:	2207      	movs	r2, #7
 8001ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	e000e010 	.word	0xe000e010

08001f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff ff2d 	bl	8001d6c <__NVIC_SetPriorityGrouping>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b086      	sub	sp, #24
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	4603      	mov	r3, r0
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f2c:	f7ff ff42 	bl	8001db4 <__NVIC_GetPriorityGrouping>
 8001f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	68b9      	ldr	r1, [r7, #8]
 8001f36:	6978      	ldr	r0, [r7, #20]
 8001f38:	f7ff ff90 	bl	8001e5c <NVIC_EncodePriority>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff5f 	bl	8001e08 <__NVIC_SetPriority>
}
 8001f4a:	bf00      	nop
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	4603      	mov	r3, r0
 8001f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ff35 	bl	8001dd0 <__NVIC_EnableIRQ>
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff ffa2 	bl	8001ec0 <SysTick_Config>
 8001f7c:	4603      	mov	r3, r0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b08b      	sub	sp, #44	; 0x2c
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f92:	2300      	movs	r3, #0
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f96:	2300      	movs	r3, #0
 8001f98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f9a:	e169      	b.n	8002270 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	69fa      	ldr	r2, [r7, #28]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	f040 8158 	bne.w	800226a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	4a9a      	ldr	r2, [pc, #616]	; (8002228 <HAL_GPIO_Init+0x2a0>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d05e      	beq.n	8002082 <HAL_GPIO_Init+0xfa>
 8001fc4:	4a98      	ldr	r2, [pc, #608]	; (8002228 <HAL_GPIO_Init+0x2a0>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d875      	bhi.n	80020b6 <HAL_GPIO_Init+0x12e>
 8001fca:	4a98      	ldr	r2, [pc, #608]	; (800222c <HAL_GPIO_Init+0x2a4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d058      	beq.n	8002082 <HAL_GPIO_Init+0xfa>
 8001fd0:	4a96      	ldr	r2, [pc, #600]	; (800222c <HAL_GPIO_Init+0x2a4>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d86f      	bhi.n	80020b6 <HAL_GPIO_Init+0x12e>
 8001fd6:	4a96      	ldr	r2, [pc, #600]	; (8002230 <HAL_GPIO_Init+0x2a8>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d052      	beq.n	8002082 <HAL_GPIO_Init+0xfa>
 8001fdc:	4a94      	ldr	r2, [pc, #592]	; (8002230 <HAL_GPIO_Init+0x2a8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d869      	bhi.n	80020b6 <HAL_GPIO_Init+0x12e>
 8001fe2:	4a94      	ldr	r2, [pc, #592]	; (8002234 <HAL_GPIO_Init+0x2ac>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d04c      	beq.n	8002082 <HAL_GPIO_Init+0xfa>
 8001fe8:	4a92      	ldr	r2, [pc, #584]	; (8002234 <HAL_GPIO_Init+0x2ac>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d863      	bhi.n	80020b6 <HAL_GPIO_Init+0x12e>
 8001fee:	4a92      	ldr	r2, [pc, #584]	; (8002238 <HAL_GPIO_Init+0x2b0>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d046      	beq.n	8002082 <HAL_GPIO_Init+0xfa>
 8001ff4:	4a90      	ldr	r2, [pc, #576]	; (8002238 <HAL_GPIO_Init+0x2b0>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d85d      	bhi.n	80020b6 <HAL_GPIO_Init+0x12e>
 8001ffa:	2b12      	cmp	r3, #18
 8001ffc:	d82a      	bhi.n	8002054 <HAL_GPIO_Init+0xcc>
 8001ffe:	2b12      	cmp	r3, #18
 8002000:	d859      	bhi.n	80020b6 <HAL_GPIO_Init+0x12e>
 8002002:	a201      	add	r2, pc, #4	; (adr r2, 8002008 <HAL_GPIO_Init+0x80>)
 8002004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002008:	08002083 	.word	0x08002083
 800200c:	0800205d 	.word	0x0800205d
 8002010:	0800206f 	.word	0x0800206f
 8002014:	080020b1 	.word	0x080020b1
 8002018:	080020b7 	.word	0x080020b7
 800201c:	080020b7 	.word	0x080020b7
 8002020:	080020b7 	.word	0x080020b7
 8002024:	080020b7 	.word	0x080020b7
 8002028:	080020b7 	.word	0x080020b7
 800202c:	080020b7 	.word	0x080020b7
 8002030:	080020b7 	.word	0x080020b7
 8002034:	080020b7 	.word	0x080020b7
 8002038:	080020b7 	.word	0x080020b7
 800203c:	080020b7 	.word	0x080020b7
 8002040:	080020b7 	.word	0x080020b7
 8002044:	080020b7 	.word	0x080020b7
 8002048:	080020b7 	.word	0x080020b7
 800204c:	08002065 	.word	0x08002065
 8002050:	08002079 	.word	0x08002079
 8002054:	4a79      	ldr	r2, [pc, #484]	; (800223c <HAL_GPIO_Init+0x2b4>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d013      	beq.n	8002082 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800205a:	e02c      	b.n	80020b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	623b      	str	r3, [r7, #32]
          break;
 8002062:	e029      	b.n	80020b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	3304      	adds	r3, #4
 800206a:	623b      	str	r3, [r7, #32]
          break;
 800206c:	e024      	b.n	80020b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	3308      	adds	r3, #8
 8002074:	623b      	str	r3, [r7, #32]
          break;
 8002076:	e01f      	b.n	80020b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	330c      	adds	r3, #12
 800207e:	623b      	str	r3, [r7, #32]
          break;
 8002080:	e01a      	b.n	80020b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d102      	bne.n	8002090 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800208a:	2304      	movs	r3, #4
 800208c:	623b      	str	r3, [r7, #32]
          break;
 800208e:	e013      	b.n	80020b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d105      	bne.n	80020a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002098:	2308      	movs	r3, #8
 800209a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69fa      	ldr	r2, [r7, #28]
 80020a0:	611a      	str	r2, [r3, #16]
          break;
 80020a2:	e009      	b.n	80020b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020a4:	2308      	movs	r3, #8
 80020a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69fa      	ldr	r2, [r7, #28]
 80020ac:	615a      	str	r2, [r3, #20]
          break;
 80020ae:	e003      	b.n	80020b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020b0:	2300      	movs	r3, #0
 80020b2:	623b      	str	r3, [r7, #32]
          break;
 80020b4:	e000      	b.n	80020b8 <HAL_GPIO_Init+0x130>
          break;
 80020b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	2bff      	cmp	r3, #255	; 0xff
 80020bc:	d801      	bhi.n	80020c2 <HAL_GPIO_Init+0x13a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	e001      	b.n	80020c6 <HAL_GPIO_Init+0x13e>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3304      	adds	r3, #4
 80020c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	2bff      	cmp	r3, #255	; 0xff
 80020cc:	d802      	bhi.n	80020d4 <HAL_GPIO_Init+0x14c>
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	e002      	b.n	80020da <HAL_GPIO_Init+0x152>
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	3b08      	subs	r3, #8
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	210f      	movs	r1, #15
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	fa01 f303 	lsl.w	r3, r1, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	401a      	ands	r2, r3
 80020ec:	6a39      	ldr	r1, [r7, #32]
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	fa01 f303 	lsl.w	r3, r1, r3
 80020f4:	431a      	orrs	r2, r3
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 80b1 	beq.w	800226a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002108:	4b4d      	ldr	r3, [pc, #308]	; (8002240 <HAL_GPIO_Init+0x2b8>)
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	4a4c      	ldr	r2, [pc, #304]	; (8002240 <HAL_GPIO_Init+0x2b8>)
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	6193      	str	r3, [r2, #24]
 8002114:	4b4a      	ldr	r3, [pc, #296]	; (8002240 <HAL_GPIO_Init+0x2b8>)
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002120:	4a48      	ldr	r2, [pc, #288]	; (8002244 <HAL_GPIO_Init+0x2bc>)
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	089b      	lsrs	r3, r3, #2
 8002126:	3302      	adds	r3, #2
 8002128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	220f      	movs	r2, #15
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	4013      	ands	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a40      	ldr	r2, [pc, #256]	; (8002248 <HAL_GPIO_Init+0x2c0>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d013      	beq.n	8002174 <HAL_GPIO_Init+0x1ec>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a3f      	ldr	r2, [pc, #252]	; (800224c <HAL_GPIO_Init+0x2c4>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d00d      	beq.n	8002170 <HAL_GPIO_Init+0x1e8>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a3e      	ldr	r2, [pc, #248]	; (8002250 <HAL_GPIO_Init+0x2c8>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d007      	beq.n	800216c <HAL_GPIO_Init+0x1e4>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a3d      	ldr	r2, [pc, #244]	; (8002254 <HAL_GPIO_Init+0x2cc>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d101      	bne.n	8002168 <HAL_GPIO_Init+0x1e0>
 8002164:	2303      	movs	r3, #3
 8002166:	e006      	b.n	8002176 <HAL_GPIO_Init+0x1ee>
 8002168:	2304      	movs	r3, #4
 800216a:	e004      	b.n	8002176 <HAL_GPIO_Init+0x1ee>
 800216c:	2302      	movs	r3, #2
 800216e:	e002      	b.n	8002176 <HAL_GPIO_Init+0x1ee>
 8002170:	2301      	movs	r3, #1
 8002172:	e000      	b.n	8002176 <HAL_GPIO_Init+0x1ee>
 8002174:	2300      	movs	r3, #0
 8002176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002178:	f002 0203 	and.w	r2, r2, #3
 800217c:	0092      	lsls	r2, r2, #2
 800217e:	4093      	lsls	r3, r2
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	4313      	orrs	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002186:	492f      	ldr	r1, [pc, #188]	; (8002244 <HAL_GPIO_Init+0x2bc>)
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	089b      	lsrs	r3, r3, #2
 800218c:	3302      	adds	r3, #2
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d006      	beq.n	80021ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021a0:	4b2d      	ldr	r3, [pc, #180]	; (8002258 <HAL_GPIO_Init+0x2d0>)
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	492c      	ldr	r1, [pc, #176]	; (8002258 <HAL_GPIO_Init+0x2d0>)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	608b      	str	r3, [r1, #8]
 80021ac:	e006      	b.n	80021bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021ae:	4b2a      	ldr	r3, [pc, #168]	; (8002258 <HAL_GPIO_Init+0x2d0>)
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	4928      	ldr	r1, [pc, #160]	; (8002258 <HAL_GPIO_Init+0x2d0>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d006      	beq.n	80021d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021c8:	4b23      	ldr	r3, [pc, #140]	; (8002258 <HAL_GPIO_Init+0x2d0>)
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	4922      	ldr	r1, [pc, #136]	; (8002258 <HAL_GPIO_Init+0x2d0>)
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	60cb      	str	r3, [r1, #12]
 80021d4:	e006      	b.n	80021e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021d6:	4b20      	ldr	r3, [pc, #128]	; (8002258 <HAL_GPIO_Init+0x2d0>)
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	43db      	mvns	r3, r3
 80021de:	491e      	ldr	r1, [pc, #120]	; (8002258 <HAL_GPIO_Init+0x2d0>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d006      	beq.n	80021fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021f0:	4b19      	ldr	r3, [pc, #100]	; (8002258 <HAL_GPIO_Init+0x2d0>)
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	4918      	ldr	r1, [pc, #96]	; (8002258 <HAL_GPIO_Init+0x2d0>)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]
 80021fc:	e006      	b.n	800220c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021fe:	4b16      	ldr	r3, [pc, #88]	; (8002258 <HAL_GPIO_Init+0x2d0>)
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	43db      	mvns	r3, r3
 8002206:	4914      	ldr	r1, [pc, #80]	; (8002258 <HAL_GPIO_Init+0x2d0>)
 8002208:	4013      	ands	r3, r2
 800220a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d021      	beq.n	800225c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002218:	4b0f      	ldr	r3, [pc, #60]	; (8002258 <HAL_GPIO_Init+0x2d0>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	490e      	ldr	r1, [pc, #56]	; (8002258 <HAL_GPIO_Init+0x2d0>)
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	4313      	orrs	r3, r2
 8002222:	600b      	str	r3, [r1, #0]
 8002224:	e021      	b.n	800226a <HAL_GPIO_Init+0x2e2>
 8002226:	bf00      	nop
 8002228:	10320000 	.word	0x10320000
 800222c:	10310000 	.word	0x10310000
 8002230:	10220000 	.word	0x10220000
 8002234:	10210000 	.word	0x10210000
 8002238:	10120000 	.word	0x10120000
 800223c:	10110000 	.word	0x10110000
 8002240:	40021000 	.word	0x40021000
 8002244:	40010000 	.word	0x40010000
 8002248:	40010800 	.word	0x40010800
 800224c:	40010c00 	.word	0x40010c00
 8002250:	40011000 	.word	0x40011000
 8002254:	40011400 	.word	0x40011400
 8002258:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800225c:	4b0b      	ldr	r3, [pc, #44]	; (800228c <HAL_GPIO_Init+0x304>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	43db      	mvns	r3, r3
 8002264:	4909      	ldr	r1, [pc, #36]	; (800228c <HAL_GPIO_Init+0x304>)
 8002266:	4013      	ands	r3, r2
 8002268:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	3301      	adds	r3, #1
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	fa22 f303 	lsr.w	r3, r2, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	f47f ae8e 	bne.w	8001f9c <HAL_GPIO_Init+0x14>
  }
}
 8002280:	bf00      	nop
 8002282:	bf00      	nop
 8002284:	372c      	adds	r7, #44	; 0x2c
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr
 800228c:	40010400 	.word	0x40010400

08002290 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e272      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 8087 	beq.w	80023be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022b0:	4b92      	ldr	r3, [pc, #584]	; (80024fc <HAL_RCC_OscConfig+0x26c>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 030c 	and.w	r3, r3, #12
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	d00c      	beq.n	80022d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022bc:	4b8f      	ldr	r3, [pc, #572]	; (80024fc <HAL_RCC_OscConfig+0x26c>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 030c 	and.w	r3, r3, #12
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d112      	bne.n	80022ee <HAL_RCC_OscConfig+0x5e>
 80022c8:	4b8c      	ldr	r3, [pc, #560]	; (80024fc <HAL_RCC_OscConfig+0x26c>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d4:	d10b      	bne.n	80022ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d6:	4b89      	ldr	r3, [pc, #548]	; (80024fc <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d06c      	beq.n	80023bc <HAL_RCC_OscConfig+0x12c>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d168      	bne.n	80023bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e24c      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f6:	d106      	bne.n	8002306 <HAL_RCC_OscConfig+0x76>
 80022f8:	4b80      	ldr	r3, [pc, #512]	; (80024fc <HAL_RCC_OscConfig+0x26c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a7f      	ldr	r2, [pc, #508]	; (80024fc <HAL_RCC_OscConfig+0x26c>)
 80022fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	e02e      	b.n	8002364 <HAL_RCC_OscConfig+0xd4>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10c      	bne.n	8002328 <HAL_RCC_OscConfig+0x98>
 800230e:	4b7b      	ldr	r3, [pc, #492]	; (80024fc <HAL_RCC_OscConfig+0x26c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a7a      	ldr	r2, [pc, #488]	; (80024fc <HAL_RCC_OscConfig+0x26c>)
 8002314:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	4b78      	ldr	r3, [pc, #480]	; (80024fc <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a77      	ldr	r2, [pc, #476]	; (80024fc <HAL_RCC_OscConfig+0x26c>)
 8002320:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	e01d      	b.n	8002364 <HAL_RCC_OscConfig+0xd4>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002330:	d10c      	bne.n	800234c <HAL_RCC_OscConfig+0xbc>
 8002332:	4b72      	ldr	r3, [pc, #456]	; (80024fc <HAL_RCC_OscConfig+0x26c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a71      	ldr	r2, [pc, #452]	; (80024fc <HAL_RCC_OscConfig+0x26c>)
 8002338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	4b6f      	ldr	r3, [pc, #444]	; (80024fc <HAL_RCC_OscConfig+0x26c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a6e      	ldr	r2, [pc, #440]	; (80024fc <HAL_RCC_OscConfig+0x26c>)
 8002344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	e00b      	b.n	8002364 <HAL_RCC_OscConfig+0xd4>
 800234c:	4b6b      	ldr	r3, [pc, #428]	; (80024fc <HAL_RCC_OscConfig+0x26c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a6a      	ldr	r2, [pc, #424]	; (80024fc <HAL_RCC_OscConfig+0x26c>)
 8002352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	4b68      	ldr	r3, [pc, #416]	; (80024fc <HAL_RCC_OscConfig+0x26c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a67      	ldr	r2, [pc, #412]	; (80024fc <HAL_RCC_OscConfig+0x26c>)
 800235e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002362:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d013      	beq.n	8002394 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236c:	f7fe ff9e 	bl	80012ac <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002374:	f7fe ff9a 	bl	80012ac <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b64      	cmp	r3, #100	; 0x64
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e200      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002386:	4b5d      	ldr	r3, [pc, #372]	; (80024fc <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0f0      	beq.n	8002374 <HAL_RCC_OscConfig+0xe4>
 8002392:	e014      	b.n	80023be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002394:	f7fe ff8a 	bl	80012ac <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800239c:	f7fe ff86 	bl	80012ac <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b64      	cmp	r3, #100	; 0x64
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e1ec      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ae:	4b53      	ldr	r3, [pc, #332]	; (80024fc <HAL_RCC_OscConfig+0x26c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x10c>
 80023ba:	e000      	b.n	80023be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d063      	beq.n	8002492 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ca:	4b4c      	ldr	r3, [pc, #304]	; (80024fc <HAL_RCC_OscConfig+0x26c>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f003 030c 	and.w	r3, r3, #12
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00b      	beq.n	80023ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023d6:	4b49      	ldr	r3, [pc, #292]	; (80024fc <HAL_RCC_OscConfig+0x26c>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d11c      	bne.n	800241c <HAL_RCC_OscConfig+0x18c>
 80023e2:	4b46      	ldr	r3, [pc, #280]	; (80024fc <HAL_RCC_OscConfig+0x26c>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d116      	bne.n	800241c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ee:	4b43      	ldr	r3, [pc, #268]	; (80024fc <HAL_RCC_OscConfig+0x26c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d005      	beq.n	8002406 <HAL_RCC_OscConfig+0x176>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d001      	beq.n	8002406 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e1c0      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002406:	4b3d      	ldr	r3, [pc, #244]	; (80024fc <HAL_RCC_OscConfig+0x26c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	4939      	ldr	r1, [pc, #228]	; (80024fc <HAL_RCC_OscConfig+0x26c>)
 8002416:	4313      	orrs	r3, r2
 8002418:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241a:	e03a      	b.n	8002492 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d020      	beq.n	8002466 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002424:	4b36      	ldr	r3, [pc, #216]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 8002426:	2201      	movs	r2, #1
 8002428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242a:	f7fe ff3f 	bl	80012ac <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002432:	f7fe ff3b 	bl	80012ac <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e1a1      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002444:	4b2d      	ldr	r3, [pc, #180]	; (80024fc <HAL_RCC_OscConfig+0x26c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0f0      	beq.n	8002432 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002450:	4b2a      	ldr	r3, [pc, #168]	; (80024fc <HAL_RCC_OscConfig+0x26c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	4927      	ldr	r1, [pc, #156]	; (80024fc <HAL_RCC_OscConfig+0x26c>)
 8002460:	4313      	orrs	r3, r2
 8002462:	600b      	str	r3, [r1, #0]
 8002464:	e015      	b.n	8002492 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002466:	4b26      	ldr	r3, [pc, #152]	; (8002500 <HAL_RCC_OscConfig+0x270>)
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246c:	f7fe ff1e 	bl	80012ac <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002474:	f7fe ff1a 	bl	80012ac <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e180      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002486:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f0      	bne.n	8002474 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d03a      	beq.n	8002514 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d019      	beq.n	80024da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024a6:	4b17      	ldr	r3, [pc, #92]	; (8002504 <HAL_RCC_OscConfig+0x274>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ac:	f7fe fefe 	bl	80012ac <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b4:	f7fe fefa 	bl	80012ac <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e160      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c6:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <HAL_RCC_OscConfig+0x26c>)
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0f0      	beq.n	80024b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024d2:	2001      	movs	r0, #1
 80024d4:	f000 face 	bl	8002a74 <RCC_Delay>
 80024d8:	e01c      	b.n	8002514 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024da:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <HAL_RCC_OscConfig+0x274>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e0:	f7fe fee4 	bl	80012ac <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e6:	e00f      	b.n	8002508 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e8:	f7fe fee0 	bl	80012ac <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d908      	bls.n	8002508 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e146      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
 80024fa:	bf00      	nop
 80024fc:	40021000 	.word	0x40021000
 8002500:	42420000 	.word	0x42420000
 8002504:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002508:	4b92      	ldr	r3, [pc, #584]	; (8002754 <HAL_RCC_OscConfig+0x4c4>)
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1e9      	bne.n	80024e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 80a6 	beq.w	800266e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002522:	2300      	movs	r3, #0
 8002524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002526:	4b8b      	ldr	r3, [pc, #556]	; (8002754 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10d      	bne.n	800254e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002532:	4b88      	ldr	r3, [pc, #544]	; (8002754 <HAL_RCC_OscConfig+0x4c4>)
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	4a87      	ldr	r2, [pc, #540]	; (8002754 <HAL_RCC_OscConfig+0x4c4>)
 8002538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800253c:	61d3      	str	r3, [r2, #28]
 800253e:	4b85      	ldr	r3, [pc, #532]	; (8002754 <HAL_RCC_OscConfig+0x4c4>)
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800254a:	2301      	movs	r3, #1
 800254c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254e:	4b82      	ldr	r3, [pc, #520]	; (8002758 <HAL_RCC_OscConfig+0x4c8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002556:	2b00      	cmp	r3, #0
 8002558:	d118      	bne.n	800258c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800255a:	4b7f      	ldr	r3, [pc, #508]	; (8002758 <HAL_RCC_OscConfig+0x4c8>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a7e      	ldr	r2, [pc, #504]	; (8002758 <HAL_RCC_OscConfig+0x4c8>)
 8002560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002566:	f7fe fea1 	bl	80012ac <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800256e:	f7fe fe9d 	bl	80012ac <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b64      	cmp	r3, #100	; 0x64
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e103      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002580:	4b75      	ldr	r3, [pc, #468]	; (8002758 <HAL_RCC_OscConfig+0x4c8>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f0      	beq.n	800256e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d106      	bne.n	80025a2 <HAL_RCC_OscConfig+0x312>
 8002594:	4b6f      	ldr	r3, [pc, #444]	; (8002754 <HAL_RCC_OscConfig+0x4c4>)
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	4a6e      	ldr	r2, [pc, #440]	; (8002754 <HAL_RCC_OscConfig+0x4c4>)
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	6213      	str	r3, [r2, #32]
 80025a0:	e02d      	b.n	80025fe <HAL_RCC_OscConfig+0x36e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10c      	bne.n	80025c4 <HAL_RCC_OscConfig+0x334>
 80025aa:	4b6a      	ldr	r3, [pc, #424]	; (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	4a69      	ldr	r2, [pc, #420]	; (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	f023 0301 	bic.w	r3, r3, #1
 80025b4:	6213      	str	r3, [r2, #32]
 80025b6:	4b67      	ldr	r3, [pc, #412]	; (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	4a66      	ldr	r2, [pc, #408]	; (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80025bc:	f023 0304 	bic.w	r3, r3, #4
 80025c0:	6213      	str	r3, [r2, #32]
 80025c2:	e01c      	b.n	80025fe <HAL_RCC_OscConfig+0x36e>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	2b05      	cmp	r3, #5
 80025ca:	d10c      	bne.n	80025e6 <HAL_RCC_OscConfig+0x356>
 80025cc:	4b61      	ldr	r3, [pc, #388]	; (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	4a60      	ldr	r2, [pc, #384]	; (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80025d2:	f043 0304 	orr.w	r3, r3, #4
 80025d6:	6213      	str	r3, [r2, #32]
 80025d8:	4b5e      	ldr	r3, [pc, #376]	; (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	4a5d      	ldr	r2, [pc, #372]	; (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	6213      	str	r3, [r2, #32]
 80025e4:	e00b      	b.n	80025fe <HAL_RCC_OscConfig+0x36e>
 80025e6:	4b5b      	ldr	r3, [pc, #364]	; (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	4a5a      	ldr	r2, [pc, #360]	; (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	f023 0301 	bic.w	r3, r3, #1
 80025f0:	6213      	str	r3, [r2, #32]
 80025f2:	4b58      	ldr	r3, [pc, #352]	; (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	4a57      	ldr	r2, [pc, #348]	; (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80025f8:	f023 0304 	bic.w	r3, r3, #4
 80025fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d015      	beq.n	8002632 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002606:	f7fe fe51 	bl	80012ac <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800260c:	e00a      	b.n	8002624 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260e:	f7fe fe4d 	bl	80012ac <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	f241 3288 	movw	r2, #5000	; 0x1388
 800261c:	4293      	cmp	r3, r2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e0b1      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002624:	4b4b      	ldr	r3, [pc, #300]	; (8002754 <HAL_RCC_OscConfig+0x4c4>)
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0ee      	beq.n	800260e <HAL_RCC_OscConfig+0x37e>
 8002630:	e014      	b.n	800265c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002632:	f7fe fe3b 	bl	80012ac <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002638:	e00a      	b.n	8002650 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800263a:	f7fe fe37 	bl	80012ac <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	f241 3288 	movw	r2, #5000	; 0x1388
 8002648:	4293      	cmp	r3, r2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e09b      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002650:	4b40      	ldr	r3, [pc, #256]	; (8002754 <HAL_RCC_OscConfig+0x4c4>)
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1ee      	bne.n	800263a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800265c:	7dfb      	ldrb	r3, [r7, #23]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d105      	bne.n	800266e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002662:	4b3c      	ldr	r3, [pc, #240]	; (8002754 <HAL_RCC_OscConfig+0x4c4>)
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	4a3b      	ldr	r2, [pc, #236]	; (8002754 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800266c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 8087 	beq.w	8002786 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002678:	4b36      	ldr	r3, [pc, #216]	; (8002754 <HAL_RCC_OscConfig+0x4c4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 030c 	and.w	r3, r3, #12
 8002680:	2b08      	cmp	r3, #8
 8002682:	d061      	beq.n	8002748 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d146      	bne.n	800271a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268c:	4b33      	ldr	r3, [pc, #204]	; (800275c <HAL_RCC_OscConfig+0x4cc>)
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002692:	f7fe fe0b 	bl	80012ac <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800269a:	f7fe fe07 	bl	80012ac <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e06d      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ac:	4b29      	ldr	r3, [pc, #164]	; (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1f0      	bne.n	800269a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c0:	d108      	bne.n	80026d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026c2:	4b24      	ldr	r3, [pc, #144]	; (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	4921      	ldr	r1, [pc, #132]	; (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026d4:	4b1f      	ldr	r3, [pc, #124]	; (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a19      	ldr	r1, [r3, #32]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	430b      	orrs	r3, r1
 80026e6:	491b      	ldr	r1, [pc, #108]	; (8002754 <HAL_RCC_OscConfig+0x4c4>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026ec:	4b1b      	ldr	r3, [pc, #108]	; (800275c <HAL_RCC_OscConfig+0x4cc>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f2:	f7fe fddb 	bl	80012ac <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fa:	f7fe fdd7 	bl	80012ac <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e03d      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <HAL_RCC_OscConfig+0x4c4>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0f0      	beq.n	80026fa <HAL_RCC_OscConfig+0x46a>
 8002718:	e035      	b.n	8002786 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271a:	4b10      	ldr	r3, [pc, #64]	; (800275c <HAL_RCC_OscConfig+0x4cc>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002720:	f7fe fdc4 	bl	80012ac <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002728:	f7fe fdc0 	bl	80012ac <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e026      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_RCC_OscConfig+0x4c4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0x498>
 8002746:	e01e      	b.n	8002786 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d107      	bne.n	8002760 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e019      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
 8002754:	40021000 	.word	0x40021000
 8002758:	40007000 	.word	0x40007000
 800275c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <HAL_RCC_OscConfig+0x500>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	429a      	cmp	r2, r3
 8002772:	d106      	bne.n	8002782 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277e:	429a      	cmp	r2, r3
 8002780:	d001      	beq.n	8002786 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3718      	adds	r7, #24
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40021000 	.word	0x40021000

08002794 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0d0      	b.n	800294a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027a8:	4b6a      	ldr	r3, [pc, #424]	; (8002954 <HAL_RCC_ClockConfig+0x1c0>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d910      	bls.n	80027d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b6:	4b67      	ldr	r3, [pc, #412]	; (8002954 <HAL_RCC_ClockConfig+0x1c0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 0207 	bic.w	r2, r3, #7
 80027be:	4965      	ldr	r1, [pc, #404]	; (8002954 <HAL_RCC_ClockConfig+0x1c0>)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c6:	4b63      	ldr	r3, [pc, #396]	; (8002954 <HAL_RCC_ClockConfig+0x1c0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e0b8      	b.n	800294a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d020      	beq.n	8002826 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d005      	beq.n	80027fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027f0:	4b59      	ldr	r3, [pc, #356]	; (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	4a58      	ldr	r2, [pc, #352]	; (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 80027f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002808:	4b53      	ldr	r3, [pc, #332]	; (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	4a52      	ldr	r2, [pc, #328]	; (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 800280e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002812:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002814:	4b50      	ldr	r3, [pc, #320]	; (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	494d      	ldr	r1, [pc, #308]	; (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 8002822:	4313      	orrs	r3, r2
 8002824:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d040      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d107      	bne.n	800284a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283a:	4b47      	ldr	r3, [pc, #284]	; (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d115      	bne.n	8002872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e07f      	b.n	800294a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b02      	cmp	r3, #2
 8002850:	d107      	bne.n	8002862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002852:	4b41      	ldr	r3, [pc, #260]	; (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d109      	bne.n	8002872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e073      	b.n	800294a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002862:	4b3d      	ldr	r3, [pc, #244]	; (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e06b      	b.n	800294a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002872:	4b39      	ldr	r3, [pc, #228]	; (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f023 0203 	bic.w	r2, r3, #3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	4936      	ldr	r1, [pc, #216]	; (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	4313      	orrs	r3, r2
 8002882:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002884:	f7fe fd12 	bl	80012ac <HAL_GetTick>
 8002888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288a:	e00a      	b.n	80028a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800288c:	f7fe fd0e 	bl	80012ac <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	f241 3288 	movw	r2, #5000	; 0x1388
 800289a:	4293      	cmp	r3, r2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e053      	b.n	800294a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a2:	4b2d      	ldr	r3, [pc, #180]	; (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 020c 	and.w	r2, r3, #12
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d1eb      	bne.n	800288c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028b4:	4b27      	ldr	r3, [pc, #156]	; (8002954 <HAL_RCC_ClockConfig+0x1c0>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d210      	bcs.n	80028e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c2:	4b24      	ldr	r3, [pc, #144]	; (8002954 <HAL_RCC_ClockConfig+0x1c0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 0207 	bic.w	r2, r3, #7
 80028ca:	4922      	ldr	r1, [pc, #136]	; (8002954 <HAL_RCC_ClockConfig+0x1c0>)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d2:	4b20      	ldr	r3, [pc, #128]	; (8002954 <HAL_RCC_ClockConfig+0x1c0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d001      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e032      	b.n	800294a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f0:	4b19      	ldr	r3, [pc, #100]	; (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4916      	ldr	r1, [pc, #88]	; (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d009      	beq.n	8002922 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800290e:	4b12      	ldr	r3, [pc, #72]	; (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	490e      	ldr	r1, [pc, #56]	; (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	4313      	orrs	r3, r2
 8002920:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002922:	f000 f821 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 8002926:	4602      	mov	r2, r0
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	490a      	ldr	r1, [pc, #40]	; (800295c <HAL_RCC_ClockConfig+0x1c8>)
 8002934:	5ccb      	ldrb	r3, [r1, r3]
 8002936:	fa22 f303 	lsr.w	r3, r2, r3
 800293a:	4a09      	ldr	r2, [pc, #36]	; (8002960 <HAL_RCC_ClockConfig+0x1cc>)
 800293c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800293e:	4b09      	ldr	r3, [pc, #36]	; (8002964 <HAL_RCC_ClockConfig+0x1d0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe fc70 	bl	8001228 <HAL_InitTick>

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40022000 	.word	0x40022000
 8002958:	40021000 	.word	0x40021000
 800295c:	080078dc 	.word	0x080078dc
 8002960:	20000000 	.word	0x20000000
 8002964:	20000004 	.word	0x20000004

08002968 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800296e:	2300      	movs	r3, #0
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	2300      	movs	r3, #0
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	2300      	movs	r3, #0
 800297c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800297e:	2300      	movs	r3, #0
 8002980:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002982:	4b1e      	ldr	r3, [pc, #120]	; (80029fc <HAL_RCC_GetSysClockFreq+0x94>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f003 030c 	and.w	r3, r3, #12
 800298e:	2b04      	cmp	r3, #4
 8002990:	d002      	beq.n	8002998 <HAL_RCC_GetSysClockFreq+0x30>
 8002992:	2b08      	cmp	r3, #8
 8002994:	d003      	beq.n	800299e <HAL_RCC_GetSysClockFreq+0x36>
 8002996:	e027      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002998:	4b19      	ldr	r3, [pc, #100]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x98>)
 800299a:	613b      	str	r3, [r7, #16]
      break;
 800299c:	e027      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	0c9b      	lsrs	r3, r3, #18
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	4a17      	ldr	r2, [pc, #92]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029a8:	5cd3      	ldrb	r3, [r2, r3]
 80029aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d010      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029b6:	4b11      	ldr	r3, [pc, #68]	; (80029fc <HAL_RCC_GetSysClockFreq+0x94>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	0c5b      	lsrs	r3, r3, #17
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	4a11      	ldr	r2, [pc, #68]	; (8002a08 <HAL_RCC_GetSysClockFreq+0xa0>)
 80029c2:	5cd3      	ldrb	r3, [r2, r3]
 80029c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a0d      	ldr	r2, [pc, #52]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x98>)
 80029ca:	fb03 f202 	mul.w	r2, r3, r2
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	e004      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a0c      	ldr	r2, [pc, #48]	; (8002a0c <HAL_RCC_GetSysClockFreq+0xa4>)
 80029dc:	fb02 f303 	mul.w	r3, r2, r3
 80029e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	613b      	str	r3, [r7, #16]
      break;
 80029e6:	e002      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029e8:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x98>)
 80029ea:	613b      	str	r3, [r7, #16]
      break;
 80029ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ee:	693b      	ldr	r3, [r7, #16]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	371c      	adds	r7, #28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40021000 	.word	0x40021000
 8002a00:	007a1200 	.word	0x007a1200
 8002a04:	080078f4 	.word	0x080078f4
 8002a08:	08007904 	.word	0x08007904
 8002a0c:	003d0900 	.word	0x003d0900

08002a10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a14:	4b02      	ldr	r3, [pc, #8]	; (8002a20 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a16:	681b      	ldr	r3, [r3, #0]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr
 8002a20:	20000000 	.word	0x20000000

08002a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a28:	f7ff fff2 	bl	8002a10 <HAL_RCC_GetHCLKFreq>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	0a1b      	lsrs	r3, r3, #8
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	4903      	ldr	r1, [pc, #12]	; (8002a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a3a:	5ccb      	ldrb	r3, [r1, r3]
 8002a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40021000 	.word	0x40021000
 8002a48:	080078ec 	.word	0x080078ec

08002a4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a50:	f7ff ffde 	bl	8002a10 <HAL_RCC_GetHCLKFreq>
 8002a54:	4602      	mov	r2, r0
 8002a56:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	0adb      	lsrs	r3, r3, #11
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	4903      	ldr	r1, [pc, #12]	; (8002a70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a62:	5ccb      	ldrb	r3, [r1, r3]
 8002a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	080078ec 	.word	0x080078ec

08002a74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <RCC_Delay+0x34>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a0a      	ldr	r2, [pc, #40]	; (8002aac <RCC_Delay+0x38>)
 8002a82:	fba2 2303 	umull	r2, r3, r2, r3
 8002a86:	0a5b      	lsrs	r3, r3, #9
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	fb02 f303 	mul.w	r3, r2, r3
 8002a8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a90:	bf00      	nop
  }
  while (Delay --);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	1e5a      	subs	r2, r3, #1
 8002a96:	60fa      	str	r2, [r7, #12]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1f9      	bne.n	8002a90 <RCC_Delay+0x1c>
}
 8002a9c:	bf00      	nop
 8002a9e:	bf00      	nop
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr
 8002aa8:	20000000 	.word	0x20000000
 8002aac:	10624dd3 	.word	0x10624dd3

08002ab0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	2300      	movs	r3, #0
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d07d      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002acc:	2300      	movs	r3, #0
 8002ace:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ad0:	4b4f      	ldr	r3, [pc, #316]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10d      	bne.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002adc:	4b4c      	ldr	r3, [pc, #304]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	4a4b      	ldr	r2, [pc, #300]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	61d3      	str	r3, [r2, #28]
 8002ae8:	4b49      	ldr	r3, [pc, #292]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af4:	2301      	movs	r3, #1
 8002af6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af8:	4b46      	ldr	r3, [pc, #280]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d118      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b04:	4b43      	ldr	r3, [pc, #268]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a42      	ldr	r2, [pc, #264]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b10:	f7fe fbcc 	bl	80012ac <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b16:	e008      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b18:	f7fe fbc8 	bl	80012ac <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b64      	cmp	r3, #100	; 0x64
 8002b24:	d901      	bls.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e06d      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2a:	4b3a      	ldr	r3, [pc, #232]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b36:	4b36      	ldr	r3, [pc, #216]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d02e      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d027      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b54:	4b2e      	ldr	r3, [pc, #184]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b5c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b5e:	4b2e      	ldr	r3, [pc, #184]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b64:	4b2c      	ldr	r3, [pc, #176]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b6a:	4a29      	ldr	r2, [pc, #164]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d014      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7a:	f7fe fb97 	bl	80012ac <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b80:	e00a      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b82:	f7fe fb93 	bl	80012ac <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e036      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b98:	4b1d      	ldr	r3, [pc, #116]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d0ee      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ba4:	4b1a      	ldr	r3, [pc, #104]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	4917      	ldr	r1, [pc, #92]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bb6:	7dfb      	ldrb	r3, [r7, #23]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d105      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bbc:	4b14      	ldr	r3, [pc, #80]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	4a13      	ldr	r2, [pc, #76]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d008      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bd4:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	490b      	ldr	r1, [pc, #44]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0310 	and.w	r3, r3, #16
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d008      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bf2:	4b07      	ldr	r3, [pc, #28]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	4904      	ldr	r1, [pc, #16]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40021000 	.word	0x40021000
 8002c14:	40007000 	.word	0x40007000
 8002c18:	42420440 	.word	0x42420440

08002c1c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	2300      	movs	r3, #0
 8002c2a:	61fb      	str	r3, [r7, #28]
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	2300      	movs	r3, #0
 8002c36:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b10      	cmp	r3, #16
 8002c3c:	d00a      	beq.n	8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b10      	cmp	r3, #16
 8002c42:	f200 808a 	bhi.w	8002d5a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d045      	beq.n	8002cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d075      	beq.n	8002d3e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002c52:	e082      	b.n	8002d5a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002c54:	4b46      	ldr	r3, [pc, #280]	; (8002d70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002c5a:	4b45      	ldr	r3, [pc, #276]	; (8002d70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d07b      	beq.n	8002d5e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	0c9b      	lsrs	r3, r3, #18
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	4a41      	ldr	r2, [pc, #260]	; (8002d74 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002c70:	5cd3      	ldrb	r3, [r2, r3]
 8002c72:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d015      	beq.n	8002caa <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c7e:	4b3c      	ldr	r3, [pc, #240]	; (8002d70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	0c5b      	lsrs	r3, r3, #17
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	4a3b      	ldr	r2, [pc, #236]	; (8002d78 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002c8a:	5cd3      	ldrb	r3, [r2, r3]
 8002c8c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00d      	beq.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002c98:	4a38      	ldr	r2, [pc, #224]	; (8002d7c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	fb02 f303 	mul.w	r3, r2, r3
 8002ca6:	61fb      	str	r3, [r7, #28]
 8002ca8:	e004      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4a34      	ldr	r2, [pc, #208]	; (8002d80 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002cae:	fb02 f303 	mul.w	r3, r2, r3
 8002cb2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002cb4:	4b2e      	ldr	r3, [pc, #184]	; (8002d70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cc0:	d102      	bne.n	8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	61bb      	str	r3, [r7, #24]
      break;
 8002cc6:	e04a      	b.n	8002d5e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	4a2d      	ldr	r2, [pc, #180]	; (8002d84 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	085b      	lsrs	r3, r3, #1
 8002cd4:	61bb      	str	r3, [r7, #24]
      break;
 8002cd6:	e042      	b.n	8002d5e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002cd8:	4b25      	ldr	r3, [pc, #148]	; (8002d70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ce8:	d108      	bne.n	8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002cf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cf8:	61bb      	str	r3, [r7, #24]
 8002cfa:	e01f      	b.n	8002d3c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d06:	d109      	bne.n	8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002d08:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002d14:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002d18:	61bb      	str	r3, [r7, #24]
 8002d1a:	e00f      	b.n	8002d3c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d26:	d11c      	bne.n	8002d62 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002d28:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d016      	beq.n	8002d62 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002d34:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002d38:	61bb      	str	r3, [r7, #24]
      break;
 8002d3a:	e012      	b.n	8002d62 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002d3c:	e011      	b.n	8002d62 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002d3e:	f7ff fe85 	bl	8002a4c <HAL_RCC_GetPCLK2Freq>
 8002d42:	4602      	mov	r2, r0
 8002d44:	4b0a      	ldr	r3, [pc, #40]	; (8002d70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	0b9b      	lsrs	r3, r3, #14
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	3301      	adds	r3, #1
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d56:	61bb      	str	r3, [r7, #24]
      break;
 8002d58:	e004      	b.n	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002d5a:	bf00      	nop
 8002d5c:	e002      	b.n	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002d5e:	bf00      	nop
 8002d60:	e000      	b.n	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002d62:	bf00      	nop
    }
  }
  return (frequency);
 8002d64:	69bb      	ldr	r3, [r7, #24]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3720      	adds	r7, #32
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000
 8002d74:	08007908 	.word	0x08007908
 8002d78:	08007918 	.word	0x08007918
 8002d7c:	007a1200 	.word	0x007a1200
 8002d80:	003d0900 	.word	0x003d0900
 8002d84:	aaaaaaab 	.word	0xaaaaaaab

08002d88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e042      	b.n	8002e20 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d106      	bne.n	8002db4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fe f8d6 	bl	8000f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2224      	movs	r2, #36	; 0x24
 8002db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f91d 	bl	800300c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002de0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695a      	ldr	r2, [r3, #20]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002df0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08a      	sub	sp, #40	; 0x28
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	603b      	str	r3, [r7, #0]
 8002e34:	4613      	mov	r3, r2
 8002e36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b20      	cmp	r3, #32
 8002e46:	d16d      	bne.n	8002f24 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <HAL_UART_Transmit+0x2c>
 8002e4e:	88fb      	ldrh	r3, [r7, #6]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e066      	b.n	8002f26 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2221      	movs	r2, #33	; 0x21
 8002e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e66:	f7fe fa21 	bl	80012ac <HAL_GetTick>
 8002e6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	88fa      	ldrh	r2, [r7, #6]
 8002e70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	88fa      	ldrh	r2, [r7, #6]
 8002e76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e80:	d108      	bne.n	8002e94 <HAL_UART_Transmit+0x6c>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d104      	bne.n	8002e94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	61bb      	str	r3, [r7, #24]
 8002e92:	e003      	b.n	8002e9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e9c:	e02a      	b.n	8002ef4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2180      	movs	r1, #128	; 0x80
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 f840 	bl	8002f2e <UART_WaitOnFlagUntilTimeout>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e036      	b.n	8002f26 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10b      	bne.n	8002ed6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ecc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	3302      	adds	r3, #2
 8002ed2:	61bb      	str	r3, [r7, #24]
 8002ed4:	e007      	b.n	8002ee6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	781a      	ldrb	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	3b01      	subs	r3, #1
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1cf      	bne.n	8002e9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2200      	movs	r2, #0
 8002f06:	2140      	movs	r1, #64	; 0x40
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 f810 	bl	8002f2e <UART_WaitOnFlagUntilTimeout>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e006      	b.n	8002f26 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	e000      	b.n	8002f26 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002f24:	2302      	movs	r3, #2
  }
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3720      	adds	r7, #32
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b090      	sub	sp, #64	; 0x40
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	60f8      	str	r0, [r7, #12]
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	603b      	str	r3, [r7, #0]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f3e:	e050      	b.n	8002fe2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f46:	d04c      	beq.n	8002fe2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d007      	beq.n	8002f5e <UART_WaitOnFlagUntilTimeout+0x30>
 8002f4e:	f7fe f9ad 	bl	80012ac <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d241      	bcs.n	8002fe2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	330c      	adds	r3, #12
 8002f64:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f68:	e853 3f00 	ldrex	r3, [r3]
 8002f6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	330c      	adds	r3, #12
 8002f7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f7e:	637a      	str	r2, [r7, #52]	; 0x34
 8002f80:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f86:	e841 2300 	strex	r3, r2, [r1]
 8002f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1e5      	bne.n	8002f5e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	3314      	adds	r3, #20
 8002f98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	e853 3f00 	ldrex	r3, [r3]
 8002fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	f023 0301 	bic.w	r3, r3, #1
 8002fa8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	3314      	adds	r3, #20
 8002fb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fb2:	623a      	str	r2, [r7, #32]
 8002fb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb6:	69f9      	ldr	r1, [r7, #28]
 8002fb8:	6a3a      	ldr	r2, [r7, #32]
 8002fba:	e841 2300 	strex	r3, r2, [r1]
 8002fbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1e5      	bne.n	8002f92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e00f      	b.n	8003002 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	4013      	ands	r3, r2
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	bf0c      	ite	eq
 8002ff2:	2301      	moveq	r3, #1
 8002ff4:	2300      	movne	r3, #0
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d09f      	beq.n	8002f40 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3740      	adds	r7, #64	; 0x40
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
	...

0800300c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	4313      	orrs	r3, r2
 800303a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003046:	f023 030c 	bic.w	r3, r3, #12
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6812      	ldr	r2, [r2, #0]
 800304e:	68b9      	ldr	r1, [r7, #8]
 8003050:	430b      	orrs	r3, r1
 8003052:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a2c      	ldr	r2, [pc, #176]	; (8003120 <UART_SetConfig+0x114>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d103      	bne.n	800307c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003074:	f7ff fcea 	bl	8002a4c <HAL_RCC_GetPCLK2Freq>
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	e002      	b.n	8003082 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800307c:	f7ff fcd2 	bl	8002a24 <HAL_RCC_GetPCLK1Freq>
 8003080:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	009a      	lsls	r2, r3, #2
 800308c:	441a      	add	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	fbb2 f3f3 	udiv	r3, r2, r3
 8003098:	4a22      	ldr	r2, [pc, #136]	; (8003124 <UART_SetConfig+0x118>)
 800309a:	fba2 2303 	umull	r2, r3, r2, r3
 800309e:	095b      	lsrs	r3, r3, #5
 80030a0:	0119      	lsls	r1, r3, #4
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	009a      	lsls	r2, r3, #2
 80030ac:	441a      	add	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80030b8:	4b1a      	ldr	r3, [pc, #104]	; (8003124 <UART_SetConfig+0x118>)
 80030ba:	fba3 0302 	umull	r0, r3, r3, r2
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	2064      	movs	r0, #100	; 0x64
 80030c2:	fb00 f303 	mul.w	r3, r0, r3
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	3332      	adds	r3, #50	; 0x32
 80030cc:	4a15      	ldr	r2, [pc, #84]	; (8003124 <UART_SetConfig+0x118>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030d8:	4419      	add	r1, r3
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4613      	mov	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	009a      	lsls	r2, r3, #2
 80030e4:	441a      	add	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80030f0:	4b0c      	ldr	r3, [pc, #48]	; (8003124 <UART_SetConfig+0x118>)
 80030f2:	fba3 0302 	umull	r0, r3, r3, r2
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	2064      	movs	r0, #100	; 0x64
 80030fa:	fb00 f303 	mul.w	r3, r0, r3
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	3332      	adds	r3, #50	; 0x32
 8003104:	4a07      	ldr	r2, [pc, #28]	; (8003124 <UART_SetConfig+0x118>)
 8003106:	fba2 2303 	umull	r2, r3, r2, r3
 800310a:	095b      	lsrs	r3, r3, #5
 800310c:	f003 020f 	and.w	r2, r3, #15
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	440a      	add	r2, r1
 8003116:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003118:	bf00      	nop
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40013800 	.word	0x40013800
 8003124:	51eb851f 	.word	0x51eb851f

08003128 <__cvt>:
 8003128:	2b00      	cmp	r3, #0
 800312a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800312e:	461f      	mov	r7, r3
 8003130:	bfbb      	ittet	lt
 8003132:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003136:	461f      	movlt	r7, r3
 8003138:	2300      	movge	r3, #0
 800313a:	232d      	movlt	r3, #45	; 0x2d
 800313c:	b088      	sub	sp, #32
 800313e:	4614      	mov	r4, r2
 8003140:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003142:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003144:	7013      	strb	r3, [r2, #0]
 8003146:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003148:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800314c:	f023 0820 	bic.w	r8, r3, #32
 8003150:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003154:	d005      	beq.n	8003162 <__cvt+0x3a>
 8003156:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800315a:	d100      	bne.n	800315e <__cvt+0x36>
 800315c:	3501      	adds	r5, #1
 800315e:	2302      	movs	r3, #2
 8003160:	e000      	b.n	8003164 <__cvt+0x3c>
 8003162:	2303      	movs	r3, #3
 8003164:	aa07      	add	r2, sp, #28
 8003166:	9204      	str	r2, [sp, #16]
 8003168:	aa06      	add	r2, sp, #24
 800316a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800316e:	e9cd 3500 	strd	r3, r5, [sp]
 8003172:	4622      	mov	r2, r4
 8003174:	463b      	mov	r3, r7
 8003176:	f001 f897 	bl	80042a8 <_dtoa_r>
 800317a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800317e:	4606      	mov	r6, r0
 8003180:	d102      	bne.n	8003188 <__cvt+0x60>
 8003182:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003184:	07db      	lsls	r3, r3, #31
 8003186:	d522      	bpl.n	80031ce <__cvt+0xa6>
 8003188:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800318c:	eb06 0905 	add.w	r9, r6, r5
 8003190:	d110      	bne.n	80031b4 <__cvt+0x8c>
 8003192:	7833      	ldrb	r3, [r6, #0]
 8003194:	2b30      	cmp	r3, #48	; 0x30
 8003196:	d10a      	bne.n	80031ae <__cvt+0x86>
 8003198:	2200      	movs	r2, #0
 800319a:	2300      	movs	r3, #0
 800319c:	4620      	mov	r0, r4
 800319e:	4639      	mov	r1, r7
 80031a0:	f7fd fc02 	bl	80009a8 <__aeabi_dcmpeq>
 80031a4:	b918      	cbnz	r0, 80031ae <__cvt+0x86>
 80031a6:	f1c5 0501 	rsb	r5, r5, #1
 80031aa:	f8ca 5000 	str.w	r5, [sl]
 80031ae:	f8da 3000 	ldr.w	r3, [sl]
 80031b2:	4499      	add	r9, r3
 80031b4:	2200      	movs	r2, #0
 80031b6:	2300      	movs	r3, #0
 80031b8:	4620      	mov	r0, r4
 80031ba:	4639      	mov	r1, r7
 80031bc:	f7fd fbf4 	bl	80009a8 <__aeabi_dcmpeq>
 80031c0:	b108      	cbz	r0, 80031c6 <__cvt+0x9e>
 80031c2:	f8cd 901c 	str.w	r9, [sp, #28]
 80031c6:	2230      	movs	r2, #48	; 0x30
 80031c8:	9b07      	ldr	r3, [sp, #28]
 80031ca:	454b      	cmp	r3, r9
 80031cc:	d307      	bcc.n	80031de <__cvt+0xb6>
 80031ce:	4630      	mov	r0, r6
 80031d0:	9b07      	ldr	r3, [sp, #28]
 80031d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80031d4:	1b9b      	subs	r3, r3, r6
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	b008      	add	sp, #32
 80031da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031de:	1c59      	adds	r1, r3, #1
 80031e0:	9107      	str	r1, [sp, #28]
 80031e2:	701a      	strb	r2, [r3, #0]
 80031e4:	e7f0      	b.n	80031c8 <__cvt+0xa0>

080031e6 <__exponent>:
 80031e6:	4603      	mov	r3, r0
 80031e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031ea:	2900      	cmp	r1, #0
 80031ec:	f803 2b02 	strb.w	r2, [r3], #2
 80031f0:	bfb6      	itet	lt
 80031f2:	222d      	movlt	r2, #45	; 0x2d
 80031f4:	222b      	movge	r2, #43	; 0x2b
 80031f6:	4249      	neglt	r1, r1
 80031f8:	2909      	cmp	r1, #9
 80031fa:	7042      	strb	r2, [r0, #1]
 80031fc:	dd2a      	ble.n	8003254 <__exponent+0x6e>
 80031fe:	f10d 0207 	add.w	r2, sp, #7
 8003202:	4617      	mov	r7, r2
 8003204:	260a      	movs	r6, #10
 8003206:	fb91 f5f6 	sdiv	r5, r1, r6
 800320a:	4694      	mov	ip, r2
 800320c:	fb06 1415 	mls	r4, r6, r5, r1
 8003210:	3430      	adds	r4, #48	; 0x30
 8003212:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003216:	460c      	mov	r4, r1
 8003218:	2c63      	cmp	r4, #99	; 0x63
 800321a:	4629      	mov	r1, r5
 800321c:	f102 32ff 	add.w	r2, r2, #4294967295
 8003220:	dcf1      	bgt.n	8003206 <__exponent+0x20>
 8003222:	3130      	adds	r1, #48	; 0x30
 8003224:	f1ac 0402 	sub.w	r4, ip, #2
 8003228:	f802 1c01 	strb.w	r1, [r2, #-1]
 800322c:	4622      	mov	r2, r4
 800322e:	1c41      	adds	r1, r0, #1
 8003230:	42ba      	cmp	r2, r7
 8003232:	d30a      	bcc.n	800324a <__exponent+0x64>
 8003234:	f10d 0209 	add.w	r2, sp, #9
 8003238:	eba2 020c 	sub.w	r2, r2, ip
 800323c:	42bc      	cmp	r4, r7
 800323e:	bf88      	it	hi
 8003240:	2200      	movhi	r2, #0
 8003242:	4413      	add	r3, r2
 8003244:	1a18      	subs	r0, r3, r0
 8003246:	b003      	add	sp, #12
 8003248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800324a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800324e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003252:	e7ed      	b.n	8003230 <__exponent+0x4a>
 8003254:	2330      	movs	r3, #48	; 0x30
 8003256:	3130      	adds	r1, #48	; 0x30
 8003258:	7083      	strb	r3, [r0, #2]
 800325a:	70c1      	strb	r1, [r0, #3]
 800325c:	1d03      	adds	r3, r0, #4
 800325e:	e7f1      	b.n	8003244 <__exponent+0x5e>

08003260 <_printf_float>:
 8003260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003264:	b091      	sub	sp, #68	; 0x44
 8003266:	460c      	mov	r4, r1
 8003268:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800326c:	4616      	mov	r6, r2
 800326e:	461f      	mov	r7, r3
 8003270:	4605      	mov	r5, r0
 8003272:	f000 ff05 	bl	8004080 <_localeconv_r>
 8003276:	6803      	ldr	r3, [r0, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	9309      	str	r3, [sp, #36]	; 0x24
 800327c:	f7fc ff68 	bl	8000150 <strlen>
 8003280:	2300      	movs	r3, #0
 8003282:	930e      	str	r3, [sp, #56]	; 0x38
 8003284:	f8d8 3000 	ldr.w	r3, [r8]
 8003288:	900a      	str	r0, [sp, #40]	; 0x28
 800328a:	3307      	adds	r3, #7
 800328c:	f023 0307 	bic.w	r3, r3, #7
 8003290:	f103 0208 	add.w	r2, r3, #8
 8003294:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003298:	f8d4 b000 	ldr.w	fp, [r4]
 800329c:	f8c8 2000 	str.w	r2, [r8]
 80032a0:	e9d3 a800 	ldrd	sl, r8, [r3]
 80032a4:	4652      	mov	r2, sl
 80032a6:	4643      	mov	r3, r8
 80032a8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80032ac:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80032b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80032b2:	f04f 32ff 	mov.w	r2, #4294967295
 80032b6:	4650      	mov	r0, sl
 80032b8:	4b9c      	ldr	r3, [pc, #624]	; (800352c <_printf_float+0x2cc>)
 80032ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80032bc:	f7fd fba6 	bl	8000a0c <__aeabi_dcmpun>
 80032c0:	bb70      	cbnz	r0, 8003320 <_printf_float+0xc0>
 80032c2:	f04f 32ff 	mov.w	r2, #4294967295
 80032c6:	4650      	mov	r0, sl
 80032c8:	4b98      	ldr	r3, [pc, #608]	; (800352c <_printf_float+0x2cc>)
 80032ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80032cc:	f7fd fb80 	bl	80009d0 <__aeabi_dcmple>
 80032d0:	bb30      	cbnz	r0, 8003320 <_printf_float+0xc0>
 80032d2:	2200      	movs	r2, #0
 80032d4:	2300      	movs	r3, #0
 80032d6:	4650      	mov	r0, sl
 80032d8:	4641      	mov	r1, r8
 80032da:	f7fd fb6f 	bl	80009bc <__aeabi_dcmplt>
 80032de:	b110      	cbz	r0, 80032e6 <_printf_float+0x86>
 80032e0:	232d      	movs	r3, #45	; 0x2d
 80032e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032e6:	4a92      	ldr	r2, [pc, #584]	; (8003530 <_printf_float+0x2d0>)
 80032e8:	4b92      	ldr	r3, [pc, #584]	; (8003534 <_printf_float+0x2d4>)
 80032ea:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80032ee:	bf94      	ite	ls
 80032f0:	4690      	movls	r8, r2
 80032f2:	4698      	movhi	r8, r3
 80032f4:	2303      	movs	r3, #3
 80032f6:	f04f 0a00 	mov.w	sl, #0
 80032fa:	6123      	str	r3, [r4, #16]
 80032fc:	f02b 0304 	bic.w	r3, fp, #4
 8003300:	6023      	str	r3, [r4, #0]
 8003302:	4633      	mov	r3, r6
 8003304:	4621      	mov	r1, r4
 8003306:	4628      	mov	r0, r5
 8003308:	9700      	str	r7, [sp, #0]
 800330a:	aa0f      	add	r2, sp, #60	; 0x3c
 800330c:	f000 f9d6 	bl	80036bc <_printf_common>
 8003310:	3001      	adds	r0, #1
 8003312:	f040 8090 	bne.w	8003436 <_printf_float+0x1d6>
 8003316:	f04f 30ff 	mov.w	r0, #4294967295
 800331a:	b011      	add	sp, #68	; 0x44
 800331c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003320:	4652      	mov	r2, sl
 8003322:	4643      	mov	r3, r8
 8003324:	4650      	mov	r0, sl
 8003326:	4641      	mov	r1, r8
 8003328:	f7fd fb70 	bl	8000a0c <__aeabi_dcmpun>
 800332c:	b148      	cbz	r0, 8003342 <_printf_float+0xe2>
 800332e:	f1b8 0f00 	cmp.w	r8, #0
 8003332:	bfb8      	it	lt
 8003334:	232d      	movlt	r3, #45	; 0x2d
 8003336:	4a80      	ldr	r2, [pc, #512]	; (8003538 <_printf_float+0x2d8>)
 8003338:	bfb8      	it	lt
 800333a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800333e:	4b7f      	ldr	r3, [pc, #508]	; (800353c <_printf_float+0x2dc>)
 8003340:	e7d3      	b.n	80032ea <_printf_float+0x8a>
 8003342:	6863      	ldr	r3, [r4, #4]
 8003344:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	d142      	bne.n	80033d2 <_printf_float+0x172>
 800334c:	2306      	movs	r3, #6
 800334e:	6063      	str	r3, [r4, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	9206      	str	r2, [sp, #24]
 8003354:	aa0e      	add	r2, sp, #56	; 0x38
 8003356:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800335a:	aa0d      	add	r2, sp, #52	; 0x34
 800335c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003360:	9203      	str	r2, [sp, #12]
 8003362:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003366:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800336a:	6023      	str	r3, [r4, #0]
 800336c:	6863      	ldr	r3, [r4, #4]
 800336e:	4652      	mov	r2, sl
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	4628      	mov	r0, r5
 8003374:	4643      	mov	r3, r8
 8003376:	910b      	str	r1, [sp, #44]	; 0x2c
 8003378:	f7ff fed6 	bl	8003128 <__cvt>
 800337c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800337e:	4680      	mov	r8, r0
 8003380:	2947      	cmp	r1, #71	; 0x47
 8003382:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003384:	d108      	bne.n	8003398 <_printf_float+0x138>
 8003386:	1cc8      	adds	r0, r1, #3
 8003388:	db02      	blt.n	8003390 <_printf_float+0x130>
 800338a:	6863      	ldr	r3, [r4, #4]
 800338c:	4299      	cmp	r1, r3
 800338e:	dd40      	ble.n	8003412 <_printf_float+0x1b2>
 8003390:	f1a9 0902 	sub.w	r9, r9, #2
 8003394:	fa5f f989 	uxtb.w	r9, r9
 8003398:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800339c:	d81f      	bhi.n	80033de <_printf_float+0x17e>
 800339e:	464a      	mov	r2, r9
 80033a0:	3901      	subs	r1, #1
 80033a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80033a6:	910d      	str	r1, [sp, #52]	; 0x34
 80033a8:	f7ff ff1d 	bl	80031e6 <__exponent>
 80033ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80033ae:	4682      	mov	sl, r0
 80033b0:	1813      	adds	r3, r2, r0
 80033b2:	2a01      	cmp	r2, #1
 80033b4:	6123      	str	r3, [r4, #16]
 80033b6:	dc02      	bgt.n	80033be <_printf_float+0x15e>
 80033b8:	6822      	ldr	r2, [r4, #0]
 80033ba:	07d2      	lsls	r2, r2, #31
 80033bc:	d501      	bpl.n	80033c2 <_printf_float+0x162>
 80033be:	3301      	adds	r3, #1
 80033c0:	6123      	str	r3, [r4, #16]
 80033c2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d09b      	beq.n	8003302 <_printf_float+0xa2>
 80033ca:	232d      	movs	r3, #45	; 0x2d
 80033cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033d0:	e797      	b.n	8003302 <_printf_float+0xa2>
 80033d2:	2947      	cmp	r1, #71	; 0x47
 80033d4:	d1bc      	bne.n	8003350 <_printf_float+0xf0>
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1ba      	bne.n	8003350 <_printf_float+0xf0>
 80033da:	2301      	movs	r3, #1
 80033dc:	e7b7      	b.n	800334e <_printf_float+0xee>
 80033de:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80033e2:	d118      	bne.n	8003416 <_printf_float+0x1b6>
 80033e4:	2900      	cmp	r1, #0
 80033e6:	6863      	ldr	r3, [r4, #4]
 80033e8:	dd0b      	ble.n	8003402 <_printf_float+0x1a2>
 80033ea:	6121      	str	r1, [r4, #16]
 80033ec:	b913      	cbnz	r3, 80033f4 <_printf_float+0x194>
 80033ee:	6822      	ldr	r2, [r4, #0]
 80033f0:	07d0      	lsls	r0, r2, #31
 80033f2:	d502      	bpl.n	80033fa <_printf_float+0x19a>
 80033f4:	3301      	adds	r3, #1
 80033f6:	440b      	add	r3, r1
 80033f8:	6123      	str	r3, [r4, #16]
 80033fa:	f04f 0a00 	mov.w	sl, #0
 80033fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8003400:	e7df      	b.n	80033c2 <_printf_float+0x162>
 8003402:	b913      	cbnz	r3, 800340a <_printf_float+0x1aa>
 8003404:	6822      	ldr	r2, [r4, #0]
 8003406:	07d2      	lsls	r2, r2, #31
 8003408:	d501      	bpl.n	800340e <_printf_float+0x1ae>
 800340a:	3302      	adds	r3, #2
 800340c:	e7f4      	b.n	80033f8 <_printf_float+0x198>
 800340e:	2301      	movs	r3, #1
 8003410:	e7f2      	b.n	80033f8 <_printf_float+0x198>
 8003412:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003416:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003418:	4299      	cmp	r1, r3
 800341a:	db05      	blt.n	8003428 <_printf_float+0x1c8>
 800341c:	6823      	ldr	r3, [r4, #0]
 800341e:	6121      	str	r1, [r4, #16]
 8003420:	07d8      	lsls	r0, r3, #31
 8003422:	d5ea      	bpl.n	80033fa <_printf_float+0x19a>
 8003424:	1c4b      	adds	r3, r1, #1
 8003426:	e7e7      	b.n	80033f8 <_printf_float+0x198>
 8003428:	2900      	cmp	r1, #0
 800342a:	bfcc      	ite	gt
 800342c:	2201      	movgt	r2, #1
 800342e:	f1c1 0202 	rsble	r2, r1, #2
 8003432:	4413      	add	r3, r2
 8003434:	e7e0      	b.n	80033f8 <_printf_float+0x198>
 8003436:	6823      	ldr	r3, [r4, #0]
 8003438:	055a      	lsls	r2, r3, #21
 800343a:	d407      	bmi.n	800344c <_printf_float+0x1ec>
 800343c:	6923      	ldr	r3, [r4, #16]
 800343e:	4642      	mov	r2, r8
 8003440:	4631      	mov	r1, r6
 8003442:	4628      	mov	r0, r5
 8003444:	47b8      	blx	r7
 8003446:	3001      	adds	r0, #1
 8003448:	d12b      	bne.n	80034a2 <_printf_float+0x242>
 800344a:	e764      	b.n	8003316 <_printf_float+0xb6>
 800344c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003450:	f240 80dd 	bls.w	800360e <_printf_float+0x3ae>
 8003454:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003458:	2200      	movs	r2, #0
 800345a:	2300      	movs	r3, #0
 800345c:	f7fd faa4 	bl	80009a8 <__aeabi_dcmpeq>
 8003460:	2800      	cmp	r0, #0
 8003462:	d033      	beq.n	80034cc <_printf_float+0x26c>
 8003464:	2301      	movs	r3, #1
 8003466:	4631      	mov	r1, r6
 8003468:	4628      	mov	r0, r5
 800346a:	4a35      	ldr	r2, [pc, #212]	; (8003540 <_printf_float+0x2e0>)
 800346c:	47b8      	blx	r7
 800346e:	3001      	adds	r0, #1
 8003470:	f43f af51 	beq.w	8003316 <_printf_float+0xb6>
 8003474:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003478:	429a      	cmp	r2, r3
 800347a:	db02      	blt.n	8003482 <_printf_float+0x222>
 800347c:	6823      	ldr	r3, [r4, #0]
 800347e:	07d8      	lsls	r0, r3, #31
 8003480:	d50f      	bpl.n	80034a2 <_printf_float+0x242>
 8003482:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003486:	4631      	mov	r1, r6
 8003488:	4628      	mov	r0, r5
 800348a:	47b8      	blx	r7
 800348c:	3001      	adds	r0, #1
 800348e:	f43f af42 	beq.w	8003316 <_printf_float+0xb6>
 8003492:	f04f 0800 	mov.w	r8, #0
 8003496:	f104 091a 	add.w	r9, r4, #26
 800349a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800349c:	3b01      	subs	r3, #1
 800349e:	4543      	cmp	r3, r8
 80034a0:	dc09      	bgt.n	80034b6 <_printf_float+0x256>
 80034a2:	6823      	ldr	r3, [r4, #0]
 80034a4:	079b      	lsls	r3, r3, #30
 80034a6:	f100 8104 	bmi.w	80036b2 <_printf_float+0x452>
 80034aa:	68e0      	ldr	r0, [r4, #12]
 80034ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80034ae:	4298      	cmp	r0, r3
 80034b0:	bfb8      	it	lt
 80034b2:	4618      	movlt	r0, r3
 80034b4:	e731      	b.n	800331a <_printf_float+0xba>
 80034b6:	2301      	movs	r3, #1
 80034b8:	464a      	mov	r2, r9
 80034ba:	4631      	mov	r1, r6
 80034bc:	4628      	mov	r0, r5
 80034be:	47b8      	blx	r7
 80034c0:	3001      	adds	r0, #1
 80034c2:	f43f af28 	beq.w	8003316 <_printf_float+0xb6>
 80034c6:	f108 0801 	add.w	r8, r8, #1
 80034ca:	e7e6      	b.n	800349a <_printf_float+0x23a>
 80034cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	dc38      	bgt.n	8003544 <_printf_float+0x2e4>
 80034d2:	2301      	movs	r3, #1
 80034d4:	4631      	mov	r1, r6
 80034d6:	4628      	mov	r0, r5
 80034d8:	4a19      	ldr	r2, [pc, #100]	; (8003540 <_printf_float+0x2e0>)
 80034da:	47b8      	blx	r7
 80034dc:	3001      	adds	r0, #1
 80034de:	f43f af1a 	beq.w	8003316 <_printf_float+0xb6>
 80034e2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80034e6:	4313      	orrs	r3, r2
 80034e8:	d102      	bne.n	80034f0 <_printf_float+0x290>
 80034ea:	6823      	ldr	r3, [r4, #0]
 80034ec:	07d9      	lsls	r1, r3, #31
 80034ee:	d5d8      	bpl.n	80034a2 <_printf_float+0x242>
 80034f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034f4:	4631      	mov	r1, r6
 80034f6:	4628      	mov	r0, r5
 80034f8:	47b8      	blx	r7
 80034fa:	3001      	adds	r0, #1
 80034fc:	f43f af0b 	beq.w	8003316 <_printf_float+0xb6>
 8003500:	f04f 0900 	mov.w	r9, #0
 8003504:	f104 0a1a 	add.w	sl, r4, #26
 8003508:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800350a:	425b      	negs	r3, r3
 800350c:	454b      	cmp	r3, r9
 800350e:	dc01      	bgt.n	8003514 <_printf_float+0x2b4>
 8003510:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003512:	e794      	b.n	800343e <_printf_float+0x1de>
 8003514:	2301      	movs	r3, #1
 8003516:	4652      	mov	r2, sl
 8003518:	4631      	mov	r1, r6
 800351a:	4628      	mov	r0, r5
 800351c:	47b8      	blx	r7
 800351e:	3001      	adds	r0, #1
 8003520:	f43f aef9 	beq.w	8003316 <_printf_float+0xb6>
 8003524:	f109 0901 	add.w	r9, r9, #1
 8003528:	e7ee      	b.n	8003508 <_printf_float+0x2a8>
 800352a:	bf00      	nop
 800352c:	7fefffff 	.word	0x7fefffff
 8003530:	0800791a 	.word	0x0800791a
 8003534:	0800791e 	.word	0x0800791e
 8003538:	08007922 	.word	0x08007922
 800353c:	08007926 	.word	0x08007926
 8003540:	0800792a 	.word	0x0800792a
 8003544:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003546:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003548:	429a      	cmp	r2, r3
 800354a:	bfa8      	it	ge
 800354c:	461a      	movge	r2, r3
 800354e:	2a00      	cmp	r2, #0
 8003550:	4691      	mov	r9, r2
 8003552:	dc37      	bgt.n	80035c4 <_printf_float+0x364>
 8003554:	f04f 0b00 	mov.w	fp, #0
 8003558:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800355c:	f104 021a 	add.w	r2, r4, #26
 8003560:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003564:	ebaa 0309 	sub.w	r3, sl, r9
 8003568:	455b      	cmp	r3, fp
 800356a:	dc33      	bgt.n	80035d4 <_printf_float+0x374>
 800356c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003570:	429a      	cmp	r2, r3
 8003572:	db3b      	blt.n	80035ec <_printf_float+0x38c>
 8003574:	6823      	ldr	r3, [r4, #0]
 8003576:	07da      	lsls	r2, r3, #31
 8003578:	d438      	bmi.n	80035ec <_printf_float+0x38c>
 800357a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800357e:	eba2 0903 	sub.w	r9, r2, r3
 8003582:	eba2 020a 	sub.w	r2, r2, sl
 8003586:	4591      	cmp	r9, r2
 8003588:	bfa8      	it	ge
 800358a:	4691      	movge	r9, r2
 800358c:	f1b9 0f00 	cmp.w	r9, #0
 8003590:	dc34      	bgt.n	80035fc <_printf_float+0x39c>
 8003592:	f04f 0800 	mov.w	r8, #0
 8003596:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800359a:	f104 0a1a 	add.w	sl, r4, #26
 800359e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80035a2:	1a9b      	subs	r3, r3, r2
 80035a4:	eba3 0309 	sub.w	r3, r3, r9
 80035a8:	4543      	cmp	r3, r8
 80035aa:	f77f af7a 	ble.w	80034a2 <_printf_float+0x242>
 80035ae:	2301      	movs	r3, #1
 80035b0:	4652      	mov	r2, sl
 80035b2:	4631      	mov	r1, r6
 80035b4:	4628      	mov	r0, r5
 80035b6:	47b8      	blx	r7
 80035b8:	3001      	adds	r0, #1
 80035ba:	f43f aeac 	beq.w	8003316 <_printf_float+0xb6>
 80035be:	f108 0801 	add.w	r8, r8, #1
 80035c2:	e7ec      	b.n	800359e <_printf_float+0x33e>
 80035c4:	4613      	mov	r3, r2
 80035c6:	4631      	mov	r1, r6
 80035c8:	4642      	mov	r2, r8
 80035ca:	4628      	mov	r0, r5
 80035cc:	47b8      	blx	r7
 80035ce:	3001      	adds	r0, #1
 80035d0:	d1c0      	bne.n	8003554 <_printf_float+0x2f4>
 80035d2:	e6a0      	b.n	8003316 <_printf_float+0xb6>
 80035d4:	2301      	movs	r3, #1
 80035d6:	4631      	mov	r1, r6
 80035d8:	4628      	mov	r0, r5
 80035da:	920b      	str	r2, [sp, #44]	; 0x2c
 80035dc:	47b8      	blx	r7
 80035de:	3001      	adds	r0, #1
 80035e0:	f43f ae99 	beq.w	8003316 <_printf_float+0xb6>
 80035e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80035e6:	f10b 0b01 	add.w	fp, fp, #1
 80035ea:	e7b9      	b.n	8003560 <_printf_float+0x300>
 80035ec:	4631      	mov	r1, r6
 80035ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035f2:	4628      	mov	r0, r5
 80035f4:	47b8      	blx	r7
 80035f6:	3001      	adds	r0, #1
 80035f8:	d1bf      	bne.n	800357a <_printf_float+0x31a>
 80035fa:	e68c      	b.n	8003316 <_printf_float+0xb6>
 80035fc:	464b      	mov	r3, r9
 80035fe:	4631      	mov	r1, r6
 8003600:	4628      	mov	r0, r5
 8003602:	eb08 020a 	add.w	r2, r8, sl
 8003606:	47b8      	blx	r7
 8003608:	3001      	adds	r0, #1
 800360a:	d1c2      	bne.n	8003592 <_printf_float+0x332>
 800360c:	e683      	b.n	8003316 <_printf_float+0xb6>
 800360e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003610:	2a01      	cmp	r2, #1
 8003612:	dc01      	bgt.n	8003618 <_printf_float+0x3b8>
 8003614:	07db      	lsls	r3, r3, #31
 8003616:	d539      	bpl.n	800368c <_printf_float+0x42c>
 8003618:	2301      	movs	r3, #1
 800361a:	4642      	mov	r2, r8
 800361c:	4631      	mov	r1, r6
 800361e:	4628      	mov	r0, r5
 8003620:	47b8      	blx	r7
 8003622:	3001      	adds	r0, #1
 8003624:	f43f ae77 	beq.w	8003316 <_printf_float+0xb6>
 8003628:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800362c:	4631      	mov	r1, r6
 800362e:	4628      	mov	r0, r5
 8003630:	47b8      	blx	r7
 8003632:	3001      	adds	r0, #1
 8003634:	f43f ae6f 	beq.w	8003316 <_printf_float+0xb6>
 8003638:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800363c:	2200      	movs	r2, #0
 800363e:	2300      	movs	r3, #0
 8003640:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8003644:	f7fd f9b0 	bl	80009a8 <__aeabi_dcmpeq>
 8003648:	b9d8      	cbnz	r0, 8003682 <_printf_float+0x422>
 800364a:	f109 33ff 	add.w	r3, r9, #4294967295
 800364e:	f108 0201 	add.w	r2, r8, #1
 8003652:	4631      	mov	r1, r6
 8003654:	4628      	mov	r0, r5
 8003656:	47b8      	blx	r7
 8003658:	3001      	adds	r0, #1
 800365a:	d10e      	bne.n	800367a <_printf_float+0x41a>
 800365c:	e65b      	b.n	8003316 <_printf_float+0xb6>
 800365e:	2301      	movs	r3, #1
 8003660:	464a      	mov	r2, r9
 8003662:	4631      	mov	r1, r6
 8003664:	4628      	mov	r0, r5
 8003666:	47b8      	blx	r7
 8003668:	3001      	adds	r0, #1
 800366a:	f43f ae54 	beq.w	8003316 <_printf_float+0xb6>
 800366e:	f108 0801 	add.w	r8, r8, #1
 8003672:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003674:	3b01      	subs	r3, #1
 8003676:	4543      	cmp	r3, r8
 8003678:	dcf1      	bgt.n	800365e <_printf_float+0x3fe>
 800367a:	4653      	mov	r3, sl
 800367c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003680:	e6de      	b.n	8003440 <_printf_float+0x1e0>
 8003682:	f04f 0800 	mov.w	r8, #0
 8003686:	f104 091a 	add.w	r9, r4, #26
 800368a:	e7f2      	b.n	8003672 <_printf_float+0x412>
 800368c:	2301      	movs	r3, #1
 800368e:	4642      	mov	r2, r8
 8003690:	e7df      	b.n	8003652 <_printf_float+0x3f2>
 8003692:	2301      	movs	r3, #1
 8003694:	464a      	mov	r2, r9
 8003696:	4631      	mov	r1, r6
 8003698:	4628      	mov	r0, r5
 800369a:	47b8      	blx	r7
 800369c:	3001      	adds	r0, #1
 800369e:	f43f ae3a 	beq.w	8003316 <_printf_float+0xb6>
 80036a2:	f108 0801 	add.w	r8, r8, #1
 80036a6:	68e3      	ldr	r3, [r4, #12]
 80036a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80036aa:	1a5b      	subs	r3, r3, r1
 80036ac:	4543      	cmp	r3, r8
 80036ae:	dcf0      	bgt.n	8003692 <_printf_float+0x432>
 80036b0:	e6fb      	b.n	80034aa <_printf_float+0x24a>
 80036b2:	f04f 0800 	mov.w	r8, #0
 80036b6:	f104 0919 	add.w	r9, r4, #25
 80036ba:	e7f4      	b.n	80036a6 <_printf_float+0x446>

080036bc <_printf_common>:
 80036bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036c0:	4616      	mov	r6, r2
 80036c2:	4699      	mov	r9, r3
 80036c4:	688a      	ldr	r2, [r1, #8]
 80036c6:	690b      	ldr	r3, [r1, #16]
 80036c8:	4607      	mov	r7, r0
 80036ca:	4293      	cmp	r3, r2
 80036cc:	bfb8      	it	lt
 80036ce:	4613      	movlt	r3, r2
 80036d0:	6033      	str	r3, [r6, #0]
 80036d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036d6:	460c      	mov	r4, r1
 80036d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036dc:	b10a      	cbz	r2, 80036e2 <_printf_common+0x26>
 80036de:	3301      	adds	r3, #1
 80036e0:	6033      	str	r3, [r6, #0]
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	0699      	lsls	r1, r3, #26
 80036e6:	bf42      	ittt	mi
 80036e8:	6833      	ldrmi	r3, [r6, #0]
 80036ea:	3302      	addmi	r3, #2
 80036ec:	6033      	strmi	r3, [r6, #0]
 80036ee:	6825      	ldr	r5, [r4, #0]
 80036f0:	f015 0506 	ands.w	r5, r5, #6
 80036f4:	d106      	bne.n	8003704 <_printf_common+0x48>
 80036f6:	f104 0a19 	add.w	sl, r4, #25
 80036fa:	68e3      	ldr	r3, [r4, #12]
 80036fc:	6832      	ldr	r2, [r6, #0]
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	42ab      	cmp	r3, r5
 8003702:	dc2b      	bgt.n	800375c <_printf_common+0xa0>
 8003704:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003708:	1e13      	subs	r3, r2, #0
 800370a:	6822      	ldr	r2, [r4, #0]
 800370c:	bf18      	it	ne
 800370e:	2301      	movne	r3, #1
 8003710:	0692      	lsls	r2, r2, #26
 8003712:	d430      	bmi.n	8003776 <_printf_common+0xba>
 8003714:	4649      	mov	r1, r9
 8003716:	4638      	mov	r0, r7
 8003718:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800371c:	47c0      	blx	r8
 800371e:	3001      	adds	r0, #1
 8003720:	d023      	beq.n	800376a <_printf_common+0xae>
 8003722:	6823      	ldr	r3, [r4, #0]
 8003724:	6922      	ldr	r2, [r4, #16]
 8003726:	f003 0306 	and.w	r3, r3, #6
 800372a:	2b04      	cmp	r3, #4
 800372c:	bf14      	ite	ne
 800372e:	2500      	movne	r5, #0
 8003730:	6833      	ldreq	r3, [r6, #0]
 8003732:	f04f 0600 	mov.w	r6, #0
 8003736:	bf08      	it	eq
 8003738:	68e5      	ldreq	r5, [r4, #12]
 800373a:	f104 041a 	add.w	r4, r4, #26
 800373e:	bf08      	it	eq
 8003740:	1aed      	subeq	r5, r5, r3
 8003742:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003746:	bf08      	it	eq
 8003748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800374c:	4293      	cmp	r3, r2
 800374e:	bfc4      	itt	gt
 8003750:	1a9b      	subgt	r3, r3, r2
 8003752:	18ed      	addgt	r5, r5, r3
 8003754:	42b5      	cmp	r5, r6
 8003756:	d11a      	bne.n	800378e <_printf_common+0xd2>
 8003758:	2000      	movs	r0, #0
 800375a:	e008      	b.n	800376e <_printf_common+0xb2>
 800375c:	2301      	movs	r3, #1
 800375e:	4652      	mov	r2, sl
 8003760:	4649      	mov	r1, r9
 8003762:	4638      	mov	r0, r7
 8003764:	47c0      	blx	r8
 8003766:	3001      	adds	r0, #1
 8003768:	d103      	bne.n	8003772 <_printf_common+0xb6>
 800376a:	f04f 30ff 	mov.w	r0, #4294967295
 800376e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003772:	3501      	adds	r5, #1
 8003774:	e7c1      	b.n	80036fa <_printf_common+0x3e>
 8003776:	2030      	movs	r0, #48	; 0x30
 8003778:	18e1      	adds	r1, r4, r3
 800377a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003784:	4422      	add	r2, r4
 8003786:	3302      	adds	r3, #2
 8003788:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800378c:	e7c2      	b.n	8003714 <_printf_common+0x58>
 800378e:	2301      	movs	r3, #1
 8003790:	4622      	mov	r2, r4
 8003792:	4649      	mov	r1, r9
 8003794:	4638      	mov	r0, r7
 8003796:	47c0      	blx	r8
 8003798:	3001      	adds	r0, #1
 800379a:	d0e6      	beq.n	800376a <_printf_common+0xae>
 800379c:	3601      	adds	r6, #1
 800379e:	e7d9      	b.n	8003754 <_printf_common+0x98>

080037a0 <_printf_i>:
 80037a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037a4:	7e0f      	ldrb	r7, [r1, #24]
 80037a6:	4691      	mov	r9, r2
 80037a8:	2f78      	cmp	r7, #120	; 0x78
 80037aa:	4680      	mov	r8, r0
 80037ac:	460c      	mov	r4, r1
 80037ae:	469a      	mov	sl, r3
 80037b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80037b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80037b6:	d807      	bhi.n	80037c8 <_printf_i+0x28>
 80037b8:	2f62      	cmp	r7, #98	; 0x62
 80037ba:	d80a      	bhi.n	80037d2 <_printf_i+0x32>
 80037bc:	2f00      	cmp	r7, #0
 80037be:	f000 80d5 	beq.w	800396c <_printf_i+0x1cc>
 80037c2:	2f58      	cmp	r7, #88	; 0x58
 80037c4:	f000 80c1 	beq.w	800394a <_printf_i+0x1aa>
 80037c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80037d0:	e03a      	b.n	8003848 <_printf_i+0xa8>
 80037d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80037d6:	2b15      	cmp	r3, #21
 80037d8:	d8f6      	bhi.n	80037c8 <_printf_i+0x28>
 80037da:	a101      	add	r1, pc, #4	; (adr r1, 80037e0 <_printf_i+0x40>)
 80037dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037e0:	08003839 	.word	0x08003839
 80037e4:	0800384d 	.word	0x0800384d
 80037e8:	080037c9 	.word	0x080037c9
 80037ec:	080037c9 	.word	0x080037c9
 80037f0:	080037c9 	.word	0x080037c9
 80037f4:	080037c9 	.word	0x080037c9
 80037f8:	0800384d 	.word	0x0800384d
 80037fc:	080037c9 	.word	0x080037c9
 8003800:	080037c9 	.word	0x080037c9
 8003804:	080037c9 	.word	0x080037c9
 8003808:	080037c9 	.word	0x080037c9
 800380c:	08003953 	.word	0x08003953
 8003810:	08003879 	.word	0x08003879
 8003814:	0800390d 	.word	0x0800390d
 8003818:	080037c9 	.word	0x080037c9
 800381c:	080037c9 	.word	0x080037c9
 8003820:	08003975 	.word	0x08003975
 8003824:	080037c9 	.word	0x080037c9
 8003828:	08003879 	.word	0x08003879
 800382c:	080037c9 	.word	0x080037c9
 8003830:	080037c9 	.word	0x080037c9
 8003834:	08003915 	.word	0x08003915
 8003838:	682b      	ldr	r3, [r5, #0]
 800383a:	1d1a      	adds	r2, r3, #4
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	602a      	str	r2, [r5, #0]
 8003840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003844:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003848:	2301      	movs	r3, #1
 800384a:	e0a0      	b.n	800398e <_printf_i+0x1ee>
 800384c:	6820      	ldr	r0, [r4, #0]
 800384e:	682b      	ldr	r3, [r5, #0]
 8003850:	0607      	lsls	r7, r0, #24
 8003852:	f103 0104 	add.w	r1, r3, #4
 8003856:	6029      	str	r1, [r5, #0]
 8003858:	d501      	bpl.n	800385e <_printf_i+0xbe>
 800385a:	681e      	ldr	r6, [r3, #0]
 800385c:	e003      	b.n	8003866 <_printf_i+0xc6>
 800385e:	0646      	lsls	r6, r0, #25
 8003860:	d5fb      	bpl.n	800385a <_printf_i+0xba>
 8003862:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003866:	2e00      	cmp	r6, #0
 8003868:	da03      	bge.n	8003872 <_printf_i+0xd2>
 800386a:	232d      	movs	r3, #45	; 0x2d
 800386c:	4276      	negs	r6, r6
 800386e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003872:	230a      	movs	r3, #10
 8003874:	4859      	ldr	r0, [pc, #356]	; (80039dc <_printf_i+0x23c>)
 8003876:	e012      	b.n	800389e <_printf_i+0xfe>
 8003878:	682b      	ldr	r3, [r5, #0]
 800387a:	6820      	ldr	r0, [r4, #0]
 800387c:	1d19      	adds	r1, r3, #4
 800387e:	6029      	str	r1, [r5, #0]
 8003880:	0605      	lsls	r5, r0, #24
 8003882:	d501      	bpl.n	8003888 <_printf_i+0xe8>
 8003884:	681e      	ldr	r6, [r3, #0]
 8003886:	e002      	b.n	800388e <_printf_i+0xee>
 8003888:	0641      	lsls	r1, r0, #25
 800388a:	d5fb      	bpl.n	8003884 <_printf_i+0xe4>
 800388c:	881e      	ldrh	r6, [r3, #0]
 800388e:	2f6f      	cmp	r7, #111	; 0x6f
 8003890:	bf0c      	ite	eq
 8003892:	2308      	moveq	r3, #8
 8003894:	230a      	movne	r3, #10
 8003896:	4851      	ldr	r0, [pc, #324]	; (80039dc <_printf_i+0x23c>)
 8003898:	2100      	movs	r1, #0
 800389a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800389e:	6865      	ldr	r5, [r4, #4]
 80038a0:	2d00      	cmp	r5, #0
 80038a2:	bfa8      	it	ge
 80038a4:	6821      	ldrge	r1, [r4, #0]
 80038a6:	60a5      	str	r5, [r4, #8]
 80038a8:	bfa4      	itt	ge
 80038aa:	f021 0104 	bicge.w	r1, r1, #4
 80038ae:	6021      	strge	r1, [r4, #0]
 80038b0:	b90e      	cbnz	r6, 80038b6 <_printf_i+0x116>
 80038b2:	2d00      	cmp	r5, #0
 80038b4:	d04b      	beq.n	800394e <_printf_i+0x1ae>
 80038b6:	4615      	mov	r5, r2
 80038b8:	fbb6 f1f3 	udiv	r1, r6, r3
 80038bc:	fb03 6711 	mls	r7, r3, r1, r6
 80038c0:	5dc7      	ldrb	r7, [r0, r7]
 80038c2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80038c6:	4637      	mov	r7, r6
 80038c8:	42bb      	cmp	r3, r7
 80038ca:	460e      	mov	r6, r1
 80038cc:	d9f4      	bls.n	80038b8 <_printf_i+0x118>
 80038ce:	2b08      	cmp	r3, #8
 80038d0:	d10b      	bne.n	80038ea <_printf_i+0x14a>
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	07de      	lsls	r6, r3, #31
 80038d6:	d508      	bpl.n	80038ea <_printf_i+0x14a>
 80038d8:	6923      	ldr	r3, [r4, #16]
 80038da:	6861      	ldr	r1, [r4, #4]
 80038dc:	4299      	cmp	r1, r3
 80038de:	bfde      	ittt	le
 80038e0:	2330      	movle	r3, #48	; 0x30
 80038e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038ea:	1b52      	subs	r2, r2, r5
 80038ec:	6122      	str	r2, [r4, #16]
 80038ee:	464b      	mov	r3, r9
 80038f0:	4621      	mov	r1, r4
 80038f2:	4640      	mov	r0, r8
 80038f4:	f8cd a000 	str.w	sl, [sp]
 80038f8:	aa03      	add	r2, sp, #12
 80038fa:	f7ff fedf 	bl	80036bc <_printf_common>
 80038fe:	3001      	adds	r0, #1
 8003900:	d14a      	bne.n	8003998 <_printf_i+0x1f8>
 8003902:	f04f 30ff 	mov.w	r0, #4294967295
 8003906:	b004      	add	sp, #16
 8003908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800390c:	6823      	ldr	r3, [r4, #0]
 800390e:	f043 0320 	orr.w	r3, r3, #32
 8003912:	6023      	str	r3, [r4, #0]
 8003914:	2778      	movs	r7, #120	; 0x78
 8003916:	4832      	ldr	r0, [pc, #200]	; (80039e0 <_printf_i+0x240>)
 8003918:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800391c:	6823      	ldr	r3, [r4, #0]
 800391e:	6829      	ldr	r1, [r5, #0]
 8003920:	061f      	lsls	r7, r3, #24
 8003922:	f851 6b04 	ldr.w	r6, [r1], #4
 8003926:	d402      	bmi.n	800392e <_printf_i+0x18e>
 8003928:	065f      	lsls	r7, r3, #25
 800392a:	bf48      	it	mi
 800392c:	b2b6      	uxthmi	r6, r6
 800392e:	07df      	lsls	r7, r3, #31
 8003930:	bf48      	it	mi
 8003932:	f043 0320 	orrmi.w	r3, r3, #32
 8003936:	6029      	str	r1, [r5, #0]
 8003938:	bf48      	it	mi
 800393a:	6023      	strmi	r3, [r4, #0]
 800393c:	b91e      	cbnz	r6, 8003946 <_printf_i+0x1a6>
 800393e:	6823      	ldr	r3, [r4, #0]
 8003940:	f023 0320 	bic.w	r3, r3, #32
 8003944:	6023      	str	r3, [r4, #0]
 8003946:	2310      	movs	r3, #16
 8003948:	e7a6      	b.n	8003898 <_printf_i+0xf8>
 800394a:	4824      	ldr	r0, [pc, #144]	; (80039dc <_printf_i+0x23c>)
 800394c:	e7e4      	b.n	8003918 <_printf_i+0x178>
 800394e:	4615      	mov	r5, r2
 8003950:	e7bd      	b.n	80038ce <_printf_i+0x12e>
 8003952:	682b      	ldr	r3, [r5, #0]
 8003954:	6826      	ldr	r6, [r4, #0]
 8003956:	1d18      	adds	r0, r3, #4
 8003958:	6961      	ldr	r1, [r4, #20]
 800395a:	6028      	str	r0, [r5, #0]
 800395c:	0635      	lsls	r5, r6, #24
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	d501      	bpl.n	8003966 <_printf_i+0x1c6>
 8003962:	6019      	str	r1, [r3, #0]
 8003964:	e002      	b.n	800396c <_printf_i+0x1cc>
 8003966:	0670      	lsls	r0, r6, #25
 8003968:	d5fb      	bpl.n	8003962 <_printf_i+0x1c2>
 800396a:	8019      	strh	r1, [r3, #0]
 800396c:	2300      	movs	r3, #0
 800396e:	4615      	mov	r5, r2
 8003970:	6123      	str	r3, [r4, #16]
 8003972:	e7bc      	b.n	80038ee <_printf_i+0x14e>
 8003974:	682b      	ldr	r3, [r5, #0]
 8003976:	2100      	movs	r1, #0
 8003978:	1d1a      	adds	r2, r3, #4
 800397a:	602a      	str	r2, [r5, #0]
 800397c:	681d      	ldr	r5, [r3, #0]
 800397e:	6862      	ldr	r2, [r4, #4]
 8003980:	4628      	mov	r0, r5
 8003982:	f000 fbf4 	bl	800416e <memchr>
 8003986:	b108      	cbz	r0, 800398c <_printf_i+0x1ec>
 8003988:	1b40      	subs	r0, r0, r5
 800398a:	6060      	str	r0, [r4, #4]
 800398c:	6863      	ldr	r3, [r4, #4]
 800398e:	6123      	str	r3, [r4, #16]
 8003990:	2300      	movs	r3, #0
 8003992:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003996:	e7aa      	b.n	80038ee <_printf_i+0x14e>
 8003998:	462a      	mov	r2, r5
 800399a:	4649      	mov	r1, r9
 800399c:	4640      	mov	r0, r8
 800399e:	6923      	ldr	r3, [r4, #16]
 80039a0:	47d0      	blx	sl
 80039a2:	3001      	adds	r0, #1
 80039a4:	d0ad      	beq.n	8003902 <_printf_i+0x162>
 80039a6:	6823      	ldr	r3, [r4, #0]
 80039a8:	079b      	lsls	r3, r3, #30
 80039aa:	d413      	bmi.n	80039d4 <_printf_i+0x234>
 80039ac:	68e0      	ldr	r0, [r4, #12]
 80039ae:	9b03      	ldr	r3, [sp, #12]
 80039b0:	4298      	cmp	r0, r3
 80039b2:	bfb8      	it	lt
 80039b4:	4618      	movlt	r0, r3
 80039b6:	e7a6      	b.n	8003906 <_printf_i+0x166>
 80039b8:	2301      	movs	r3, #1
 80039ba:	4632      	mov	r2, r6
 80039bc:	4649      	mov	r1, r9
 80039be:	4640      	mov	r0, r8
 80039c0:	47d0      	blx	sl
 80039c2:	3001      	adds	r0, #1
 80039c4:	d09d      	beq.n	8003902 <_printf_i+0x162>
 80039c6:	3501      	adds	r5, #1
 80039c8:	68e3      	ldr	r3, [r4, #12]
 80039ca:	9903      	ldr	r1, [sp, #12]
 80039cc:	1a5b      	subs	r3, r3, r1
 80039ce:	42ab      	cmp	r3, r5
 80039d0:	dcf2      	bgt.n	80039b8 <_printf_i+0x218>
 80039d2:	e7eb      	b.n	80039ac <_printf_i+0x20c>
 80039d4:	2500      	movs	r5, #0
 80039d6:	f104 0619 	add.w	r6, r4, #25
 80039da:	e7f5      	b.n	80039c8 <_printf_i+0x228>
 80039dc:	0800792c 	.word	0x0800792c
 80039e0:	0800793d 	.word	0x0800793d

080039e4 <_scanf_float>:
 80039e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039e8:	b087      	sub	sp, #28
 80039ea:	9303      	str	r3, [sp, #12]
 80039ec:	688b      	ldr	r3, [r1, #8]
 80039ee:	4617      	mov	r7, r2
 80039f0:	1e5a      	subs	r2, r3, #1
 80039f2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80039f6:	bf85      	ittet	hi
 80039f8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80039fc:	195b      	addhi	r3, r3, r5
 80039fe:	2300      	movls	r3, #0
 8003a00:	9302      	strhi	r3, [sp, #8]
 8003a02:	bf88      	it	hi
 8003a04:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003a08:	468b      	mov	fp, r1
 8003a0a:	f04f 0500 	mov.w	r5, #0
 8003a0e:	bf8c      	ite	hi
 8003a10:	608b      	strhi	r3, [r1, #8]
 8003a12:	9302      	strls	r3, [sp, #8]
 8003a14:	680b      	ldr	r3, [r1, #0]
 8003a16:	4680      	mov	r8, r0
 8003a18:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003a1c:	f84b 3b1c 	str.w	r3, [fp], #28
 8003a20:	460c      	mov	r4, r1
 8003a22:	465e      	mov	r6, fp
 8003a24:	46aa      	mov	sl, r5
 8003a26:	46a9      	mov	r9, r5
 8003a28:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003a2c:	9501      	str	r5, [sp, #4]
 8003a2e:	68a2      	ldr	r2, [r4, #8]
 8003a30:	b152      	cbz	r2, 8003a48 <_scanf_float+0x64>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2b4e      	cmp	r3, #78	; 0x4e
 8003a38:	d864      	bhi.n	8003b04 <_scanf_float+0x120>
 8003a3a:	2b40      	cmp	r3, #64	; 0x40
 8003a3c:	d83c      	bhi.n	8003ab8 <_scanf_float+0xd4>
 8003a3e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003a42:	b2c8      	uxtb	r0, r1
 8003a44:	280e      	cmp	r0, #14
 8003a46:	d93a      	bls.n	8003abe <_scanf_float+0xda>
 8003a48:	f1b9 0f00 	cmp.w	r9, #0
 8003a4c:	d003      	beq.n	8003a56 <_scanf_float+0x72>
 8003a4e:	6823      	ldr	r3, [r4, #0]
 8003a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a54:	6023      	str	r3, [r4, #0]
 8003a56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003a5a:	f1ba 0f01 	cmp.w	sl, #1
 8003a5e:	f200 8113 	bhi.w	8003c88 <_scanf_float+0x2a4>
 8003a62:	455e      	cmp	r6, fp
 8003a64:	f200 8105 	bhi.w	8003c72 <_scanf_float+0x28e>
 8003a68:	2501      	movs	r5, #1
 8003a6a:	4628      	mov	r0, r5
 8003a6c:	b007      	add	sp, #28
 8003a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a72:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003a76:	2a0d      	cmp	r2, #13
 8003a78:	d8e6      	bhi.n	8003a48 <_scanf_float+0x64>
 8003a7a:	a101      	add	r1, pc, #4	; (adr r1, 8003a80 <_scanf_float+0x9c>)
 8003a7c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003a80:	08003bbf 	.word	0x08003bbf
 8003a84:	08003a49 	.word	0x08003a49
 8003a88:	08003a49 	.word	0x08003a49
 8003a8c:	08003a49 	.word	0x08003a49
 8003a90:	08003c1f 	.word	0x08003c1f
 8003a94:	08003bf7 	.word	0x08003bf7
 8003a98:	08003a49 	.word	0x08003a49
 8003a9c:	08003a49 	.word	0x08003a49
 8003aa0:	08003bcd 	.word	0x08003bcd
 8003aa4:	08003a49 	.word	0x08003a49
 8003aa8:	08003a49 	.word	0x08003a49
 8003aac:	08003a49 	.word	0x08003a49
 8003ab0:	08003a49 	.word	0x08003a49
 8003ab4:	08003b85 	.word	0x08003b85
 8003ab8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003abc:	e7db      	b.n	8003a76 <_scanf_float+0x92>
 8003abe:	290e      	cmp	r1, #14
 8003ac0:	d8c2      	bhi.n	8003a48 <_scanf_float+0x64>
 8003ac2:	a001      	add	r0, pc, #4	; (adr r0, 8003ac8 <_scanf_float+0xe4>)
 8003ac4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003ac8:	08003b77 	.word	0x08003b77
 8003acc:	08003a49 	.word	0x08003a49
 8003ad0:	08003b77 	.word	0x08003b77
 8003ad4:	08003c0b 	.word	0x08003c0b
 8003ad8:	08003a49 	.word	0x08003a49
 8003adc:	08003b25 	.word	0x08003b25
 8003ae0:	08003b61 	.word	0x08003b61
 8003ae4:	08003b61 	.word	0x08003b61
 8003ae8:	08003b61 	.word	0x08003b61
 8003aec:	08003b61 	.word	0x08003b61
 8003af0:	08003b61 	.word	0x08003b61
 8003af4:	08003b61 	.word	0x08003b61
 8003af8:	08003b61 	.word	0x08003b61
 8003afc:	08003b61 	.word	0x08003b61
 8003b00:	08003b61 	.word	0x08003b61
 8003b04:	2b6e      	cmp	r3, #110	; 0x6e
 8003b06:	d809      	bhi.n	8003b1c <_scanf_float+0x138>
 8003b08:	2b60      	cmp	r3, #96	; 0x60
 8003b0a:	d8b2      	bhi.n	8003a72 <_scanf_float+0x8e>
 8003b0c:	2b54      	cmp	r3, #84	; 0x54
 8003b0e:	d077      	beq.n	8003c00 <_scanf_float+0x21c>
 8003b10:	2b59      	cmp	r3, #89	; 0x59
 8003b12:	d199      	bne.n	8003a48 <_scanf_float+0x64>
 8003b14:	2d07      	cmp	r5, #7
 8003b16:	d197      	bne.n	8003a48 <_scanf_float+0x64>
 8003b18:	2508      	movs	r5, #8
 8003b1a:	e029      	b.n	8003b70 <_scanf_float+0x18c>
 8003b1c:	2b74      	cmp	r3, #116	; 0x74
 8003b1e:	d06f      	beq.n	8003c00 <_scanf_float+0x21c>
 8003b20:	2b79      	cmp	r3, #121	; 0x79
 8003b22:	e7f6      	b.n	8003b12 <_scanf_float+0x12e>
 8003b24:	6821      	ldr	r1, [r4, #0]
 8003b26:	05c8      	lsls	r0, r1, #23
 8003b28:	d51a      	bpl.n	8003b60 <_scanf_float+0x17c>
 8003b2a:	9b02      	ldr	r3, [sp, #8]
 8003b2c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003b30:	6021      	str	r1, [r4, #0]
 8003b32:	f109 0901 	add.w	r9, r9, #1
 8003b36:	b11b      	cbz	r3, 8003b40 <_scanf_float+0x15c>
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	3201      	adds	r2, #1
 8003b3c:	9302      	str	r3, [sp, #8]
 8003b3e:	60a2      	str	r2, [r4, #8]
 8003b40:	68a3      	ldr	r3, [r4, #8]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	60a3      	str	r3, [r4, #8]
 8003b46:	6923      	ldr	r3, [r4, #16]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	6123      	str	r3, [r4, #16]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	607b      	str	r3, [r7, #4]
 8003b54:	f340 8084 	ble.w	8003c60 <_scanf_float+0x27c>
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	603b      	str	r3, [r7, #0]
 8003b5e:	e766      	b.n	8003a2e <_scanf_float+0x4a>
 8003b60:	eb1a 0f05 	cmn.w	sl, r5
 8003b64:	f47f af70 	bne.w	8003a48 <_scanf_float+0x64>
 8003b68:	6822      	ldr	r2, [r4, #0]
 8003b6a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003b6e:	6022      	str	r2, [r4, #0]
 8003b70:	f806 3b01 	strb.w	r3, [r6], #1
 8003b74:	e7e4      	b.n	8003b40 <_scanf_float+0x15c>
 8003b76:	6822      	ldr	r2, [r4, #0]
 8003b78:	0610      	lsls	r0, r2, #24
 8003b7a:	f57f af65 	bpl.w	8003a48 <_scanf_float+0x64>
 8003b7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b82:	e7f4      	b.n	8003b6e <_scanf_float+0x18a>
 8003b84:	f1ba 0f00 	cmp.w	sl, #0
 8003b88:	d10e      	bne.n	8003ba8 <_scanf_float+0x1c4>
 8003b8a:	f1b9 0f00 	cmp.w	r9, #0
 8003b8e:	d10e      	bne.n	8003bae <_scanf_float+0x1ca>
 8003b90:	6822      	ldr	r2, [r4, #0]
 8003b92:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003b96:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003b9a:	d108      	bne.n	8003bae <_scanf_float+0x1ca>
 8003b9c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003ba0:	f04f 0a01 	mov.w	sl, #1
 8003ba4:	6022      	str	r2, [r4, #0]
 8003ba6:	e7e3      	b.n	8003b70 <_scanf_float+0x18c>
 8003ba8:	f1ba 0f02 	cmp.w	sl, #2
 8003bac:	d055      	beq.n	8003c5a <_scanf_float+0x276>
 8003bae:	2d01      	cmp	r5, #1
 8003bb0:	d002      	beq.n	8003bb8 <_scanf_float+0x1d4>
 8003bb2:	2d04      	cmp	r5, #4
 8003bb4:	f47f af48 	bne.w	8003a48 <_scanf_float+0x64>
 8003bb8:	3501      	adds	r5, #1
 8003bba:	b2ed      	uxtb	r5, r5
 8003bbc:	e7d8      	b.n	8003b70 <_scanf_float+0x18c>
 8003bbe:	f1ba 0f01 	cmp.w	sl, #1
 8003bc2:	f47f af41 	bne.w	8003a48 <_scanf_float+0x64>
 8003bc6:	f04f 0a02 	mov.w	sl, #2
 8003bca:	e7d1      	b.n	8003b70 <_scanf_float+0x18c>
 8003bcc:	b97d      	cbnz	r5, 8003bee <_scanf_float+0x20a>
 8003bce:	f1b9 0f00 	cmp.w	r9, #0
 8003bd2:	f47f af3c 	bne.w	8003a4e <_scanf_float+0x6a>
 8003bd6:	6822      	ldr	r2, [r4, #0]
 8003bd8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003bdc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003be0:	f47f af39 	bne.w	8003a56 <_scanf_float+0x72>
 8003be4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003be8:	2501      	movs	r5, #1
 8003bea:	6022      	str	r2, [r4, #0]
 8003bec:	e7c0      	b.n	8003b70 <_scanf_float+0x18c>
 8003bee:	2d03      	cmp	r5, #3
 8003bf0:	d0e2      	beq.n	8003bb8 <_scanf_float+0x1d4>
 8003bf2:	2d05      	cmp	r5, #5
 8003bf4:	e7de      	b.n	8003bb4 <_scanf_float+0x1d0>
 8003bf6:	2d02      	cmp	r5, #2
 8003bf8:	f47f af26 	bne.w	8003a48 <_scanf_float+0x64>
 8003bfc:	2503      	movs	r5, #3
 8003bfe:	e7b7      	b.n	8003b70 <_scanf_float+0x18c>
 8003c00:	2d06      	cmp	r5, #6
 8003c02:	f47f af21 	bne.w	8003a48 <_scanf_float+0x64>
 8003c06:	2507      	movs	r5, #7
 8003c08:	e7b2      	b.n	8003b70 <_scanf_float+0x18c>
 8003c0a:	6822      	ldr	r2, [r4, #0]
 8003c0c:	0591      	lsls	r1, r2, #22
 8003c0e:	f57f af1b 	bpl.w	8003a48 <_scanf_float+0x64>
 8003c12:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003c16:	6022      	str	r2, [r4, #0]
 8003c18:	f8cd 9004 	str.w	r9, [sp, #4]
 8003c1c:	e7a8      	b.n	8003b70 <_scanf_float+0x18c>
 8003c1e:	6822      	ldr	r2, [r4, #0]
 8003c20:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003c24:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003c28:	d006      	beq.n	8003c38 <_scanf_float+0x254>
 8003c2a:	0550      	lsls	r0, r2, #21
 8003c2c:	f57f af0c 	bpl.w	8003a48 <_scanf_float+0x64>
 8003c30:	f1b9 0f00 	cmp.w	r9, #0
 8003c34:	f43f af0f 	beq.w	8003a56 <_scanf_float+0x72>
 8003c38:	0591      	lsls	r1, r2, #22
 8003c3a:	bf58      	it	pl
 8003c3c:	9901      	ldrpl	r1, [sp, #4]
 8003c3e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003c42:	bf58      	it	pl
 8003c44:	eba9 0101 	subpl.w	r1, r9, r1
 8003c48:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003c4c:	f04f 0900 	mov.w	r9, #0
 8003c50:	bf58      	it	pl
 8003c52:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003c56:	6022      	str	r2, [r4, #0]
 8003c58:	e78a      	b.n	8003b70 <_scanf_float+0x18c>
 8003c5a:	f04f 0a03 	mov.w	sl, #3
 8003c5e:	e787      	b.n	8003b70 <_scanf_float+0x18c>
 8003c60:	4639      	mov	r1, r7
 8003c62:	4640      	mov	r0, r8
 8003c64:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003c68:	4798      	blx	r3
 8003c6a:	2800      	cmp	r0, #0
 8003c6c:	f43f aedf 	beq.w	8003a2e <_scanf_float+0x4a>
 8003c70:	e6ea      	b.n	8003a48 <_scanf_float+0x64>
 8003c72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c76:	463a      	mov	r2, r7
 8003c78:	4640      	mov	r0, r8
 8003c7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003c7e:	4798      	blx	r3
 8003c80:	6923      	ldr	r3, [r4, #16]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	6123      	str	r3, [r4, #16]
 8003c86:	e6ec      	b.n	8003a62 <_scanf_float+0x7e>
 8003c88:	1e6b      	subs	r3, r5, #1
 8003c8a:	2b06      	cmp	r3, #6
 8003c8c:	d825      	bhi.n	8003cda <_scanf_float+0x2f6>
 8003c8e:	2d02      	cmp	r5, #2
 8003c90:	d836      	bhi.n	8003d00 <_scanf_float+0x31c>
 8003c92:	455e      	cmp	r6, fp
 8003c94:	f67f aee8 	bls.w	8003a68 <_scanf_float+0x84>
 8003c98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c9c:	463a      	mov	r2, r7
 8003c9e:	4640      	mov	r0, r8
 8003ca0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003ca4:	4798      	blx	r3
 8003ca6:	6923      	ldr	r3, [r4, #16]
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	6123      	str	r3, [r4, #16]
 8003cac:	e7f1      	b.n	8003c92 <_scanf_float+0x2ae>
 8003cae:	9802      	ldr	r0, [sp, #8]
 8003cb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003cb4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003cb8:	463a      	mov	r2, r7
 8003cba:	9002      	str	r0, [sp, #8]
 8003cbc:	4640      	mov	r0, r8
 8003cbe:	4798      	blx	r3
 8003cc0:	6923      	ldr	r3, [r4, #16]
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	6123      	str	r3, [r4, #16]
 8003cc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003cca:	fa5f fa8a 	uxtb.w	sl, sl
 8003cce:	f1ba 0f02 	cmp.w	sl, #2
 8003cd2:	d1ec      	bne.n	8003cae <_scanf_float+0x2ca>
 8003cd4:	3d03      	subs	r5, #3
 8003cd6:	b2ed      	uxtb	r5, r5
 8003cd8:	1b76      	subs	r6, r6, r5
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	05da      	lsls	r2, r3, #23
 8003cde:	d52f      	bpl.n	8003d40 <_scanf_float+0x35c>
 8003ce0:	055b      	lsls	r3, r3, #21
 8003ce2:	d510      	bpl.n	8003d06 <_scanf_float+0x322>
 8003ce4:	455e      	cmp	r6, fp
 8003ce6:	f67f aebf 	bls.w	8003a68 <_scanf_float+0x84>
 8003cea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003cee:	463a      	mov	r2, r7
 8003cf0:	4640      	mov	r0, r8
 8003cf2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003cf6:	4798      	blx	r3
 8003cf8:	6923      	ldr	r3, [r4, #16]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	6123      	str	r3, [r4, #16]
 8003cfe:	e7f1      	b.n	8003ce4 <_scanf_float+0x300>
 8003d00:	46aa      	mov	sl, r5
 8003d02:	9602      	str	r6, [sp, #8]
 8003d04:	e7df      	b.n	8003cc6 <_scanf_float+0x2e2>
 8003d06:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003d0a:	6923      	ldr	r3, [r4, #16]
 8003d0c:	2965      	cmp	r1, #101	; 0x65
 8003d0e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003d12:	f106 35ff 	add.w	r5, r6, #4294967295
 8003d16:	6123      	str	r3, [r4, #16]
 8003d18:	d00c      	beq.n	8003d34 <_scanf_float+0x350>
 8003d1a:	2945      	cmp	r1, #69	; 0x45
 8003d1c:	d00a      	beq.n	8003d34 <_scanf_float+0x350>
 8003d1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d22:	463a      	mov	r2, r7
 8003d24:	4640      	mov	r0, r8
 8003d26:	4798      	blx	r3
 8003d28:	6923      	ldr	r3, [r4, #16]
 8003d2a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	1eb5      	subs	r5, r6, #2
 8003d32:	6123      	str	r3, [r4, #16]
 8003d34:	463a      	mov	r2, r7
 8003d36:	4640      	mov	r0, r8
 8003d38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d3c:	4798      	blx	r3
 8003d3e:	462e      	mov	r6, r5
 8003d40:	6825      	ldr	r5, [r4, #0]
 8003d42:	f015 0510 	ands.w	r5, r5, #16
 8003d46:	d155      	bne.n	8003df4 <_scanf_float+0x410>
 8003d48:	7035      	strb	r5, [r6, #0]
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d54:	d11d      	bne.n	8003d92 <_scanf_float+0x3ae>
 8003d56:	9b01      	ldr	r3, [sp, #4]
 8003d58:	454b      	cmp	r3, r9
 8003d5a:	eba3 0209 	sub.w	r2, r3, r9
 8003d5e:	d125      	bne.n	8003dac <_scanf_float+0x3c8>
 8003d60:	2200      	movs	r2, #0
 8003d62:	4659      	mov	r1, fp
 8003d64:	4640      	mov	r0, r8
 8003d66:	f002 fc33 	bl	80065d0 <_strtod_r>
 8003d6a:	9b03      	ldr	r3, [sp, #12]
 8003d6c:	f8d4 c000 	ldr.w	ip, [r4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f01c 0f02 	tst.w	ip, #2
 8003d76:	4606      	mov	r6, r0
 8003d78:	460f      	mov	r7, r1
 8003d7a:	f103 0204 	add.w	r2, r3, #4
 8003d7e:	d020      	beq.n	8003dc2 <_scanf_float+0x3de>
 8003d80:	9903      	ldr	r1, [sp, #12]
 8003d82:	600a      	str	r2, [r1, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	e9c3 6700 	strd	r6, r7, [r3]
 8003d8a:	68e3      	ldr	r3, [r4, #12]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	60e3      	str	r3, [r4, #12]
 8003d90:	e66b      	b.n	8003a6a <_scanf_float+0x86>
 8003d92:	9b04      	ldr	r3, [sp, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0e3      	beq.n	8003d60 <_scanf_float+0x37c>
 8003d98:	9905      	ldr	r1, [sp, #20]
 8003d9a:	230a      	movs	r3, #10
 8003d9c:	462a      	mov	r2, r5
 8003d9e:	4640      	mov	r0, r8
 8003da0:	3101      	adds	r1, #1
 8003da2:	f002 fc99 	bl	80066d8 <_strtol_r>
 8003da6:	9b04      	ldr	r3, [sp, #16]
 8003da8:	9e05      	ldr	r6, [sp, #20]
 8003daa:	1ac2      	subs	r2, r0, r3
 8003dac:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003db0:	429e      	cmp	r6, r3
 8003db2:	bf28      	it	cs
 8003db4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003db8:	4630      	mov	r0, r6
 8003dba:	490f      	ldr	r1, [pc, #60]	; (8003df8 <_scanf_float+0x414>)
 8003dbc:	f000 f8f4 	bl	8003fa8 <siprintf>
 8003dc0:	e7ce      	b.n	8003d60 <_scanf_float+0x37c>
 8003dc2:	f01c 0f04 	tst.w	ip, #4
 8003dc6:	d1db      	bne.n	8003d80 <_scanf_float+0x39c>
 8003dc8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003dcc:	f8cc 2000 	str.w	r2, [ip]
 8003dd0:	f8d3 8000 	ldr.w	r8, [r3]
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	f7fc fe18 	bl	8000a0c <__aeabi_dcmpun>
 8003ddc:	b128      	cbz	r0, 8003dea <_scanf_float+0x406>
 8003dde:	4807      	ldr	r0, [pc, #28]	; (8003dfc <_scanf_float+0x418>)
 8003de0:	f000 f9d4 	bl	800418c <nanf>
 8003de4:	f8c8 0000 	str.w	r0, [r8]
 8003de8:	e7cf      	b.n	8003d8a <_scanf_float+0x3a6>
 8003dea:	4630      	mov	r0, r6
 8003dec:	4639      	mov	r1, r7
 8003dee:	f7fc fe6b 	bl	8000ac8 <__aeabi_d2f>
 8003df2:	e7f7      	b.n	8003de4 <_scanf_float+0x400>
 8003df4:	2500      	movs	r5, #0
 8003df6:	e638      	b.n	8003a6a <_scanf_float+0x86>
 8003df8:	0800794e 	.word	0x0800794e
 8003dfc:	08007ce5 	.word	0x08007ce5

08003e00 <std>:
 8003e00:	2300      	movs	r3, #0
 8003e02:	b510      	push	{r4, lr}
 8003e04:	4604      	mov	r4, r0
 8003e06:	e9c0 3300 	strd	r3, r3, [r0]
 8003e0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e0e:	6083      	str	r3, [r0, #8]
 8003e10:	8181      	strh	r1, [r0, #12]
 8003e12:	6643      	str	r3, [r0, #100]	; 0x64
 8003e14:	81c2      	strh	r2, [r0, #14]
 8003e16:	6183      	str	r3, [r0, #24]
 8003e18:	4619      	mov	r1, r3
 8003e1a:	2208      	movs	r2, #8
 8003e1c:	305c      	adds	r0, #92	; 0x5c
 8003e1e:	f000 f926 	bl	800406e <memset>
 8003e22:	4b0d      	ldr	r3, [pc, #52]	; (8003e58 <std+0x58>)
 8003e24:	6224      	str	r4, [r4, #32]
 8003e26:	6263      	str	r3, [r4, #36]	; 0x24
 8003e28:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <std+0x5c>)
 8003e2a:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e2c:	4b0c      	ldr	r3, [pc, #48]	; (8003e60 <std+0x60>)
 8003e2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e30:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <std+0x64>)
 8003e32:	6323      	str	r3, [r4, #48]	; 0x30
 8003e34:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <std+0x68>)
 8003e36:	429c      	cmp	r4, r3
 8003e38:	d006      	beq.n	8003e48 <std+0x48>
 8003e3a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003e3e:	4294      	cmp	r4, r2
 8003e40:	d002      	beq.n	8003e48 <std+0x48>
 8003e42:	33d0      	adds	r3, #208	; 0xd0
 8003e44:	429c      	cmp	r4, r3
 8003e46:	d105      	bne.n	8003e54 <std+0x54>
 8003e48:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e50:	f000 b98a 	b.w	8004168 <__retarget_lock_init_recursive>
 8003e54:	bd10      	pop	{r4, pc}
 8003e56:	bf00      	nop
 8003e58:	08003fe9 	.word	0x08003fe9
 8003e5c:	0800400b 	.word	0x0800400b
 8003e60:	08004043 	.word	0x08004043
 8003e64:	08004067 	.word	0x08004067
 8003e68:	20000274 	.word	0x20000274

08003e6c <stdio_exit_handler>:
 8003e6c:	4a02      	ldr	r2, [pc, #8]	; (8003e78 <stdio_exit_handler+0xc>)
 8003e6e:	4903      	ldr	r1, [pc, #12]	; (8003e7c <stdio_exit_handler+0x10>)
 8003e70:	4803      	ldr	r0, [pc, #12]	; (8003e80 <stdio_exit_handler+0x14>)
 8003e72:	f000 b869 	b.w	8003f48 <_fwalk_sglue>
 8003e76:	bf00      	nop
 8003e78:	2000000c 	.word	0x2000000c
 8003e7c:	08006d15 	.word	0x08006d15
 8003e80:	20000018 	.word	0x20000018

08003e84 <cleanup_stdio>:
 8003e84:	6841      	ldr	r1, [r0, #4]
 8003e86:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <cleanup_stdio+0x34>)
 8003e88:	b510      	push	{r4, lr}
 8003e8a:	4299      	cmp	r1, r3
 8003e8c:	4604      	mov	r4, r0
 8003e8e:	d001      	beq.n	8003e94 <cleanup_stdio+0x10>
 8003e90:	f002 ff40 	bl	8006d14 <_fflush_r>
 8003e94:	68a1      	ldr	r1, [r4, #8]
 8003e96:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <cleanup_stdio+0x38>)
 8003e98:	4299      	cmp	r1, r3
 8003e9a:	d002      	beq.n	8003ea2 <cleanup_stdio+0x1e>
 8003e9c:	4620      	mov	r0, r4
 8003e9e:	f002 ff39 	bl	8006d14 <_fflush_r>
 8003ea2:	68e1      	ldr	r1, [r4, #12]
 8003ea4:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <cleanup_stdio+0x3c>)
 8003ea6:	4299      	cmp	r1, r3
 8003ea8:	d004      	beq.n	8003eb4 <cleanup_stdio+0x30>
 8003eaa:	4620      	mov	r0, r4
 8003eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eb0:	f002 bf30 	b.w	8006d14 <_fflush_r>
 8003eb4:	bd10      	pop	{r4, pc}
 8003eb6:	bf00      	nop
 8003eb8:	20000274 	.word	0x20000274
 8003ebc:	200002dc 	.word	0x200002dc
 8003ec0:	20000344 	.word	0x20000344

08003ec4 <global_stdio_init.part.0>:
 8003ec4:	b510      	push	{r4, lr}
 8003ec6:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <global_stdio_init.part.0+0x30>)
 8003ec8:	4c0b      	ldr	r4, [pc, #44]	; (8003ef8 <global_stdio_init.part.0+0x34>)
 8003eca:	4a0c      	ldr	r2, [pc, #48]	; (8003efc <global_stdio_init.part.0+0x38>)
 8003ecc:	4620      	mov	r0, r4
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	2104      	movs	r1, #4
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f7ff ff94 	bl	8003e00 <std>
 8003ed8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003edc:	2201      	movs	r2, #1
 8003ede:	2109      	movs	r1, #9
 8003ee0:	f7ff ff8e 	bl	8003e00 <std>
 8003ee4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003ee8:	2202      	movs	r2, #2
 8003eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eee:	2112      	movs	r1, #18
 8003ef0:	f7ff bf86 	b.w	8003e00 <std>
 8003ef4:	200003ac 	.word	0x200003ac
 8003ef8:	20000274 	.word	0x20000274
 8003efc:	08003e6d 	.word	0x08003e6d

08003f00 <__sfp_lock_acquire>:
 8003f00:	4801      	ldr	r0, [pc, #4]	; (8003f08 <__sfp_lock_acquire+0x8>)
 8003f02:	f000 b932 	b.w	800416a <__retarget_lock_acquire_recursive>
 8003f06:	bf00      	nop
 8003f08:	200003b5 	.word	0x200003b5

08003f0c <__sfp_lock_release>:
 8003f0c:	4801      	ldr	r0, [pc, #4]	; (8003f14 <__sfp_lock_release+0x8>)
 8003f0e:	f000 b92d 	b.w	800416c <__retarget_lock_release_recursive>
 8003f12:	bf00      	nop
 8003f14:	200003b5 	.word	0x200003b5

08003f18 <__sinit>:
 8003f18:	b510      	push	{r4, lr}
 8003f1a:	4604      	mov	r4, r0
 8003f1c:	f7ff fff0 	bl	8003f00 <__sfp_lock_acquire>
 8003f20:	6a23      	ldr	r3, [r4, #32]
 8003f22:	b11b      	cbz	r3, 8003f2c <__sinit+0x14>
 8003f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f28:	f7ff bff0 	b.w	8003f0c <__sfp_lock_release>
 8003f2c:	4b04      	ldr	r3, [pc, #16]	; (8003f40 <__sinit+0x28>)
 8003f2e:	6223      	str	r3, [r4, #32]
 8003f30:	4b04      	ldr	r3, [pc, #16]	; (8003f44 <__sinit+0x2c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1f5      	bne.n	8003f24 <__sinit+0xc>
 8003f38:	f7ff ffc4 	bl	8003ec4 <global_stdio_init.part.0>
 8003f3c:	e7f2      	b.n	8003f24 <__sinit+0xc>
 8003f3e:	bf00      	nop
 8003f40:	08003e85 	.word	0x08003e85
 8003f44:	200003ac 	.word	0x200003ac

08003f48 <_fwalk_sglue>:
 8003f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f4c:	4607      	mov	r7, r0
 8003f4e:	4688      	mov	r8, r1
 8003f50:	4614      	mov	r4, r2
 8003f52:	2600      	movs	r6, #0
 8003f54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f58:	f1b9 0901 	subs.w	r9, r9, #1
 8003f5c:	d505      	bpl.n	8003f6a <_fwalk_sglue+0x22>
 8003f5e:	6824      	ldr	r4, [r4, #0]
 8003f60:	2c00      	cmp	r4, #0
 8003f62:	d1f7      	bne.n	8003f54 <_fwalk_sglue+0xc>
 8003f64:	4630      	mov	r0, r6
 8003f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f6a:	89ab      	ldrh	r3, [r5, #12]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d907      	bls.n	8003f80 <_fwalk_sglue+0x38>
 8003f70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f74:	3301      	adds	r3, #1
 8003f76:	d003      	beq.n	8003f80 <_fwalk_sglue+0x38>
 8003f78:	4629      	mov	r1, r5
 8003f7a:	4638      	mov	r0, r7
 8003f7c:	47c0      	blx	r8
 8003f7e:	4306      	orrs	r6, r0
 8003f80:	3568      	adds	r5, #104	; 0x68
 8003f82:	e7e9      	b.n	8003f58 <_fwalk_sglue+0x10>

08003f84 <iprintf>:
 8003f84:	b40f      	push	{r0, r1, r2, r3}
 8003f86:	b507      	push	{r0, r1, r2, lr}
 8003f88:	4906      	ldr	r1, [pc, #24]	; (8003fa4 <iprintf+0x20>)
 8003f8a:	ab04      	add	r3, sp, #16
 8003f8c:	6808      	ldr	r0, [r1, #0]
 8003f8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f92:	6881      	ldr	r1, [r0, #8]
 8003f94:	9301      	str	r3, [sp, #4]
 8003f96:	f002 fd21 	bl	80069dc <_vfiprintf_r>
 8003f9a:	b003      	add	sp, #12
 8003f9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fa0:	b004      	add	sp, #16
 8003fa2:	4770      	bx	lr
 8003fa4:	20000064 	.word	0x20000064

08003fa8 <siprintf>:
 8003fa8:	b40e      	push	{r1, r2, r3}
 8003faa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003fae:	b500      	push	{lr}
 8003fb0:	b09c      	sub	sp, #112	; 0x70
 8003fb2:	ab1d      	add	r3, sp, #116	; 0x74
 8003fb4:	9002      	str	r0, [sp, #8]
 8003fb6:	9006      	str	r0, [sp, #24]
 8003fb8:	9107      	str	r1, [sp, #28]
 8003fba:	9104      	str	r1, [sp, #16]
 8003fbc:	4808      	ldr	r0, [pc, #32]	; (8003fe0 <siprintf+0x38>)
 8003fbe:	4909      	ldr	r1, [pc, #36]	; (8003fe4 <siprintf+0x3c>)
 8003fc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fc4:	9105      	str	r1, [sp, #20]
 8003fc6:	6800      	ldr	r0, [r0, #0]
 8003fc8:	a902      	add	r1, sp, #8
 8003fca:	9301      	str	r3, [sp, #4]
 8003fcc:	f002 fbe0 	bl	8006790 <_svfiprintf_r>
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	9b02      	ldr	r3, [sp, #8]
 8003fd4:	701a      	strb	r2, [r3, #0]
 8003fd6:	b01c      	add	sp, #112	; 0x70
 8003fd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fdc:	b003      	add	sp, #12
 8003fde:	4770      	bx	lr
 8003fe0:	20000064 	.word	0x20000064
 8003fe4:	ffff0208 	.word	0xffff0208

08003fe8 <__sread>:
 8003fe8:	b510      	push	{r4, lr}
 8003fea:	460c      	mov	r4, r1
 8003fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ff0:	f000 f86c 	bl	80040cc <_read_r>
 8003ff4:	2800      	cmp	r0, #0
 8003ff6:	bfab      	itete	ge
 8003ff8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003ffa:	89a3      	ldrhlt	r3, [r4, #12]
 8003ffc:	181b      	addge	r3, r3, r0
 8003ffe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004002:	bfac      	ite	ge
 8004004:	6563      	strge	r3, [r4, #84]	; 0x54
 8004006:	81a3      	strhlt	r3, [r4, #12]
 8004008:	bd10      	pop	{r4, pc}

0800400a <__swrite>:
 800400a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800400e:	461f      	mov	r7, r3
 8004010:	898b      	ldrh	r3, [r1, #12]
 8004012:	4605      	mov	r5, r0
 8004014:	05db      	lsls	r3, r3, #23
 8004016:	460c      	mov	r4, r1
 8004018:	4616      	mov	r6, r2
 800401a:	d505      	bpl.n	8004028 <__swrite+0x1e>
 800401c:	2302      	movs	r3, #2
 800401e:	2200      	movs	r2, #0
 8004020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004024:	f000 f840 	bl	80040a8 <_lseek_r>
 8004028:	89a3      	ldrh	r3, [r4, #12]
 800402a:	4632      	mov	r2, r6
 800402c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004030:	81a3      	strh	r3, [r4, #12]
 8004032:	4628      	mov	r0, r5
 8004034:	463b      	mov	r3, r7
 8004036:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800403a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800403e:	f000 b857 	b.w	80040f0 <_write_r>

08004042 <__sseek>:
 8004042:	b510      	push	{r4, lr}
 8004044:	460c      	mov	r4, r1
 8004046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800404a:	f000 f82d 	bl	80040a8 <_lseek_r>
 800404e:	1c43      	adds	r3, r0, #1
 8004050:	89a3      	ldrh	r3, [r4, #12]
 8004052:	bf15      	itete	ne
 8004054:	6560      	strne	r0, [r4, #84]	; 0x54
 8004056:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800405a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800405e:	81a3      	strheq	r3, [r4, #12]
 8004060:	bf18      	it	ne
 8004062:	81a3      	strhne	r3, [r4, #12]
 8004064:	bd10      	pop	{r4, pc}

08004066 <__sclose>:
 8004066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800406a:	f000 b80d 	b.w	8004088 <_close_r>

0800406e <memset>:
 800406e:	4603      	mov	r3, r0
 8004070:	4402      	add	r2, r0
 8004072:	4293      	cmp	r3, r2
 8004074:	d100      	bne.n	8004078 <memset+0xa>
 8004076:	4770      	bx	lr
 8004078:	f803 1b01 	strb.w	r1, [r3], #1
 800407c:	e7f9      	b.n	8004072 <memset+0x4>
	...

08004080 <_localeconv_r>:
 8004080:	4800      	ldr	r0, [pc, #0]	; (8004084 <_localeconv_r+0x4>)
 8004082:	4770      	bx	lr
 8004084:	20000158 	.word	0x20000158

08004088 <_close_r>:
 8004088:	b538      	push	{r3, r4, r5, lr}
 800408a:	2300      	movs	r3, #0
 800408c:	4d05      	ldr	r5, [pc, #20]	; (80040a4 <_close_r+0x1c>)
 800408e:	4604      	mov	r4, r0
 8004090:	4608      	mov	r0, r1
 8004092:	602b      	str	r3, [r5, #0]
 8004094:	f7fd f820 	bl	80010d8 <_close>
 8004098:	1c43      	adds	r3, r0, #1
 800409a:	d102      	bne.n	80040a2 <_close_r+0x1a>
 800409c:	682b      	ldr	r3, [r5, #0]
 800409e:	b103      	cbz	r3, 80040a2 <_close_r+0x1a>
 80040a0:	6023      	str	r3, [r4, #0]
 80040a2:	bd38      	pop	{r3, r4, r5, pc}
 80040a4:	200003b0 	.word	0x200003b0

080040a8 <_lseek_r>:
 80040a8:	b538      	push	{r3, r4, r5, lr}
 80040aa:	4604      	mov	r4, r0
 80040ac:	4608      	mov	r0, r1
 80040ae:	4611      	mov	r1, r2
 80040b0:	2200      	movs	r2, #0
 80040b2:	4d05      	ldr	r5, [pc, #20]	; (80040c8 <_lseek_r+0x20>)
 80040b4:	602a      	str	r2, [r5, #0]
 80040b6:	461a      	mov	r2, r3
 80040b8:	f7fd f832 	bl	8001120 <_lseek>
 80040bc:	1c43      	adds	r3, r0, #1
 80040be:	d102      	bne.n	80040c6 <_lseek_r+0x1e>
 80040c0:	682b      	ldr	r3, [r5, #0]
 80040c2:	b103      	cbz	r3, 80040c6 <_lseek_r+0x1e>
 80040c4:	6023      	str	r3, [r4, #0]
 80040c6:	bd38      	pop	{r3, r4, r5, pc}
 80040c8:	200003b0 	.word	0x200003b0

080040cc <_read_r>:
 80040cc:	b538      	push	{r3, r4, r5, lr}
 80040ce:	4604      	mov	r4, r0
 80040d0:	4608      	mov	r0, r1
 80040d2:	4611      	mov	r1, r2
 80040d4:	2200      	movs	r2, #0
 80040d6:	4d05      	ldr	r5, [pc, #20]	; (80040ec <_read_r+0x20>)
 80040d8:	602a      	str	r2, [r5, #0]
 80040da:	461a      	mov	r2, r3
 80040dc:	f7fc ffdf 	bl	800109e <_read>
 80040e0:	1c43      	adds	r3, r0, #1
 80040e2:	d102      	bne.n	80040ea <_read_r+0x1e>
 80040e4:	682b      	ldr	r3, [r5, #0]
 80040e6:	b103      	cbz	r3, 80040ea <_read_r+0x1e>
 80040e8:	6023      	str	r3, [r4, #0]
 80040ea:	bd38      	pop	{r3, r4, r5, pc}
 80040ec:	200003b0 	.word	0x200003b0

080040f0 <_write_r>:
 80040f0:	b538      	push	{r3, r4, r5, lr}
 80040f2:	4604      	mov	r4, r0
 80040f4:	4608      	mov	r0, r1
 80040f6:	4611      	mov	r1, r2
 80040f8:	2200      	movs	r2, #0
 80040fa:	4d05      	ldr	r5, [pc, #20]	; (8004110 <_write_r+0x20>)
 80040fc:	602a      	str	r2, [r5, #0]
 80040fe:	461a      	mov	r2, r3
 8004100:	f7fc fd6a 	bl	8000bd8 <_write>
 8004104:	1c43      	adds	r3, r0, #1
 8004106:	d102      	bne.n	800410e <_write_r+0x1e>
 8004108:	682b      	ldr	r3, [r5, #0]
 800410a:	b103      	cbz	r3, 800410e <_write_r+0x1e>
 800410c:	6023      	str	r3, [r4, #0]
 800410e:	bd38      	pop	{r3, r4, r5, pc}
 8004110:	200003b0 	.word	0x200003b0

08004114 <__errno>:
 8004114:	4b01      	ldr	r3, [pc, #4]	; (800411c <__errno+0x8>)
 8004116:	6818      	ldr	r0, [r3, #0]
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	20000064 	.word	0x20000064

08004120 <__libc_init_array>:
 8004120:	b570      	push	{r4, r5, r6, lr}
 8004122:	2600      	movs	r6, #0
 8004124:	4d0c      	ldr	r5, [pc, #48]	; (8004158 <__libc_init_array+0x38>)
 8004126:	4c0d      	ldr	r4, [pc, #52]	; (800415c <__libc_init_array+0x3c>)
 8004128:	1b64      	subs	r4, r4, r5
 800412a:	10a4      	asrs	r4, r4, #2
 800412c:	42a6      	cmp	r6, r4
 800412e:	d109      	bne.n	8004144 <__libc_init_array+0x24>
 8004130:	f003 fbc2 	bl	80078b8 <_init>
 8004134:	2600      	movs	r6, #0
 8004136:	4d0a      	ldr	r5, [pc, #40]	; (8004160 <__libc_init_array+0x40>)
 8004138:	4c0a      	ldr	r4, [pc, #40]	; (8004164 <__libc_init_array+0x44>)
 800413a:	1b64      	subs	r4, r4, r5
 800413c:	10a4      	asrs	r4, r4, #2
 800413e:	42a6      	cmp	r6, r4
 8004140:	d105      	bne.n	800414e <__libc_init_array+0x2e>
 8004142:	bd70      	pop	{r4, r5, r6, pc}
 8004144:	f855 3b04 	ldr.w	r3, [r5], #4
 8004148:	4798      	blx	r3
 800414a:	3601      	adds	r6, #1
 800414c:	e7ee      	b.n	800412c <__libc_init_array+0xc>
 800414e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004152:	4798      	blx	r3
 8004154:	3601      	adds	r6, #1
 8004156:	e7f2      	b.n	800413e <__libc_init_array+0x1e>
 8004158:	08007d48 	.word	0x08007d48
 800415c:	08007d48 	.word	0x08007d48
 8004160:	08007d48 	.word	0x08007d48
 8004164:	08007d4c 	.word	0x08007d4c

08004168 <__retarget_lock_init_recursive>:
 8004168:	4770      	bx	lr

0800416a <__retarget_lock_acquire_recursive>:
 800416a:	4770      	bx	lr

0800416c <__retarget_lock_release_recursive>:
 800416c:	4770      	bx	lr

0800416e <memchr>:
 800416e:	4603      	mov	r3, r0
 8004170:	b510      	push	{r4, lr}
 8004172:	b2c9      	uxtb	r1, r1
 8004174:	4402      	add	r2, r0
 8004176:	4293      	cmp	r3, r2
 8004178:	4618      	mov	r0, r3
 800417a:	d101      	bne.n	8004180 <memchr+0x12>
 800417c:	2000      	movs	r0, #0
 800417e:	e003      	b.n	8004188 <memchr+0x1a>
 8004180:	7804      	ldrb	r4, [r0, #0]
 8004182:	3301      	adds	r3, #1
 8004184:	428c      	cmp	r4, r1
 8004186:	d1f6      	bne.n	8004176 <memchr+0x8>
 8004188:	bd10      	pop	{r4, pc}
	...

0800418c <nanf>:
 800418c:	4800      	ldr	r0, [pc, #0]	; (8004190 <nanf+0x4>)
 800418e:	4770      	bx	lr
 8004190:	7fc00000 	.word	0x7fc00000

08004194 <quorem>:
 8004194:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004198:	6903      	ldr	r3, [r0, #16]
 800419a:	690c      	ldr	r4, [r1, #16]
 800419c:	4607      	mov	r7, r0
 800419e:	42a3      	cmp	r3, r4
 80041a0:	db7f      	blt.n	80042a2 <quorem+0x10e>
 80041a2:	3c01      	subs	r4, #1
 80041a4:	f100 0514 	add.w	r5, r0, #20
 80041a8:	f101 0814 	add.w	r8, r1, #20
 80041ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80041b0:	9301      	str	r3, [sp, #4]
 80041b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80041b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80041ba:	3301      	adds	r3, #1
 80041bc:	429a      	cmp	r2, r3
 80041be:	fbb2 f6f3 	udiv	r6, r2, r3
 80041c2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80041c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80041ca:	d331      	bcc.n	8004230 <quorem+0x9c>
 80041cc:	f04f 0e00 	mov.w	lr, #0
 80041d0:	4640      	mov	r0, r8
 80041d2:	46ac      	mov	ip, r5
 80041d4:	46f2      	mov	sl, lr
 80041d6:	f850 2b04 	ldr.w	r2, [r0], #4
 80041da:	b293      	uxth	r3, r2
 80041dc:	fb06 e303 	mla	r3, r6, r3, lr
 80041e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80041e4:	0c1a      	lsrs	r2, r3, #16
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	fb06 220e 	mla	r2, r6, lr, r2
 80041ec:	ebaa 0303 	sub.w	r3, sl, r3
 80041f0:	f8dc a000 	ldr.w	sl, [ip]
 80041f4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80041f8:	fa1f fa8a 	uxth.w	sl, sl
 80041fc:	4453      	add	r3, sl
 80041fe:	f8dc a000 	ldr.w	sl, [ip]
 8004202:	b292      	uxth	r2, r2
 8004204:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004208:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800420c:	b29b      	uxth	r3, r3
 800420e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004212:	4581      	cmp	r9, r0
 8004214:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004218:	f84c 3b04 	str.w	r3, [ip], #4
 800421c:	d2db      	bcs.n	80041d6 <quorem+0x42>
 800421e:	f855 300b 	ldr.w	r3, [r5, fp]
 8004222:	b92b      	cbnz	r3, 8004230 <quorem+0x9c>
 8004224:	9b01      	ldr	r3, [sp, #4]
 8004226:	3b04      	subs	r3, #4
 8004228:	429d      	cmp	r5, r3
 800422a:	461a      	mov	r2, r3
 800422c:	d32d      	bcc.n	800428a <quorem+0xf6>
 800422e:	613c      	str	r4, [r7, #16]
 8004230:	4638      	mov	r0, r7
 8004232:	f001 f9dd 	bl	80055f0 <__mcmp>
 8004236:	2800      	cmp	r0, #0
 8004238:	db23      	blt.n	8004282 <quorem+0xee>
 800423a:	4629      	mov	r1, r5
 800423c:	2000      	movs	r0, #0
 800423e:	3601      	adds	r6, #1
 8004240:	f858 2b04 	ldr.w	r2, [r8], #4
 8004244:	f8d1 c000 	ldr.w	ip, [r1]
 8004248:	b293      	uxth	r3, r2
 800424a:	1ac3      	subs	r3, r0, r3
 800424c:	0c12      	lsrs	r2, r2, #16
 800424e:	fa1f f08c 	uxth.w	r0, ip
 8004252:	4403      	add	r3, r0
 8004254:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004258:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800425c:	b29b      	uxth	r3, r3
 800425e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004262:	45c1      	cmp	r9, r8
 8004264:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004268:	f841 3b04 	str.w	r3, [r1], #4
 800426c:	d2e8      	bcs.n	8004240 <quorem+0xac>
 800426e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004272:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004276:	b922      	cbnz	r2, 8004282 <quorem+0xee>
 8004278:	3b04      	subs	r3, #4
 800427a:	429d      	cmp	r5, r3
 800427c:	461a      	mov	r2, r3
 800427e:	d30a      	bcc.n	8004296 <quorem+0x102>
 8004280:	613c      	str	r4, [r7, #16]
 8004282:	4630      	mov	r0, r6
 8004284:	b003      	add	sp, #12
 8004286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800428a:	6812      	ldr	r2, [r2, #0]
 800428c:	3b04      	subs	r3, #4
 800428e:	2a00      	cmp	r2, #0
 8004290:	d1cd      	bne.n	800422e <quorem+0x9a>
 8004292:	3c01      	subs	r4, #1
 8004294:	e7c8      	b.n	8004228 <quorem+0x94>
 8004296:	6812      	ldr	r2, [r2, #0]
 8004298:	3b04      	subs	r3, #4
 800429a:	2a00      	cmp	r2, #0
 800429c:	d1f0      	bne.n	8004280 <quorem+0xec>
 800429e:	3c01      	subs	r4, #1
 80042a0:	e7eb      	b.n	800427a <quorem+0xe6>
 80042a2:	2000      	movs	r0, #0
 80042a4:	e7ee      	b.n	8004284 <quorem+0xf0>
	...

080042a8 <_dtoa_r>:
 80042a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ac:	4616      	mov	r6, r2
 80042ae:	461f      	mov	r7, r3
 80042b0:	69c4      	ldr	r4, [r0, #28]
 80042b2:	b099      	sub	sp, #100	; 0x64
 80042b4:	4605      	mov	r5, r0
 80042b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80042ba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80042be:	b974      	cbnz	r4, 80042de <_dtoa_r+0x36>
 80042c0:	2010      	movs	r0, #16
 80042c2:	f000 fe1d 	bl	8004f00 <malloc>
 80042c6:	4602      	mov	r2, r0
 80042c8:	61e8      	str	r0, [r5, #28]
 80042ca:	b920      	cbnz	r0, 80042d6 <_dtoa_r+0x2e>
 80042cc:	21ef      	movs	r1, #239	; 0xef
 80042ce:	4bac      	ldr	r3, [pc, #688]	; (8004580 <_dtoa_r+0x2d8>)
 80042d0:	48ac      	ldr	r0, [pc, #688]	; (8004584 <_dtoa_r+0x2dc>)
 80042d2:	f002 fe2d 	bl	8006f30 <__assert_func>
 80042d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80042da:	6004      	str	r4, [r0, #0]
 80042dc:	60c4      	str	r4, [r0, #12]
 80042de:	69eb      	ldr	r3, [r5, #28]
 80042e0:	6819      	ldr	r1, [r3, #0]
 80042e2:	b151      	cbz	r1, 80042fa <_dtoa_r+0x52>
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	2301      	movs	r3, #1
 80042e8:	4093      	lsls	r3, r2
 80042ea:	604a      	str	r2, [r1, #4]
 80042ec:	608b      	str	r3, [r1, #8]
 80042ee:	4628      	mov	r0, r5
 80042f0:	f000 fefa 	bl	80050e8 <_Bfree>
 80042f4:	2200      	movs	r2, #0
 80042f6:	69eb      	ldr	r3, [r5, #28]
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	1e3b      	subs	r3, r7, #0
 80042fc:	bfaf      	iteee	ge
 80042fe:	2300      	movge	r3, #0
 8004300:	2201      	movlt	r2, #1
 8004302:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004306:	9305      	strlt	r3, [sp, #20]
 8004308:	bfa8      	it	ge
 800430a:	f8c8 3000 	strge.w	r3, [r8]
 800430e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004312:	4b9d      	ldr	r3, [pc, #628]	; (8004588 <_dtoa_r+0x2e0>)
 8004314:	bfb8      	it	lt
 8004316:	f8c8 2000 	strlt.w	r2, [r8]
 800431a:	ea33 0309 	bics.w	r3, r3, r9
 800431e:	d119      	bne.n	8004354 <_dtoa_r+0xac>
 8004320:	f242 730f 	movw	r3, #9999	; 0x270f
 8004324:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004326:	6013      	str	r3, [r2, #0]
 8004328:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800432c:	4333      	orrs	r3, r6
 800432e:	f000 8589 	beq.w	8004e44 <_dtoa_r+0xb9c>
 8004332:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004334:	b953      	cbnz	r3, 800434c <_dtoa_r+0xa4>
 8004336:	4b95      	ldr	r3, [pc, #596]	; (800458c <_dtoa_r+0x2e4>)
 8004338:	e023      	b.n	8004382 <_dtoa_r+0xda>
 800433a:	4b95      	ldr	r3, [pc, #596]	; (8004590 <_dtoa_r+0x2e8>)
 800433c:	9303      	str	r3, [sp, #12]
 800433e:	3308      	adds	r3, #8
 8004340:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004342:	6013      	str	r3, [r2, #0]
 8004344:	9803      	ldr	r0, [sp, #12]
 8004346:	b019      	add	sp, #100	; 0x64
 8004348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800434c:	4b8f      	ldr	r3, [pc, #572]	; (800458c <_dtoa_r+0x2e4>)
 800434e:	9303      	str	r3, [sp, #12]
 8004350:	3303      	adds	r3, #3
 8004352:	e7f5      	b.n	8004340 <_dtoa_r+0x98>
 8004354:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004358:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800435c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004360:	2200      	movs	r2, #0
 8004362:	2300      	movs	r3, #0
 8004364:	f7fc fb20 	bl	80009a8 <__aeabi_dcmpeq>
 8004368:	4680      	mov	r8, r0
 800436a:	b160      	cbz	r0, 8004386 <_dtoa_r+0xde>
 800436c:	2301      	movs	r3, #1
 800436e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 8562 	beq.w	8004e3e <_dtoa_r+0xb96>
 800437a:	4b86      	ldr	r3, [pc, #536]	; (8004594 <_dtoa_r+0x2ec>)
 800437c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800437e:	6013      	str	r3, [r2, #0]
 8004380:	3b01      	subs	r3, #1
 8004382:	9303      	str	r3, [sp, #12]
 8004384:	e7de      	b.n	8004344 <_dtoa_r+0x9c>
 8004386:	ab16      	add	r3, sp, #88	; 0x58
 8004388:	9301      	str	r3, [sp, #4]
 800438a:	ab17      	add	r3, sp, #92	; 0x5c
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	4628      	mov	r0, r5
 8004390:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004394:	f001 fa3c 	bl	8005810 <__d2b>
 8004398:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800439c:	4682      	mov	sl, r0
 800439e:	2c00      	cmp	r4, #0
 80043a0:	d07e      	beq.n	80044a0 <_dtoa_r+0x1f8>
 80043a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80043a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043a8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80043ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043b0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80043b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80043b8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80043bc:	4619      	mov	r1, r3
 80043be:	2200      	movs	r2, #0
 80043c0:	4b75      	ldr	r3, [pc, #468]	; (8004598 <_dtoa_r+0x2f0>)
 80043c2:	f7fb fed1 	bl	8000168 <__aeabi_dsub>
 80043c6:	a368      	add	r3, pc, #416	; (adr r3, 8004568 <_dtoa_r+0x2c0>)
 80043c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043cc:	f7fc f884 	bl	80004d8 <__aeabi_dmul>
 80043d0:	a367      	add	r3, pc, #412	; (adr r3, 8004570 <_dtoa_r+0x2c8>)
 80043d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d6:	f7fb fec9 	bl	800016c <__adddf3>
 80043da:	4606      	mov	r6, r0
 80043dc:	4620      	mov	r0, r4
 80043de:	460f      	mov	r7, r1
 80043e0:	f7fc f810 	bl	8000404 <__aeabi_i2d>
 80043e4:	a364      	add	r3, pc, #400	; (adr r3, 8004578 <_dtoa_r+0x2d0>)
 80043e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ea:	f7fc f875 	bl	80004d8 <__aeabi_dmul>
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	4630      	mov	r0, r6
 80043f4:	4639      	mov	r1, r7
 80043f6:	f7fb feb9 	bl	800016c <__adddf3>
 80043fa:	4606      	mov	r6, r0
 80043fc:	460f      	mov	r7, r1
 80043fe:	f7fc fb1b 	bl	8000a38 <__aeabi_d2iz>
 8004402:	2200      	movs	r2, #0
 8004404:	4683      	mov	fp, r0
 8004406:	2300      	movs	r3, #0
 8004408:	4630      	mov	r0, r6
 800440a:	4639      	mov	r1, r7
 800440c:	f7fc fad6 	bl	80009bc <__aeabi_dcmplt>
 8004410:	b148      	cbz	r0, 8004426 <_dtoa_r+0x17e>
 8004412:	4658      	mov	r0, fp
 8004414:	f7fb fff6 	bl	8000404 <__aeabi_i2d>
 8004418:	4632      	mov	r2, r6
 800441a:	463b      	mov	r3, r7
 800441c:	f7fc fac4 	bl	80009a8 <__aeabi_dcmpeq>
 8004420:	b908      	cbnz	r0, 8004426 <_dtoa_r+0x17e>
 8004422:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004426:	f1bb 0f16 	cmp.w	fp, #22
 800442a:	d857      	bhi.n	80044dc <_dtoa_r+0x234>
 800442c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004430:	4b5a      	ldr	r3, [pc, #360]	; (800459c <_dtoa_r+0x2f4>)
 8004432:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443a:	f7fc fabf 	bl	80009bc <__aeabi_dcmplt>
 800443e:	2800      	cmp	r0, #0
 8004440:	d04e      	beq.n	80044e0 <_dtoa_r+0x238>
 8004442:	2300      	movs	r3, #0
 8004444:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004448:	930f      	str	r3, [sp, #60]	; 0x3c
 800444a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800444c:	1b1b      	subs	r3, r3, r4
 800444e:	1e5a      	subs	r2, r3, #1
 8004450:	bf46      	itte	mi
 8004452:	f1c3 0901 	rsbmi	r9, r3, #1
 8004456:	2300      	movmi	r3, #0
 8004458:	f04f 0900 	movpl.w	r9, #0
 800445c:	9209      	str	r2, [sp, #36]	; 0x24
 800445e:	bf48      	it	mi
 8004460:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004462:	f1bb 0f00 	cmp.w	fp, #0
 8004466:	db3d      	blt.n	80044e4 <_dtoa_r+0x23c>
 8004468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800446a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800446e:	445b      	add	r3, fp
 8004470:	9309      	str	r3, [sp, #36]	; 0x24
 8004472:	2300      	movs	r3, #0
 8004474:	930a      	str	r3, [sp, #40]	; 0x28
 8004476:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004478:	2b09      	cmp	r3, #9
 800447a:	d867      	bhi.n	800454c <_dtoa_r+0x2a4>
 800447c:	2b05      	cmp	r3, #5
 800447e:	bfc4      	itt	gt
 8004480:	3b04      	subgt	r3, #4
 8004482:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004484:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004486:	bfc8      	it	gt
 8004488:	2400      	movgt	r4, #0
 800448a:	f1a3 0302 	sub.w	r3, r3, #2
 800448e:	bfd8      	it	le
 8004490:	2401      	movle	r4, #1
 8004492:	2b03      	cmp	r3, #3
 8004494:	f200 8086 	bhi.w	80045a4 <_dtoa_r+0x2fc>
 8004498:	e8df f003 	tbb	[pc, r3]
 800449c:	5637392c 	.word	0x5637392c
 80044a0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80044a4:	441c      	add	r4, r3
 80044a6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80044aa:	2b20      	cmp	r3, #32
 80044ac:	bfc1      	itttt	gt
 80044ae:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80044b2:	fa09 f903 	lslgt.w	r9, r9, r3
 80044b6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80044ba:	fa26 f303 	lsrgt.w	r3, r6, r3
 80044be:	bfd6      	itet	le
 80044c0:	f1c3 0320 	rsble	r3, r3, #32
 80044c4:	ea49 0003 	orrgt.w	r0, r9, r3
 80044c8:	fa06 f003 	lslle.w	r0, r6, r3
 80044cc:	f7fb ff8a 	bl	80003e4 <__aeabi_ui2d>
 80044d0:	2201      	movs	r2, #1
 80044d2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80044d6:	3c01      	subs	r4, #1
 80044d8:	9213      	str	r2, [sp, #76]	; 0x4c
 80044da:	e76f      	b.n	80043bc <_dtoa_r+0x114>
 80044dc:	2301      	movs	r3, #1
 80044de:	e7b3      	b.n	8004448 <_dtoa_r+0x1a0>
 80044e0:	900f      	str	r0, [sp, #60]	; 0x3c
 80044e2:	e7b2      	b.n	800444a <_dtoa_r+0x1a2>
 80044e4:	f1cb 0300 	rsb	r3, fp, #0
 80044e8:	930a      	str	r3, [sp, #40]	; 0x28
 80044ea:	2300      	movs	r3, #0
 80044ec:	eba9 090b 	sub.w	r9, r9, fp
 80044f0:	930e      	str	r3, [sp, #56]	; 0x38
 80044f2:	e7c0      	b.n	8004476 <_dtoa_r+0x1ce>
 80044f4:	2300      	movs	r3, #0
 80044f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80044f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	dc55      	bgt.n	80045aa <_dtoa_r+0x302>
 80044fe:	2301      	movs	r3, #1
 8004500:	461a      	mov	r2, r3
 8004502:	9306      	str	r3, [sp, #24]
 8004504:	9308      	str	r3, [sp, #32]
 8004506:	9223      	str	r2, [sp, #140]	; 0x8c
 8004508:	e00b      	b.n	8004522 <_dtoa_r+0x27a>
 800450a:	2301      	movs	r3, #1
 800450c:	e7f3      	b.n	80044f6 <_dtoa_r+0x24e>
 800450e:	2300      	movs	r3, #0
 8004510:	930b      	str	r3, [sp, #44]	; 0x2c
 8004512:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004514:	445b      	add	r3, fp
 8004516:	9306      	str	r3, [sp, #24]
 8004518:	3301      	adds	r3, #1
 800451a:	2b01      	cmp	r3, #1
 800451c:	9308      	str	r3, [sp, #32]
 800451e:	bfb8      	it	lt
 8004520:	2301      	movlt	r3, #1
 8004522:	2100      	movs	r1, #0
 8004524:	2204      	movs	r2, #4
 8004526:	69e8      	ldr	r0, [r5, #28]
 8004528:	f102 0614 	add.w	r6, r2, #20
 800452c:	429e      	cmp	r6, r3
 800452e:	d940      	bls.n	80045b2 <_dtoa_r+0x30a>
 8004530:	6041      	str	r1, [r0, #4]
 8004532:	4628      	mov	r0, r5
 8004534:	f000 fd98 	bl	8005068 <_Balloc>
 8004538:	9003      	str	r0, [sp, #12]
 800453a:	2800      	cmp	r0, #0
 800453c:	d13c      	bne.n	80045b8 <_dtoa_r+0x310>
 800453e:	4602      	mov	r2, r0
 8004540:	f240 11af 	movw	r1, #431	; 0x1af
 8004544:	4b16      	ldr	r3, [pc, #88]	; (80045a0 <_dtoa_r+0x2f8>)
 8004546:	e6c3      	b.n	80042d0 <_dtoa_r+0x28>
 8004548:	2301      	movs	r3, #1
 800454a:	e7e1      	b.n	8004510 <_dtoa_r+0x268>
 800454c:	2401      	movs	r4, #1
 800454e:	2300      	movs	r3, #0
 8004550:	940b      	str	r4, [sp, #44]	; 0x2c
 8004552:	9322      	str	r3, [sp, #136]	; 0x88
 8004554:	f04f 33ff 	mov.w	r3, #4294967295
 8004558:	2200      	movs	r2, #0
 800455a:	9306      	str	r3, [sp, #24]
 800455c:	9308      	str	r3, [sp, #32]
 800455e:	2312      	movs	r3, #18
 8004560:	e7d1      	b.n	8004506 <_dtoa_r+0x25e>
 8004562:	bf00      	nop
 8004564:	f3af 8000 	nop.w
 8004568:	636f4361 	.word	0x636f4361
 800456c:	3fd287a7 	.word	0x3fd287a7
 8004570:	8b60c8b3 	.word	0x8b60c8b3
 8004574:	3fc68a28 	.word	0x3fc68a28
 8004578:	509f79fb 	.word	0x509f79fb
 800457c:	3fd34413 	.word	0x3fd34413
 8004580:	08007960 	.word	0x08007960
 8004584:	08007977 	.word	0x08007977
 8004588:	7ff00000 	.word	0x7ff00000
 800458c:	0800795c 	.word	0x0800795c
 8004590:	08007953 	.word	0x08007953
 8004594:	0800792b 	.word	0x0800792b
 8004598:	3ff80000 	.word	0x3ff80000
 800459c:	08007a68 	.word	0x08007a68
 80045a0:	080079cf 	.word	0x080079cf
 80045a4:	2301      	movs	r3, #1
 80045a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80045a8:	e7d4      	b.n	8004554 <_dtoa_r+0x2ac>
 80045aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80045ac:	9306      	str	r3, [sp, #24]
 80045ae:	9308      	str	r3, [sp, #32]
 80045b0:	e7b7      	b.n	8004522 <_dtoa_r+0x27a>
 80045b2:	3101      	adds	r1, #1
 80045b4:	0052      	lsls	r2, r2, #1
 80045b6:	e7b7      	b.n	8004528 <_dtoa_r+0x280>
 80045b8:	69eb      	ldr	r3, [r5, #28]
 80045ba:	9a03      	ldr	r2, [sp, #12]
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	9b08      	ldr	r3, [sp, #32]
 80045c0:	2b0e      	cmp	r3, #14
 80045c2:	f200 80a8 	bhi.w	8004716 <_dtoa_r+0x46e>
 80045c6:	2c00      	cmp	r4, #0
 80045c8:	f000 80a5 	beq.w	8004716 <_dtoa_r+0x46e>
 80045cc:	f1bb 0f00 	cmp.w	fp, #0
 80045d0:	dd34      	ble.n	800463c <_dtoa_r+0x394>
 80045d2:	4b9a      	ldr	r3, [pc, #616]	; (800483c <_dtoa_r+0x594>)
 80045d4:	f00b 020f 	and.w	r2, fp, #15
 80045d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80045dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80045e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80045e4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80045e8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80045ec:	d016      	beq.n	800461c <_dtoa_r+0x374>
 80045ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80045f2:	4b93      	ldr	r3, [pc, #588]	; (8004840 <_dtoa_r+0x598>)
 80045f4:	2703      	movs	r7, #3
 80045f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80045fa:	f7fc f897 	bl	800072c <__aeabi_ddiv>
 80045fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004602:	f004 040f 	and.w	r4, r4, #15
 8004606:	4e8e      	ldr	r6, [pc, #568]	; (8004840 <_dtoa_r+0x598>)
 8004608:	b954      	cbnz	r4, 8004620 <_dtoa_r+0x378>
 800460a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800460e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004612:	f7fc f88b 	bl	800072c <__aeabi_ddiv>
 8004616:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800461a:	e029      	b.n	8004670 <_dtoa_r+0x3c8>
 800461c:	2702      	movs	r7, #2
 800461e:	e7f2      	b.n	8004606 <_dtoa_r+0x35e>
 8004620:	07e1      	lsls	r1, r4, #31
 8004622:	d508      	bpl.n	8004636 <_dtoa_r+0x38e>
 8004624:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004628:	e9d6 2300 	ldrd	r2, r3, [r6]
 800462c:	f7fb ff54 	bl	80004d8 <__aeabi_dmul>
 8004630:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004634:	3701      	adds	r7, #1
 8004636:	1064      	asrs	r4, r4, #1
 8004638:	3608      	adds	r6, #8
 800463a:	e7e5      	b.n	8004608 <_dtoa_r+0x360>
 800463c:	f000 80a5 	beq.w	800478a <_dtoa_r+0x4e2>
 8004640:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004644:	f1cb 0400 	rsb	r4, fp, #0
 8004648:	4b7c      	ldr	r3, [pc, #496]	; (800483c <_dtoa_r+0x594>)
 800464a:	f004 020f 	and.w	r2, r4, #15
 800464e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004656:	f7fb ff3f 	bl	80004d8 <__aeabi_dmul>
 800465a:	2702      	movs	r7, #2
 800465c:	2300      	movs	r3, #0
 800465e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004662:	4e77      	ldr	r6, [pc, #476]	; (8004840 <_dtoa_r+0x598>)
 8004664:	1124      	asrs	r4, r4, #4
 8004666:	2c00      	cmp	r4, #0
 8004668:	f040 8084 	bne.w	8004774 <_dtoa_r+0x4cc>
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1d2      	bne.n	8004616 <_dtoa_r+0x36e>
 8004670:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004674:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004678:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800467a:	2b00      	cmp	r3, #0
 800467c:	f000 8087 	beq.w	800478e <_dtoa_r+0x4e6>
 8004680:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004684:	2200      	movs	r2, #0
 8004686:	4b6f      	ldr	r3, [pc, #444]	; (8004844 <_dtoa_r+0x59c>)
 8004688:	f7fc f998 	bl	80009bc <__aeabi_dcmplt>
 800468c:	2800      	cmp	r0, #0
 800468e:	d07e      	beq.n	800478e <_dtoa_r+0x4e6>
 8004690:	9b08      	ldr	r3, [sp, #32]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d07b      	beq.n	800478e <_dtoa_r+0x4e6>
 8004696:	9b06      	ldr	r3, [sp, #24]
 8004698:	2b00      	cmp	r3, #0
 800469a:	dd38      	ble.n	800470e <_dtoa_r+0x466>
 800469c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80046a0:	2200      	movs	r2, #0
 80046a2:	4b69      	ldr	r3, [pc, #420]	; (8004848 <_dtoa_r+0x5a0>)
 80046a4:	f7fb ff18 	bl	80004d8 <__aeabi_dmul>
 80046a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046ac:	9c06      	ldr	r4, [sp, #24]
 80046ae:	f10b 38ff 	add.w	r8, fp, #4294967295
 80046b2:	3701      	adds	r7, #1
 80046b4:	4638      	mov	r0, r7
 80046b6:	f7fb fea5 	bl	8000404 <__aeabi_i2d>
 80046ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046be:	f7fb ff0b 	bl	80004d8 <__aeabi_dmul>
 80046c2:	2200      	movs	r2, #0
 80046c4:	4b61      	ldr	r3, [pc, #388]	; (800484c <_dtoa_r+0x5a4>)
 80046c6:	f7fb fd51 	bl	800016c <__adddf3>
 80046ca:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80046ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80046d2:	9611      	str	r6, [sp, #68]	; 0x44
 80046d4:	2c00      	cmp	r4, #0
 80046d6:	d15d      	bne.n	8004794 <_dtoa_r+0x4ec>
 80046d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046dc:	2200      	movs	r2, #0
 80046de:	4b5c      	ldr	r3, [pc, #368]	; (8004850 <_dtoa_r+0x5a8>)
 80046e0:	f7fb fd42 	bl	8000168 <__aeabi_dsub>
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80046ec:	4633      	mov	r3, r6
 80046ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80046f0:	f7fc f982 	bl	80009f8 <__aeabi_dcmpgt>
 80046f4:	2800      	cmp	r0, #0
 80046f6:	f040 8295 	bne.w	8004c24 <_dtoa_r+0x97c>
 80046fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004700:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004704:	f7fc f95a 	bl	80009bc <__aeabi_dcmplt>
 8004708:	2800      	cmp	r0, #0
 800470a:	f040 8289 	bne.w	8004c20 <_dtoa_r+0x978>
 800470e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004712:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004716:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004718:	2b00      	cmp	r3, #0
 800471a:	f2c0 8151 	blt.w	80049c0 <_dtoa_r+0x718>
 800471e:	f1bb 0f0e 	cmp.w	fp, #14
 8004722:	f300 814d 	bgt.w	80049c0 <_dtoa_r+0x718>
 8004726:	4b45      	ldr	r3, [pc, #276]	; (800483c <_dtoa_r+0x594>)
 8004728:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800472c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004730:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004734:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004736:	2b00      	cmp	r3, #0
 8004738:	f280 80da 	bge.w	80048f0 <_dtoa_r+0x648>
 800473c:	9b08      	ldr	r3, [sp, #32]
 800473e:	2b00      	cmp	r3, #0
 8004740:	f300 80d6 	bgt.w	80048f0 <_dtoa_r+0x648>
 8004744:	f040 826b 	bne.w	8004c1e <_dtoa_r+0x976>
 8004748:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800474c:	2200      	movs	r2, #0
 800474e:	4b40      	ldr	r3, [pc, #256]	; (8004850 <_dtoa_r+0x5a8>)
 8004750:	f7fb fec2 	bl	80004d8 <__aeabi_dmul>
 8004754:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004758:	f7fc f944 	bl	80009e4 <__aeabi_dcmpge>
 800475c:	9c08      	ldr	r4, [sp, #32]
 800475e:	4626      	mov	r6, r4
 8004760:	2800      	cmp	r0, #0
 8004762:	f040 8241 	bne.w	8004be8 <_dtoa_r+0x940>
 8004766:	2331      	movs	r3, #49	; 0x31
 8004768:	9f03      	ldr	r7, [sp, #12]
 800476a:	f10b 0b01 	add.w	fp, fp, #1
 800476e:	f807 3b01 	strb.w	r3, [r7], #1
 8004772:	e23d      	b.n	8004bf0 <_dtoa_r+0x948>
 8004774:	07e2      	lsls	r2, r4, #31
 8004776:	d505      	bpl.n	8004784 <_dtoa_r+0x4dc>
 8004778:	e9d6 2300 	ldrd	r2, r3, [r6]
 800477c:	f7fb feac 	bl	80004d8 <__aeabi_dmul>
 8004780:	2301      	movs	r3, #1
 8004782:	3701      	adds	r7, #1
 8004784:	1064      	asrs	r4, r4, #1
 8004786:	3608      	adds	r6, #8
 8004788:	e76d      	b.n	8004666 <_dtoa_r+0x3be>
 800478a:	2702      	movs	r7, #2
 800478c:	e770      	b.n	8004670 <_dtoa_r+0x3c8>
 800478e:	46d8      	mov	r8, fp
 8004790:	9c08      	ldr	r4, [sp, #32]
 8004792:	e78f      	b.n	80046b4 <_dtoa_r+0x40c>
 8004794:	9903      	ldr	r1, [sp, #12]
 8004796:	4b29      	ldr	r3, [pc, #164]	; (800483c <_dtoa_r+0x594>)
 8004798:	4421      	add	r1, r4
 800479a:	9112      	str	r1, [sp, #72]	; 0x48
 800479c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800479e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80047a2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80047a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80047aa:	2900      	cmp	r1, #0
 80047ac:	d054      	beq.n	8004858 <_dtoa_r+0x5b0>
 80047ae:	2000      	movs	r0, #0
 80047b0:	4928      	ldr	r1, [pc, #160]	; (8004854 <_dtoa_r+0x5ac>)
 80047b2:	f7fb ffbb 	bl	800072c <__aeabi_ddiv>
 80047b6:	463b      	mov	r3, r7
 80047b8:	4632      	mov	r2, r6
 80047ba:	f7fb fcd5 	bl	8000168 <__aeabi_dsub>
 80047be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80047c2:	9f03      	ldr	r7, [sp, #12]
 80047c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047c8:	f7fc f936 	bl	8000a38 <__aeabi_d2iz>
 80047cc:	4604      	mov	r4, r0
 80047ce:	f7fb fe19 	bl	8000404 <__aeabi_i2d>
 80047d2:	4602      	mov	r2, r0
 80047d4:	460b      	mov	r3, r1
 80047d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047da:	f7fb fcc5 	bl	8000168 <__aeabi_dsub>
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	3430      	adds	r4, #48	; 0x30
 80047e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80047e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80047ec:	f807 4b01 	strb.w	r4, [r7], #1
 80047f0:	f7fc f8e4 	bl	80009bc <__aeabi_dcmplt>
 80047f4:	2800      	cmp	r0, #0
 80047f6:	d173      	bne.n	80048e0 <_dtoa_r+0x638>
 80047f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047fc:	2000      	movs	r0, #0
 80047fe:	4911      	ldr	r1, [pc, #68]	; (8004844 <_dtoa_r+0x59c>)
 8004800:	f7fb fcb2 	bl	8000168 <__aeabi_dsub>
 8004804:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004808:	f7fc f8d8 	bl	80009bc <__aeabi_dcmplt>
 800480c:	2800      	cmp	r0, #0
 800480e:	f040 80b6 	bne.w	800497e <_dtoa_r+0x6d6>
 8004812:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004814:	429f      	cmp	r7, r3
 8004816:	f43f af7a 	beq.w	800470e <_dtoa_r+0x466>
 800481a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800481e:	2200      	movs	r2, #0
 8004820:	4b09      	ldr	r3, [pc, #36]	; (8004848 <_dtoa_r+0x5a0>)
 8004822:	f7fb fe59 	bl	80004d8 <__aeabi_dmul>
 8004826:	2200      	movs	r2, #0
 8004828:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800482c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004830:	4b05      	ldr	r3, [pc, #20]	; (8004848 <_dtoa_r+0x5a0>)
 8004832:	f7fb fe51 	bl	80004d8 <__aeabi_dmul>
 8004836:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800483a:	e7c3      	b.n	80047c4 <_dtoa_r+0x51c>
 800483c:	08007a68 	.word	0x08007a68
 8004840:	08007a40 	.word	0x08007a40
 8004844:	3ff00000 	.word	0x3ff00000
 8004848:	40240000 	.word	0x40240000
 800484c:	401c0000 	.word	0x401c0000
 8004850:	40140000 	.word	0x40140000
 8004854:	3fe00000 	.word	0x3fe00000
 8004858:	4630      	mov	r0, r6
 800485a:	4639      	mov	r1, r7
 800485c:	f7fb fe3c 	bl	80004d8 <__aeabi_dmul>
 8004860:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004862:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004866:	9c03      	ldr	r4, [sp, #12]
 8004868:	9314      	str	r3, [sp, #80]	; 0x50
 800486a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800486e:	f7fc f8e3 	bl	8000a38 <__aeabi_d2iz>
 8004872:	9015      	str	r0, [sp, #84]	; 0x54
 8004874:	f7fb fdc6 	bl	8000404 <__aeabi_i2d>
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004880:	f7fb fc72 	bl	8000168 <__aeabi_dsub>
 8004884:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004886:	4606      	mov	r6, r0
 8004888:	3330      	adds	r3, #48	; 0x30
 800488a:	f804 3b01 	strb.w	r3, [r4], #1
 800488e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004890:	460f      	mov	r7, r1
 8004892:	429c      	cmp	r4, r3
 8004894:	f04f 0200 	mov.w	r2, #0
 8004898:	d124      	bne.n	80048e4 <_dtoa_r+0x63c>
 800489a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800489e:	4baf      	ldr	r3, [pc, #700]	; (8004b5c <_dtoa_r+0x8b4>)
 80048a0:	f7fb fc64 	bl	800016c <__adddf3>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4630      	mov	r0, r6
 80048aa:	4639      	mov	r1, r7
 80048ac:	f7fc f8a4 	bl	80009f8 <__aeabi_dcmpgt>
 80048b0:	2800      	cmp	r0, #0
 80048b2:	d163      	bne.n	800497c <_dtoa_r+0x6d4>
 80048b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80048b8:	2000      	movs	r0, #0
 80048ba:	49a8      	ldr	r1, [pc, #672]	; (8004b5c <_dtoa_r+0x8b4>)
 80048bc:	f7fb fc54 	bl	8000168 <__aeabi_dsub>
 80048c0:	4602      	mov	r2, r0
 80048c2:	460b      	mov	r3, r1
 80048c4:	4630      	mov	r0, r6
 80048c6:	4639      	mov	r1, r7
 80048c8:	f7fc f878 	bl	80009bc <__aeabi_dcmplt>
 80048cc:	2800      	cmp	r0, #0
 80048ce:	f43f af1e 	beq.w	800470e <_dtoa_r+0x466>
 80048d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80048d4:	1e7b      	subs	r3, r7, #1
 80048d6:	9314      	str	r3, [sp, #80]	; 0x50
 80048d8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80048dc:	2b30      	cmp	r3, #48	; 0x30
 80048de:	d0f8      	beq.n	80048d2 <_dtoa_r+0x62a>
 80048e0:	46c3      	mov	fp, r8
 80048e2:	e03b      	b.n	800495c <_dtoa_r+0x6b4>
 80048e4:	4b9e      	ldr	r3, [pc, #632]	; (8004b60 <_dtoa_r+0x8b8>)
 80048e6:	f7fb fdf7 	bl	80004d8 <__aeabi_dmul>
 80048ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80048ee:	e7bc      	b.n	800486a <_dtoa_r+0x5c2>
 80048f0:	9f03      	ldr	r7, [sp, #12]
 80048f2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80048f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80048fa:	4640      	mov	r0, r8
 80048fc:	4649      	mov	r1, r9
 80048fe:	f7fb ff15 	bl	800072c <__aeabi_ddiv>
 8004902:	f7fc f899 	bl	8000a38 <__aeabi_d2iz>
 8004906:	4604      	mov	r4, r0
 8004908:	f7fb fd7c 	bl	8000404 <__aeabi_i2d>
 800490c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004910:	f7fb fde2 	bl	80004d8 <__aeabi_dmul>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	4640      	mov	r0, r8
 800491a:	4649      	mov	r1, r9
 800491c:	f7fb fc24 	bl	8000168 <__aeabi_dsub>
 8004920:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004924:	f807 6b01 	strb.w	r6, [r7], #1
 8004928:	9e03      	ldr	r6, [sp, #12]
 800492a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800492e:	1bbe      	subs	r6, r7, r6
 8004930:	45b4      	cmp	ip, r6
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	d136      	bne.n	80049a6 <_dtoa_r+0x6fe>
 8004938:	f7fb fc18 	bl	800016c <__adddf3>
 800493c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004940:	4680      	mov	r8, r0
 8004942:	4689      	mov	r9, r1
 8004944:	f7fc f858 	bl	80009f8 <__aeabi_dcmpgt>
 8004948:	bb58      	cbnz	r0, 80049a2 <_dtoa_r+0x6fa>
 800494a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800494e:	4640      	mov	r0, r8
 8004950:	4649      	mov	r1, r9
 8004952:	f7fc f829 	bl	80009a8 <__aeabi_dcmpeq>
 8004956:	b108      	cbz	r0, 800495c <_dtoa_r+0x6b4>
 8004958:	07e3      	lsls	r3, r4, #31
 800495a:	d422      	bmi.n	80049a2 <_dtoa_r+0x6fa>
 800495c:	4651      	mov	r1, sl
 800495e:	4628      	mov	r0, r5
 8004960:	f000 fbc2 	bl	80050e8 <_Bfree>
 8004964:	2300      	movs	r3, #0
 8004966:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004968:	703b      	strb	r3, [r7, #0]
 800496a:	f10b 0301 	add.w	r3, fp, #1
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004972:	2b00      	cmp	r3, #0
 8004974:	f43f ace6 	beq.w	8004344 <_dtoa_r+0x9c>
 8004978:	601f      	str	r7, [r3, #0]
 800497a:	e4e3      	b.n	8004344 <_dtoa_r+0x9c>
 800497c:	4627      	mov	r7, r4
 800497e:	463b      	mov	r3, r7
 8004980:	461f      	mov	r7, r3
 8004982:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004986:	2a39      	cmp	r2, #57	; 0x39
 8004988:	d107      	bne.n	800499a <_dtoa_r+0x6f2>
 800498a:	9a03      	ldr	r2, [sp, #12]
 800498c:	429a      	cmp	r2, r3
 800498e:	d1f7      	bne.n	8004980 <_dtoa_r+0x6d8>
 8004990:	2230      	movs	r2, #48	; 0x30
 8004992:	9903      	ldr	r1, [sp, #12]
 8004994:	f108 0801 	add.w	r8, r8, #1
 8004998:	700a      	strb	r2, [r1, #0]
 800499a:	781a      	ldrb	r2, [r3, #0]
 800499c:	3201      	adds	r2, #1
 800499e:	701a      	strb	r2, [r3, #0]
 80049a0:	e79e      	b.n	80048e0 <_dtoa_r+0x638>
 80049a2:	46d8      	mov	r8, fp
 80049a4:	e7eb      	b.n	800497e <_dtoa_r+0x6d6>
 80049a6:	2200      	movs	r2, #0
 80049a8:	4b6d      	ldr	r3, [pc, #436]	; (8004b60 <_dtoa_r+0x8b8>)
 80049aa:	f7fb fd95 	bl	80004d8 <__aeabi_dmul>
 80049ae:	2200      	movs	r2, #0
 80049b0:	2300      	movs	r3, #0
 80049b2:	4680      	mov	r8, r0
 80049b4:	4689      	mov	r9, r1
 80049b6:	f7fb fff7 	bl	80009a8 <__aeabi_dcmpeq>
 80049ba:	2800      	cmp	r0, #0
 80049bc:	d09b      	beq.n	80048f6 <_dtoa_r+0x64e>
 80049be:	e7cd      	b.n	800495c <_dtoa_r+0x6b4>
 80049c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80049c2:	2a00      	cmp	r2, #0
 80049c4:	f000 80c4 	beq.w	8004b50 <_dtoa_r+0x8a8>
 80049c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80049ca:	2a01      	cmp	r2, #1
 80049cc:	f300 80a8 	bgt.w	8004b20 <_dtoa_r+0x878>
 80049d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80049d2:	2a00      	cmp	r2, #0
 80049d4:	f000 80a0 	beq.w	8004b18 <_dtoa_r+0x870>
 80049d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80049dc:	464f      	mov	r7, r9
 80049de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80049e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049e2:	2101      	movs	r1, #1
 80049e4:	441a      	add	r2, r3
 80049e6:	4628      	mov	r0, r5
 80049e8:	4499      	add	r9, r3
 80049ea:	9209      	str	r2, [sp, #36]	; 0x24
 80049ec:	f000 fc7c 	bl	80052e8 <__i2b>
 80049f0:	4606      	mov	r6, r0
 80049f2:	b15f      	cbz	r7, 8004a0c <_dtoa_r+0x764>
 80049f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	dd08      	ble.n	8004a0c <_dtoa_r+0x764>
 80049fa:	42bb      	cmp	r3, r7
 80049fc:	bfa8      	it	ge
 80049fe:	463b      	movge	r3, r7
 8004a00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a02:	eba9 0903 	sub.w	r9, r9, r3
 8004a06:	1aff      	subs	r7, r7, r3
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a0e:	b1f3      	cbz	r3, 8004a4e <_dtoa_r+0x7a6>
 8004a10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 80a0 	beq.w	8004b58 <_dtoa_r+0x8b0>
 8004a18:	2c00      	cmp	r4, #0
 8004a1a:	dd10      	ble.n	8004a3e <_dtoa_r+0x796>
 8004a1c:	4631      	mov	r1, r6
 8004a1e:	4622      	mov	r2, r4
 8004a20:	4628      	mov	r0, r5
 8004a22:	f000 fd1f 	bl	8005464 <__pow5mult>
 8004a26:	4652      	mov	r2, sl
 8004a28:	4601      	mov	r1, r0
 8004a2a:	4606      	mov	r6, r0
 8004a2c:	4628      	mov	r0, r5
 8004a2e:	f000 fc71 	bl	8005314 <__multiply>
 8004a32:	4680      	mov	r8, r0
 8004a34:	4651      	mov	r1, sl
 8004a36:	4628      	mov	r0, r5
 8004a38:	f000 fb56 	bl	80050e8 <_Bfree>
 8004a3c:	46c2      	mov	sl, r8
 8004a3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a40:	1b1a      	subs	r2, r3, r4
 8004a42:	d004      	beq.n	8004a4e <_dtoa_r+0x7a6>
 8004a44:	4651      	mov	r1, sl
 8004a46:	4628      	mov	r0, r5
 8004a48:	f000 fd0c 	bl	8005464 <__pow5mult>
 8004a4c:	4682      	mov	sl, r0
 8004a4e:	2101      	movs	r1, #1
 8004a50:	4628      	mov	r0, r5
 8004a52:	f000 fc49 	bl	80052e8 <__i2b>
 8004a56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a58:	4604      	mov	r4, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f340 8082 	ble.w	8004b64 <_dtoa_r+0x8bc>
 8004a60:	461a      	mov	r2, r3
 8004a62:	4601      	mov	r1, r0
 8004a64:	4628      	mov	r0, r5
 8004a66:	f000 fcfd 	bl	8005464 <__pow5mult>
 8004a6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a6c:	4604      	mov	r4, r0
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	dd7b      	ble.n	8004b6a <_dtoa_r+0x8c2>
 8004a72:	f04f 0800 	mov.w	r8, #0
 8004a76:	6923      	ldr	r3, [r4, #16]
 8004a78:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004a7c:	6918      	ldr	r0, [r3, #16]
 8004a7e:	f000 fbe5 	bl	800524c <__hi0bits>
 8004a82:	f1c0 0020 	rsb	r0, r0, #32
 8004a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a88:	4418      	add	r0, r3
 8004a8a:	f010 001f 	ands.w	r0, r0, #31
 8004a8e:	f000 8092 	beq.w	8004bb6 <_dtoa_r+0x90e>
 8004a92:	f1c0 0320 	rsb	r3, r0, #32
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	f340 8085 	ble.w	8004ba6 <_dtoa_r+0x8fe>
 8004a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a9e:	f1c0 001c 	rsb	r0, r0, #28
 8004aa2:	4403      	add	r3, r0
 8004aa4:	4481      	add	r9, r0
 8004aa6:	4407      	add	r7, r0
 8004aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8004aaa:	f1b9 0f00 	cmp.w	r9, #0
 8004aae:	dd05      	ble.n	8004abc <_dtoa_r+0x814>
 8004ab0:	4651      	mov	r1, sl
 8004ab2:	464a      	mov	r2, r9
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	f000 fd2f 	bl	8005518 <__lshift>
 8004aba:	4682      	mov	sl, r0
 8004abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	dd05      	ble.n	8004ace <_dtoa_r+0x826>
 8004ac2:	4621      	mov	r1, r4
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	f000 fd26 	bl	8005518 <__lshift>
 8004acc:	4604      	mov	r4, r0
 8004ace:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d072      	beq.n	8004bba <_dtoa_r+0x912>
 8004ad4:	4621      	mov	r1, r4
 8004ad6:	4650      	mov	r0, sl
 8004ad8:	f000 fd8a 	bl	80055f0 <__mcmp>
 8004adc:	2800      	cmp	r0, #0
 8004ade:	da6c      	bge.n	8004bba <_dtoa_r+0x912>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	4651      	mov	r1, sl
 8004ae4:	220a      	movs	r2, #10
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	f000 fb20 	bl	800512c <__multadd>
 8004aec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004aee:	4682      	mov	sl, r0
 8004af0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 81ac 	beq.w	8004e52 <_dtoa_r+0xbaa>
 8004afa:	2300      	movs	r3, #0
 8004afc:	4631      	mov	r1, r6
 8004afe:	220a      	movs	r2, #10
 8004b00:	4628      	mov	r0, r5
 8004b02:	f000 fb13 	bl	800512c <__multadd>
 8004b06:	9b06      	ldr	r3, [sp, #24]
 8004b08:	4606      	mov	r6, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f300 8093 	bgt.w	8004c36 <_dtoa_r+0x98e>
 8004b10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	dc59      	bgt.n	8004bca <_dtoa_r+0x922>
 8004b16:	e08e      	b.n	8004c36 <_dtoa_r+0x98e>
 8004b18:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004b1a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004b1e:	e75d      	b.n	80049dc <_dtoa_r+0x734>
 8004b20:	9b08      	ldr	r3, [sp, #32]
 8004b22:	1e5c      	subs	r4, r3, #1
 8004b24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b26:	42a3      	cmp	r3, r4
 8004b28:	bfbf      	itttt	lt
 8004b2a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004b2c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8004b2e:	1ae3      	sublt	r3, r4, r3
 8004b30:	18d2      	addlt	r2, r2, r3
 8004b32:	bfa8      	it	ge
 8004b34:	1b1c      	subge	r4, r3, r4
 8004b36:	9b08      	ldr	r3, [sp, #32]
 8004b38:	bfbe      	ittt	lt
 8004b3a:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004b3c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8004b3e:	2400      	movlt	r4, #0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	bfb5      	itete	lt
 8004b44:	eba9 0703 	sublt.w	r7, r9, r3
 8004b48:	464f      	movge	r7, r9
 8004b4a:	2300      	movlt	r3, #0
 8004b4c:	9b08      	ldrge	r3, [sp, #32]
 8004b4e:	e747      	b.n	80049e0 <_dtoa_r+0x738>
 8004b50:	464f      	mov	r7, r9
 8004b52:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004b54:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004b56:	e74c      	b.n	80049f2 <_dtoa_r+0x74a>
 8004b58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b5a:	e773      	b.n	8004a44 <_dtoa_r+0x79c>
 8004b5c:	3fe00000 	.word	0x3fe00000
 8004b60:	40240000 	.word	0x40240000
 8004b64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	dc18      	bgt.n	8004b9c <_dtoa_r+0x8f4>
 8004b6a:	9b04      	ldr	r3, [sp, #16]
 8004b6c:	b9b3      	cbnz	r3, 8004b9c <_dtoa_r+0x8f4>
 8004b6e:	9b05      	ldr	r3, [sp, #20]
 8004b70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b74:	b993      	cbnz	r3, 8004b9c <_dtoa_r+0x8f4>
 8004b76:	9b05      	ldr	r3, [sp, #20]
 8004b78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b7c:	0d1b      	lsrs	r3, r3, #20
 8004b7e:	051b      	lsls	r3, r3, #20
 8004b80:	b17b      	cbz	r3, 8004ba2 <_dtoa_r+0x8fa>
 8004b82:	f04f 0801 	mov.w	r8, #1
 8004b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b88:	f109 0901 	add.w	r9, r9, #1
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f47f af6f 	bne.w	8004a76 <_dtoa_r+0x7ce>
 8004b98:	2001      	movs	r0, #1
 8004b9a:	e774      	b.n	8004a86 <_dtoa_r+0x7de>
 8004b9c:	f04f 0800 	mov.w	r8, #0
 8004ba0:	e7f6      	b.n	8004b90 <_dtoa_r+0x8e8>
 8004ba2:	4698      	mov	r8, r3
 8004ba4:	e7f4      	b.n	8004b90 <_dtoa_r+0x8e8>
 8004ba6:	d080      	beq.n	8004aaa <_dtoa_r+0x802>
 8004ba8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004baa:	331c      	adds	r3, #28
 8004bac:	441a      	add	r2, r3
 8004bae:	4499      	add	r9, r3
 8004bb0:	441f      	add	r7, r3
 8004bb2:	9209      	str	r2, [sp, #36]	; 0x24
 8004bb4:	e779      	b.n	8004aaa <_dtoa_r+0x802>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	e7f6      	b.n	8004ba8 <_dtoa_r+0x900>
 8004bba:	9b08      	ldr	r3, [sp, #32]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	dc34      	bgt.n	8004c2a <_dtoa_r+0x982>
 8004bc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	dd31      	ble.n	8004c2a <_dtoa_r+0x982>
 8004bc6:	9b08      	ldr	r3, [sp, #32]
 8004bc8:	9306      	str	r3, [sp, #24]
 8004bca:	9b06      	ldr	r3, [sp, #24]
 8004bcc:	b963      	cbnz	r3, 8004be8 <_dtoa_r+0x940>
 8004bce:	4621      	mov	r1, r4
 8004bd0:	2205      	movs	r2, #5
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	f000 faaa 	bl	800512c <__multadd>
 8004bd8:	4601      	mov	r1, r0
 8004bda:	4604      	mov	r4, r0
 8004bdc:	4650      	mov	r0, sl
 8004bde:	f000 fd07 	bl	80055f0 <__mcmp>
 8004be2:	2800      	cmp	r0, #0
 8004be4:	f73f adbf 	bgt.w	8004766 <_dtoa_r+0x4be>
 8004be8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004bea:	9f03      	ldr	r7, [sp, #12]
 8004bec:	ea6f 0b03 	mvn.w	fp, r3
 8004bf0:	f04f 0800 	mov.w	r8, #0
 8004bf4:	4621      	mov	r1, r4
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	f000 fa76 	bl	80050e8 <_Bfree>
 8004bfc:	2e00      	cmp	r6, #0
 8004bfe:	f43f aead 	beq.w	800495c <_dtoa_r+0x6b4>
 8004c02:	f1b8 0f00 	cmp.w	r8, #0
 8004c06:	d005      	beq.n	8004c14 <_dtoa_r+0x96c>
 8004c08:	45b0      	cmp	r8, r6
 8004c0a:	d003      	beq.n	8004c14 <_dtoa_r+0x96c>
 8004c0c:	4641      	mov	r1, r8
 8004c0e:	4628      	mov	r0, r5
 8004c10:	f000 fa6a 	bl	80050e8 <_Bfree>
 8004c14:	4631      	mov	r1, r6
 8004c16:	4628      	mov	r0, r5
 8004c18:	f000 fa66 	bl	80050e8 <_Bfree>
 8004c1c:	e69e      	b.n	800495c <_dtoa_r+0x6b4>
 8004c1e:	2400      	movs	r4, #0
 8004c20:	4626      	mov	r6, r4
 8004c22:	e7e1      	b.n	8004be8 <_dtoa_r+0x940>
 8004c24:	46c3      	mov	fp, r8
 8004c26:	4626      	mov	r6, r4
 8004c28:	e59d      	b.n	8004766 <_dtoa_r+0x4be>
 8004c2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 80c8 	beq.w	8004dc2 <_dtoa_r+0xb1a>
 8004c32:	9b08      	ldr	r3, [sp, #32]
 8004c34:	9306      	str	r3, [sp, #24]
 8004c36:	2f00      	cmp	r7, #0
 8004c38:	dd05      	ble.n	8004c46 <_dtoa_r+0x99e>
 8004c3a:	4631      	mov	r1, r6
 8004c3c:	463a      	mov	r2, r7
 8004c3e:	4628      	mov	r0, r5
 8004c40:	f000 fc6a 	bl	8005518 <__lshift>
 8004c44:	4606      	mov	r6, r0
 8004c46:	f1b8 0f00 	cmp.w	r8, #0
 8004c4a:	d05b      	beq.n	8004d04 <_dtoa_r+0xa5c>
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	6871      	ldr	r1, [r6, #4]
 8004c50:	f000 fa0a 	bl	8005068 <_Balloc>
 8004c54:	4607      	mov	r7, r0
 8004c56:	b928      	cbnz	r0, 8004c64 <_dtoa_r+0x9bc>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004c5e:	4b81      	ldr	r3, [pc, #516]	; (8004e64 <_dtoa_r+0xbbc>)
 8004c60:	f7ff bb36 	b.w	80042d0 <_dtoa_r+0x28>
 8004c64:	6932      	ldr	r2, [r6, #16]
 8004c66:	f106 010c 	add.w	r1, r6, #12
 8004c6a:	3202      	adds	r2, #2
 8004c6c:	0092      	lsls	r2, r2, #2
 8004c6e:	300c      	adds	r0, #12
 8004c70:	f002 f94a 	bl	8006f08 <memcpy>
 8004c74:	2201      	movs	r2, #1
 8004c76:	4639      	mov	r1, r7
 8004c78:	4628      	mov	r0, r5
 8004c7a:	f000 fc4d 	bl	8005518 <__lshift>
 8004c7e:	46b0      	mov	r8, r6
 8004c80:	4606      	mov	r6, r0
 8004c82:	9b03      	ldr	r3, [sp, #12]
 8004c84:	9a03      	ldr	r2, [sp, #12]
 8004c86:	3301      	adds	r3, #1
 8004c88:	9308      	str	r3, [sp, #32]
 8004c8a:	9b06      	ldr	r3, [sp, #24]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c90:	9b04      	ldr	r3, [sp, #16]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	930a      	str	r3, [sp, #40]	; 0x28
 8004c98:	9b08      	ldr	r3, [sp, #32]
 8004c9a:	4621      	mov	r1, r4
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	4650      	mov	r0, sl
 8004ca0:	9304      	str	r3, [sp, #16]
 8004ca2:	f7ff fa77 	bl	8004194 <quorem>
 8004ca6:	4641      	mov	r1, r8
 8004ca8:	9006      	str	r0, [sp, #24]
 8004caa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004cae:	4650      	mov	r0, sl
 8004cb0:	f000 fc9e 	bl	80055f0 <__mcmp>
 8004cb4:	4632      	mov	r2, r6
 8004cb6:	9009      	str	r0, [sp, #36]	; 0x24
 8004cb8:	4621      	mov	r1, r4
 8004cba:	4628      	mov	r0, r5
 8004cbc:	f000 fcb4 	bl	8005628 <__mdiff>
 8004cc0:	68c2      	ldr	r2, [r0, #12]
 8004cc2:	4607      	mov	r7, r0
 8004cc4:	bb02      	cbnz	r2, 8004d08 <_dtoa_r+0xa60>
 8004cc6:	4601      	mov	r1, r0
 8004cc8:	4650      	mov	r0, sl
 8004cca:	f000 fc91 	bl	80055f0 <__mcmp>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	4639      	mov	r1, r7
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	920c      	str	r2, [sp, #48]	; 0x30
 8004cd6:	f000 fa07 	bl	80050e8 <_Bfree>
 8004cda:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004cdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004cde:	9f08      	ldr	r7, [sp, #32]
 8004ce0:	ea43 0102 	orr.w	r1, r3, r2
 8004ce4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ce6:	4319      	orrs	r1, r3
 8004ce8:	d110      	bne.n	8004d0c <_dtoa_r+0xa64>
 8004cea:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004cee:	d029      	beq.n	8004d44 <_dtoa_r+0xa9c>
 8004cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	dd02      	ble.n	8004cfc <_dtoa_r+0xa54>
 8004cf6:	9b06      	ldr	r3, [sp, #24]
 8004cf8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004cfc:	9b04      	ldr	r3, [sp, #16]
 8004cfe:	f883 9000 	strb.w	r9, [r3]
 8004d02:	e777      	b.n	8004bf4 <_dtoa_r+0x94c>
 8004d04:	4630      	mov	r0, r6
 8004d06:	e7ba      	b.n	8004c7e <_dtoa_r+0x9d6>
 8004d08:	2201      	movs	r2, #1
 8004d0a:	e7e1      	b.n	8004cd0 <_dtoa_r+0xa28>
 8004d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	db04      	blt.n	8004d1c <_dtoa_r+0xa74>
 8004d12:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004d14:	430b      	orrs	r3, r1
 8004d16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004d18:	430b      	orrs	r3, r1
 8004d1a:	d120      	bne.n	8004d5e <_dtoa_r+0xab6>
 8004d1c:	2a00      	cmp	r2, #0
 8004d1e:	dded      	ble.n	8004cfc <_dtoa_r+0xa54>
 8004d20:	4651      	mov	r1, sl
 8004d22:	2201      	movs	r2, #1
 8004d24:	4628      	mov	r0, r5
 8004d26:	f000 fbf7 	bl	8005518 <__lshift>
 8004d2a:	4621      	mov	r1, r4
 8004d2c:	4682      	mov	sl, r0
 8004d2e:	f000 fc5f 	bl	80055f0 <__mcmp>
 8004d32:	2800      	cmp	r0, #0
 8004d34:	dc03      	bgt.n	8004d3e <_dtoa_r+0xa96>
 8004d36:	d1e1      	bne.n	8004cfc <_dtoa_r+0xa54>
 8004d38:	f019 0f01 	tst.w	r9, #1
 8004d3c:	d0de      	beq.n	8004cfc <_dtoa_r+0xa54>
 8004d3e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004d42:	d1d8      	bne.n	8004cf6 <_dtoa_r+0xa4e>
 8004d44:	2339      	movs	r3, #57	; 0x39
 8004d46:	9a04      	ldr	r2, [sp, #16]
 8004d48:	7013      	strb	r3, [r2, #0]
 8004d4a:	463b      	mov	r3, r7
 8004d4c:	461f      	mov	r7, r3
 8004d4e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004d52:	3b01      	subs	r3, #1
 8004d54:	2a39      	cmp	r2, #57	; 0x39
 8004d56:	d06b      	beq.n	8004e30 <_dtoa_r+0xb88>
 8004d58:	3201      	adds	r2, #1
 8004d5a:	701a      	strb	r2, [r3, #0]
 8004d5c:	e74a      	b.n	8004bf4 <_dtoa_r+0x94c>
 8004d5e:	2a00      	cmp	r2, #0
 8004d60:	dd07      	ble.n	8004d72 <_dtoa_r+0xaca>
 8004d62:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004d66:	d0ed      	beq.n	8004d44 <_dtoa_r+0xa9c>
 8004d68:	9a04      	ldr	r2, [sp, #16]
 8004d6a:	f109 0301 	add.w	r3, r9, #1
 8004d6e:	7013      	strb	r3, [r2, #0]
 8004d70:	e740      	b.n	8004bf4 <_dtoa_r+0x94c>
 8004d72:	9b08      	ldr	r3, [sp, #32]
 8004d74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d76:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d042      	beq.n	8004e04 <_dtoa_r+0xb5c>
 8004d7e:	4651      	mov	r1, sl
 8004d80:	2300      	movs	r3, #0
 8004d82:	220a      	movs	r2, #10
 8004d84:	4628      	mov	r0, r5
 8004d86:	f000 f9d1 	bl	800512c <__multadd>
 8004d8a:	45b0      	cmp	r8, r6
 8004d8c:	4682      	mov	sl, r0
 8004d8e:	f04f 0300 	mov.w	r3, #0
 8004d92:	f04f 020a 	mov.w	r2, #10
 8004d96:	4641      	mov	r1, r8
 8004d98:	4628      	mov	r0, r5
 8004d9a:	d107      	bne.n	8004dac <_dtoa_r+0xb04>
 8004d9c:	f000 f9c6 	bl	800512c <__multadd>
 8004da0:	4680      	mov	r8, r0
 8004da2:	4606      	mov	r6, r0
 8004da4:	9b08      	ldr	r3, [sp, #32]
 8004da6:	3301      	adds	r3, #1
 8004da8:	9308      	str	r3, [sp, #32]
 8004daa:	e775      	b.n	8004c98 <_dtoa_r+0x9f0>
 8004dac:	f000 f9be 	bl	800512c <__multadd>
 8004db0:	4631      	mov	r1, r6
 8004db2:	4680      	mov	r8, r0
 8004db4:	2300      	movs	r3, #0
 8004db6:	220a      	movs	r2, #10
 8004db8:	4628      	mov	r0, r5
 8004dba:	f000 f9b7 	bl	800512c <__multadd>
 8004dbe:	4606      	mov	r6, r0
 8004dc0:	e7f0      	b.n	8004da4 <_dtoa_r+0xafc>
 8004dc2:	9b08      	ldr	r3, [sp, #32]
 8004dc4:	9306      	str	r3, [sp, #24]
 8004dc6:	9f03      	ldr	r7, [sp, #12]
 8004dc8:	4621      	mov	r1, r4
 8004dca:	4650      	mov	r0, sl
 8004dcc:	f7ff f9e2 	bl	8004194 <quorem>
 8004dd0:	9b03      	ldr	r3, [sp, #12]
 8004dd2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004dd6:	f807 9b01 	strb.w	r9, [r7], #1
 8004dda:	1afa      	subs	r2, r7, r3
 8004ddc:	9b06      	ldr	r3, [sp, #24]
 8004dde:	4293      	cmp	r3, r2
 8004de0:	dd07      	ble.n	8004df2 <_dtoa_r+0xb4a>
 8004de2:	4651      	mov	r1, sl
 8004de4:	2300      	movs	r3, #0
 8004de6:	220a      	movs	r2, #10
 8004de8:	4628      	mov	r0, r5
 8004dea:	f000 f99f 	bl	800512c <__multadd>
 8004dee:	4682      	mov	sl, r0
 8004df0:	e7ea      	b.n	8004dc8 <_dtoa_r+0xb20>
 8004df2:	9b06      	ldr	r3, [sp, #24]
 8004df4:	f04f 0800 	mov.w	r8, #0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	bfcc      	ite	gt
 8004dfc:	461f      	movgt	r7, r3
 8004dfe:	2701      	movle	r7, #1
 8004e00:	9b03      	ldr	r3, [sp, #12]
 8004e02:	441f      	add	r7, r3
 8004e04:	4651      	mov	r1, sl
 8004e06:	2201      	movs	r2, #1
 8004e08:	4628      	mov	r0, r5
 8004e0a:	f000 fb85 	bl	8005518 <__lshift>
 8004e0e:	4621      	mov	r1, r4
 8004e10:	4682      	mov	sl, r0
 8004e12:	f000 fbed 	bl	80055f0 <__mcmp>
 8004e16:	2800      	cmp	r0, #0
 8004e18:	dc97      	bgt.n	8004d4a <_dtoa_r+0xaa2>
 8004e1a:	d102      	bne.n	8004e22 <_dtoa_r+0xb7a>
 8004e1c:	f019 0f01 	tst.w	r9, #1
 8004e20:	d193      	bne.n	8004d4a <_dtoa_r+0xaa2>
 8004e22:	463b      	mov	r3, r7
 8004e24:	461f      	mov	r7, r3
 8004e26:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e2a:	2a30      	cmp	r2, #48	; 0x30
 8004e2c:	d0fa      	beq.n	8004e24 <_dtoa_r+0xb7c>
 8004e2e:	e6e1      	b.n	8004bf4 <_dtoa_r+0x94c>
 8004e30:	9a03      	ldr	r2, [sp, #12]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d18a      	bne.n	8004d4c <_dtoa_r+0xaa4>
 8004e36:	2331      	movs	r3, #49	; 0x31
 8004e38:	f10b 0b01 	add.w	fp, fp, #1
 8004e3c:	e797      	b.n	8004d6e <_dtoa_r+0xac6>
 8004e3e:	4b0a      	ldr	r3, [pc, #40]	; (8004e68 <_dtoa_r+0xbc0>)
 8004e40:	f7ff ba9f 	b.w	8004382 <_dtoa_r+0xda>
 8004e44:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f47f aa77 	bne.w	800433a <_dtoa_r+0x92>
 8004e4c:	4b07      	ldr	r3, [pc, #28]	; (8004e6c <_dtoa_r+0xbc4>)
 8004e4e:	f7ff ba98 	b.w	8004382 <_dtoa_r+0xda>
 8004e52:	9b06      	ldr	r3, [sp, #24]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	dcb6      	bgt.n	8004dc6 <_dtoa_r+0xb1e>
 8004e58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	f73f aeb5 	bgt.w	8004bca <_dtoa_r+0x922>
 8004e60:	e7b1      	b.n	8004dc6 <_dtoa_r+0xb1e>
 8004e62:	bf00      	nop
 8004e64:	080079cf 	.word	0x080079cf
 8004e68:	0800792a 	.word	0x0800792a
 8004e6c:	08007953 	.word	0x08007953

08004e70 <_free_r>:
 8004e70:	b538      	push	{r3, r4, r5, lr}
 8004e72:	4605      	mov	r5, r0
 8004e74:	2900      	cmp	r1, #0
 8004e76:	d040      	beq.n	8004efa <_free_r+0x8a>
 8004e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e7c:	1f0c      	subs	r4, r1, #4
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	bfb8      	it	lt
 8004e82:	18e4      	addlt	r4, r4, r3
 8004e84:	f000 f8e4 	bl	8005050 <__malloc_lock>
 8004e88:	4a1c      	ldr	r2, [pc, #112]	; (8004efc <_free_r+0x8c>)
 8004e8a:	6813      	ldr	r3, [r2, #0]
 8004e8c:	b933      	cbnz	r3, 8004e9c <_free_r+0x2c>
 8004e8e:	6063      	str	r3, [r4, #4]
 8004e90:	6014      	str	r4, [r2, #0]
 8004e92:	4628      	mov	r0, r5
 8004e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e98:	f000 b8e0 	b.w	800505c <__malloc_unlock>
 8004e9c:	42a3      	cmp	r3, r4
 8004e9e:	d908      	bls.n	8004eb2 <_free_r+0x42>
 8004ea0:	6820      	ldr	r0, [r4, #0]
 8004ea2:	1821      	adds	r1, r4, r0
 8004ea4:	428b      	cmp	r3, r1
 8004ea6:	bf01      	itttt	eq
 8004ea8:	6819      	ldreq	r1, [r3, #0]
 8004eaa:	685b      	ldreq	r3, [r3, #4]
 8004eac:	1809      	addeq	r1, r1, r0
 8004eae:	6021      	streq	r1, [r4, #0]
 8004eb0:	e7ed      	b.n	8004e8e <_free_r+0x1e>
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	b10b      	cbz	r3, 8004ebc <_free_r+0x4c>
 8004eb8:	42a3      	cmp	r3, r4
 8004eba:	d9fa      	bls.n	8004eb2 <_free_r+0x42>
 8004ebc:	6811      	ldr	r1, [r2, #0]
 8004ebe:	1850      	adds	r0, r2, r1
 8004ec0:	42a0      	cmp	r0, r4
 8004ec2:	d10b      	bne.n	8004edc <_free_r+0x6c>
 8004ec4:	6820      	ldr	r0, [r4, #0]
 8004ec6:	4401      	add	r1, r0
 8004ec8:	1850      	adds	r0, r2, r1
 8004eca:	4283      	cmp	r3, r0
 8004ecc:	6011      	str	r1, [r2, #0]
 8004ece:	d1e0      	bne.n	8004e92 <_free_r+0x22>
 8004ed0:	6818      	ldr	r0, [r3, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	4408      	add	r0, r1
 8004ed6:	6010      	str	r0, [r2, #0]
 8004ed8:	6053      	str	r3, [r2, #4]
 8004eda:	e7da      	b.n	8004e92 <_free_r+0x22>
 8004edc:	d902      	bls.n	8004ee4 <_free_r+0x74>
 8004ede:	230c      	movs	r3, #12
 8004ee0:	602b      	str	r3, [r5, #0]
 8004ee2:	e7d6      	b.n	8004e92 <_free_r+0x22>
 8004ee4:	6820      	ldr	r0, [r4, #0]
 8004ee6:	1821      	adds	r1, r4, r0
 8004ee8:	428b      	cmp	r3, r1
 8004eea:	bf01      	itttt	eq
 8004eec:	6819      	ldreq	r1, [r3, #0]
 8004eee:	685b      	ldreq	r3, [r3, #4]
 8004ef0:	1809      	addeq	r1, r1, r0
 8004ef2:	6021      	streq	r1, [r4, #0]
 8004ef4:	6063      	str	r3, [r4, #4]
 8004ef6:	6054      	str	r4, [r2, #4]
 8004ef8:	e7cb      	b.n	8004e92 <_free_r+0x22>
 8004efa:	bd38      	pop	{r3, r4, r5, pc}
 8004efc:	200003b8 	.word	0x200003b8

08004f00 <malloc>:
 8004f00:	4b02      	ldr	r3, [pc, #8]	; (8004f0c <malloc+0xc>)
 8004f02:	4601      	mov	r1, r0
 8004f04:	6818      	ldr	r0, [r3, #0]
 8004f06:	f000 b823 	b.w	8004f50 <_malloc_r>
 8004f0a:	bf00      	nop
 8004f0c:	20000064 	.word	0x20000064

08004f10 <sbrk_aligned>:
 8004f10:	b570      	push	{r4, r5, r6, lr}
 8004f12:	4e0e      	ldr	r6, [pc, #56]	; (8004f4c <sbrk_aligned+0x3c>)
 8004f14:	460c      	mov	r4, r1
 8004f16:	6831      	ldr	r1, [r6, #0]
 8004f18:	4605      	mov	r5, r0
 8004f1a:	b911      	cbnz	r1, 8004f22 <sbrk_aligned+0x12>
 8004f1c:	f001 ffe4 	bl	8006ee8 <_sbrk_r>
 8004f20:	6030      	str	r0, [r6, #0]
 8004f22:	4621      	mov	r1, r4
 8004f24:	4628      	mov	r0, r5
 8004f26:	f001 ffdf 	bl	8006ee8 <_sbrk_r>
 8004f2a:	1c43      	adds	r3, r0, #1
 8004f2c:	d00a      	beq.n	8004f44 <sbrk_aligned+0x34>
 8004f2e:	1cc4      	adds	r4, r0, #3
 8004f30:	f024 0403 	bic.w	r4, r4, #3
 8004f34:	42a0      	cmp	r0, r4
 8004f36:	d007      	beq.n	8004f48 <sbrk_aligned+0x38>
 8004f38:	1a21      	subs	r1, r4, r0
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	f001 ffd4 	bl	8006ee8 <_sbrk_r>
 8004f40:	3001      	adds	r0, #1
 8004f42:	d101      	bne.n	8004f48 <sbrk_aligned+0x38>
 8004f44:	f04f 34ff 	mov.w	r4, #4294967295
 8004f48:	4620      	mov	r0, r4
 8004f4a:	bd70      	pop	{r4, r5, r6, pc}
 8004f4c:	200003bc 	.word	0x200003bc

08004f50 <_malloc_r>:
 8004f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f54:	1ccd      	adds	r5, r1, #3
 8004f56:	f025 0503 	bic.w	r5, r5, #3
 8004f5a:	3508      	adds	r5, #8
 8004f5c:	2d0c      	cmp	r5, #12
 8004f5e:	bf38      	it	cc
 8004f60:	250c      	movcc	r5, #12
 8004f62:	2d00      	cmp	r5, #0
 8004f64:	4607      	mov	r7, r0
 8004f66:	db01      	blt.n	8004f6c <_malloc_r+0x1c>
 8004f68:	42a9      	cmp	r1, r5
 8004f6a:	d905      	bls.n	8004f78 <_malloc_r+0x28>
 8004f6c:	230c      	movs	r3, #12
 8004f6e:	2600      	movs	r6, #0
 8004f70:	603b      	str	r3, [r7, #0]
 8004f72:	4630      	mov	r0, r6
 8004f74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f78:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800504c <_malloc_r+0xfc>
 8004f7c:	f000 f868 	bl	8005050 <__malloc_lock>
 8004f80:	f8d8 3000 	ldr.w	r3, [r8]
 8004f84:	461c      	mov	r4, r3
 8004f86:	bb5c      	cbnz	r4, 8004fe0 <_malloc_r+0x90>
 8004f88:	4629      	mov	r1, r5
 8004f8a:	4638      	mov	r0, r7
 8004f8c:	f7ff ffc0 	bl	8004f10 <sbrk_aligned>
 8004f90:	1c43      	adds	r3, r0, #1
 8004f92:	4604      	mov	r4, r0
 8004f94:	d155      	bne.n	8005042 <_malloc_r+0xf2>
 8004f96:	f8d8 4000 	ldr.w	r4, [r8]
 8004f9a:	4626      	mov	r6, r4
 8004f9c:	2e00      	cmp	r6, #0
 8004f9e:	d145      	bne.n	800502c <_malloc_r+0xdc>
 8004fa0:	2c00      	cmp	r4, #0
 8004fa2:	d048      	beq.n	8005036 <_malloc_r+0xe6>
 8004fa4:	6823      	ldr	r3, [r4, #0]
 8004fa6:	4631      	mov	r1, r6
 8004fa8:	4638      	mov	r0, r7
 8004faa:	eb04 0903 	add.w	r9, r4, r3
 8004fae:	f001 ff9b 	bl	8006ee8 <_sbrk_r>
 8004fb2:	4581      	cmp	r9, r0
 8004fb4:	d13f      	bne.n	8005036 <_malloc_r+0xe6>
 8004fb6:	6821      	ldr	r1, [r4, #0]
 8004fb8:	4638      	mov	r0, r7
 8004fba:	1a6d      	subs	r5, r5, r1
 8004fbc:	4629      	mov	r1, r5
 8004fbe:	f7ff ffa7 	bl	8004f10 <sbrk_aligned>
 8004fc2:	3001      	adds	r0, #1
 8004fc4:	d037      	beq.n	8005036 <_malloc_r+0xe6>
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	442b      	add	r3, r5
 8004fca:	6023      	str	r3, [r4, #0]
 8004fcc:	f8d8 3000 	ldr.w	r3, [r8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d038      	beq.n	8005046 <_malloc_r+0xf6>
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	42a2      	cmp	r2, r4
 8004fd8:	d12b      	bne.n	8005032 <_malloc_r+0xe2>
 8004fda:	2200      	movs	r2, #0
 8004fdc:	605a      	str	r2, [r3, #4]
 8004fde:	e00f      	b.n	8005000 <_malloc_r+0xb0>
 8004fe0:	6822      	ldr	r2, [r4, #0]
 8004fe2:	1b52      	subs	r2, r2, r5
 8004fe4:	d41f      	bmi.n	8005026 <_malloc_r+0xd6>
 8004fe6:	2a0b      	cmp	r2, #11
 8004fe8:	d917      	bls.n	800501a <_malloc_r+0xca>
 8004fea:	1961      	adds	r1, r4, r5
 8004fec:	42a3      	cmp	r3, r4
 8004fee:	6025      	str	r5, [r4, #0]
 8004ff0:	bf18      	it	ne
 8004ff2:	6059      	strne	r1, [r3, #4]
 8004ff4:	6863      	ldr	r3, [r4, #4]
 8004ff6:	bf08      	it	eq
 8004ff8:	f8c8 1000 	streq.w	r1, [r8]
 8004ffc:	5162      	str	r2, [r4, r5]
 8004ffe:	604b      	str	r3, [r1, #4]
 8005000:	4638      	mov	r0, r7
 8005002:	f104 060b 	add.w	r6, r4, #11
 8005006:	f000 f829 	bl	800505c <__malloc_unlock>
 800500a:	f026 0607 	bic.w	r6, r6, #7
 800500e:	1d23      	adds	r3, r4, #4
 8005010:	1af2      	subs	r2, r6, r3
 8005012:	d0ae      	beq.n	8004f72 <_malloc_r+0x22>
 8005014:	1b9b      	subs	r3, r3, r6
 8005016:	50a3      	str	r3, [r4, r2]
 8005018:	e7ab      	b.n	8004f72 <_malloc_r+0x22>
 800501a:	42a3      	cmp	r3, r4
 800501c:	6862      	ldr	r2, [r4, #4]
 800501e:	d1dd      	bne.n	8004fdc <_malloc_r+0x8c>
 8005020:	f8c8 2000 	str.w	r2, [r8]
 8005024:	e7ec      	b.n	8005000 <_malloc_r+0xb0>
 8005026:	4623      	mov	r3, r4
 8005028:	6864      	ldr	r4, [r4, #4]
 800502a:	e7ac      	b.n	8004f86 <_malloc_r+0x36>
 800502c:	4634      	mov	r4, r6
 800502e:	6876      	ldr	r6, [r6, #4]
 8005030:	e7b4      	b.n	8004f9c <_malloc_r+0x4c>
 8005032:	4613      	mov	r3, r2
 8005034:	e7cc      	b.n	8004fd0 <_malloc_r+0x80>
 8005036:	230c      	movs	r3, #12
 8005038:	4638      	mov	r0, r7
 800503a:	603b      	str	r3, [r7, #0]
 800503c:	f000 f80e 	bl	800505c <__malloc_unlock>
 8005040:	e797      	b.n	8004f72 <_malloc_r+0x22>
 8005042:	6025      	str	r5, [r4, #0]
 8005044:	e7dc      	b.n	8005000 <_malloc_r+0xb0>
 8005046:	605b      	str	r3, [r3, #4]
 8005048:	deff      	udf	#255	; 0xff
 800504a:	bf00      	nop
 800504c:	200003b8 	.word	0x200003b8

08005050 <__malloc_lock>:
 8005050:	4801      	ldr	r0, [pc, #4]	; (8005058 <__malloc_lock+0x8>)
 8005052:	f7ff b88a 	b.w	800416a <__retarget_lock_acquire_recursive>
 8005056:	bf00      	nop
 8005058:	200003b4 	.word	0x200003b4

0800505c <__malloc_unlock>:
 800505c:	4801      	ldr	r0, [pc, #4]	; (8005064 <__malloc_unlock+0x8>)
 800505e:	f7ff b885 	b.w	800416c <__retarget_lock_release_recursive>
 8005062:	bf00      	nop
 8005064:	200003b4 	.word	0x200003b4

08005068 <_Balloc>:
 8005068:	b570      	push	{r4, r5, r6, lr}
 800506a:	69c6      	ldr	r6, [r0, #28]
 800506c:	4604      	mov	r4, r0
 800506e:	460d      	mov	r5, r1
 8005070:	b976      	cbnz	r6, 8005090 <_Balloc+0x28>
 8005072:	2010      	movs	r0, #16
 8005074:	f7ff ff44 	bl	8004f00 <malloc>
 8005078:	4602      	mov	r2, r0
 800507a:	61e0      	str	r0, [r4, #28]
 800507c:	b920      	cbnz	r0, 8005088 <_Balloc+0x20>
 800507e:	216b      	movs	r1, #107	; 0x6b
 8005080:	4b17      	ldr	r3, [pc, #92]	; (80050e0 <_Balloc+0x78>)
 8005082:	4818      	ldr	r0, [pc, #96]	; (80050e4 <_Balloc+0x7c>)
 8005084:	f001 ff54 	bl	8006f30 <__assert_func>
 8005088:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800508c:	6006      	str	r6, [r0, #0]
 800508e:	60c6      	str	r6, [r0, #12]
 8005090:	69e6      	ldr	r6, [r4, #28]
 8005092:	68f3      	ldr	r3, [r6, #12]
 8005094:	b183      	cbz	r3, 80050b8 <_Balloc+0x50>
 8005096:	69e3      	ldr	r3, [r4, #28]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800509e:	b9b8      	cbnz	r0, 80050d0 <_Balloc+0x68>
 80050a0:	2101      	movs	r1, #1
 80050a2:	fa01 f605 	lsl.w	r6, r1, r5
 80050a6:	1d72      	adds	r2, r6, #5
 80050a8:	4620      	mov	r0, r4
 80050aa:	0092      	lsls	r2, r2, #2
 80050ac:	f001 ff5e 	bl	8006f6c <_calloc_r>
 80050b0:	b160      	cbz	r0, 80050cc <_Balloc+0x64>
 80050b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80050b6:	e00e      	b.n	80050d6 <_Balloc+0x6e>
 80050b8:	2221      	movs	r2, #33	; 0x21
 80050ba:	2104      	movs	r1, #4
 80050bc:	4620      	mov	r0, r4
 80050be:	f001 ff55 	bl	8006f6c <_calloc_r>
 80050c2:	69e3      	ldr	r3, [r4, #28]
 80050c4:	60f0      	str	r0, [r6, #12]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1e4      	bne.n	8005096 <_Balloc+0x2e>
 80050cc:	2000      	movs	r0, #0
 80050ce:	bd70      	pop	{r4, r5, r6, pc}
 80050d0:	6802      	ldr	r2, [r0, #0]
 80050d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80050d6:	2300      	movs	r3, #0
 80050d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80050dc:	e7f7      	b.n	80050ce <_Balloc+0x66>
 80050de:	bf00      	nop
 80050e0:	08007960 	.word	0x08007960
 80050e4:	080079e0 	.word	0x080079e0

080050e8 <_Bfree>:
 80050e8:	b570      	push	{r4, r5, r6, lr}
 80050ea:	69c6      	ldr	r6, [r0, #28]
 80050ec:	4605      	mov	r5, r0
 80050ee:	460c      	mov	r4, r1
 80050f0:	b976      	cbnz	r6, 8005110 <_Bfree+0x28>
 80050f2:	2010      	movs	r0, #16
 80050f4:	f7ff ff04 	bl	8004f00 <malloc>
 80050f8:	4602      	mov	r2, r0
 80050fa:	61e8      	str	r0, [r5, #28]
 80050fc:	b920      	cbnz	r0, 8005108 <_Bfree+0x20>
 80050fe:	218f      	movs	r1, #143	; 0x8f
 8005100:	4b08      	ldr	r3, [pc, #32]	; (8005124 <_Bfree+0x3c>)
 8005102:	4809      	ldr	r0, [pc, #36]	; (8005128 <_Bfree+0x40>)
 8005104:	f001 ff14 	bl	8006f30 <__assert_func>
 8005108:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800510c:	6006      	str	r6, [r0, #0]
 800510e:	60c6      	str	r6, [r0, #12]
 8005110:	b13c      	cbz	r4, 8005122 <_Bfree+0x3a>
 8005112:	69eb      	ldr	r3, [r5, #28]
 8005114:	6862      	ldr	r2, [r4, #4]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800511c:	6021      	str	r1, [r4, #0]
 800511e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005122:	bd70      	pop	{r4, r5, r6, pc}
 8005124:	08007960 	.word	0x08007960
 8005128:	080079e0 	.word	0x080079e0

0800512c <__multadd>:
 800512c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005130:	4607      	mov	r7, r0
 8005132:	460c      	mov	r4, r1
 8005134:	461e      	mov	r6, r3
 8005136:	2000      	movs	r0, #0
 8005138:	690d      	ldr	r5, [r1, #16]
 800513a:	f101 0c14 	add.w	ip, r1, #20
 800513e:	f8dc 3000 	ldr.w	r3, [ip]
 8005142:	3001      	adds	r0, #1
 8005144:	b299      	uxth	r1, r3
 8005146:	fb02 6101 	mla	r1, r2, r1, r6
 800514a:	0c1e      	lsrs	r6, r3, #16
 800514c:	0c0b      	lsrs	r3, r1, #16
 800514e:	fb02 3306 	mla	r3, r2, r6, r3
 8005152:	b289      	uxth	r1, r1
 8005154:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005158:	4285      	cmp	r5, r0
 800515a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800515e:	f84c 1b04 	str.w	r1, [ip], #4
 8005162:	dcec      	bgt.n	800513e <__multadd+0x12>
 8005164:	b30e      	cbz	r6, 80051aa <__multadd+0x7e>
 8005166:	68a3      	ldr	r3, [r4, #8]
 8005168:	42ab      	cmp	r3, r5
 800516a:	dc19      	bgt.n	80051a0 <__multadd+0x74>
 800516c:	6861      	ldr	r1, [r4, #4]
 800516e:	4638      	mov	r0, r7
 8005170:	3101      	adds	r1, #1
 8005172:	f7ff ff79 	bl	8005068 <_Balloc>
 8005176:	4680      	mov	r8, r0
 8005178:	b928      	cbnz	r0, 8005186 <__multadd+0x5a>
 800517a:	4602      	mov	r2, r0
 800517c:	21ba      	movs	r1, #186	; 0xba
 800517e:	4b0c      	ldr	r3, [pc, #48]	; (80051b0 <__multadd+0x84>)
 8005180:	480c      	ldr	r0, [pc, #48]	; (80051b4 <__multadd+0x88>)
 8005182:	f001 fed5 	bl	8006f30 <__assert_func>
 8005186:	6922      	ldr	r2, [r4, #16]
 8005188:	f104 010c 	add.w	r1, r4, #12
 800518c:	3202      	adds	r2, #2
 800518e:	0092      	lsls	r2, r2, #2
 8005190:	300c      	adds	r0, #12
 8005192:	f001 feb9 	bl	8006f08 <memcpy>
 8005196:	4621      	mov	r1, r4
 8005198:	4638      	mov	r0, r7
 800519a:	f7ff ffa5 	bl	80050e8 <_Bfree>
 800519e:	4644      	mov	r4, r8
 80051a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80051a4:	3501      	adds	r5, #1
 80051a6:	615e      	str	r6, [r3, #20]
 80051a8:	6125      	str	r5, [r4, #16]
 80051aa:	4620      	mov	r0, r4
 80051ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051b0:	080079cf 	.word	0x080079cf
 80051b4:	080079e0 	.word	0x080079e0

080051b8 <__s2b>:
 80051b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051bc:	4615      	mov	r5, r2
 80051be:	2209      	movs	r2, #9
 80051c0:	461f      	mov	r7, r3
 80051c2:	3308      	adds	r3, #8
 80051c4:	460c      	mov	r4, r1
 80051c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80051ca:	4606      	mov	r6, r0
 80051cc:	2201      	movs	r2, #1
 80051ce:	2100      	movs	r1, #0
 80051d0:	429a      	cmp	r2, r3
 80051d2:	db09      	blt.n	80051e8 <__s2b+0x30>
 80051d4:	4630      	mov	r0, r6
 80051d6:	f7ff ff47 	bl	8005068 <_Balloc>
 80051da:	b940      	cbnz	r0, 80051ee <__s2b+0x36>
 80051dc:	4602      	mov	r2, r0
 80051de:	21d3      	movs	r1, #211	; 0xd3
 80051e0:	4b18      	ldr	r3, [pc, #96]	; (8005244 <__s2b+0x8c>)
 80051e2:	4819      	ldr	r0, [pc, #100]	; (8005248 <__s2b+0x90>)
 80051e4:	f001 fea4 	bl	8006f30 <__assert_func>
 80051e8:	0052      	lsls	r2, r2, #1
 80051ea:	3101      	adds	r1, #1
 80051ec:	e7f0      	b.n	80051d0 <__s2b+0x18>
 80051ee:	9b08      	ldr	r3, [sp, #32]
 80051f0:	2d09      	cmp	r5, #9
 80051f2:	6143      	str	r3, [r0, #20]
 80051f4:	f04f 0301 	mov.w	r3, #1
 80051f8:	6103      	str	r3, [r0, #16]
 80051fa:	dd16      	ble.n	800522a <__s2b+0x72>
 80051fc:	f104 0909 	add.w	r9, r4, #9
 8005200:	46c8      	mov	r8, r9
 8005202:	442c      	add	r4, r5
 8005204:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005208:	4601      	mov	r1, r0
 800520a:	220a      	movs	r2, #10
 800520c:	4630      	mov	r0, r6
 800520e:	3b30      	subs	r3, #48	; 0x30
 8005210:	f7ff ff8c 	bl	800512c <__multadd>
 8005214:	45a0      	cmp	r8, r4
 8005216:	d1f5      	bne.n	8005204 <__s2b+0x4c>
 8005218:	f1a5 0408 	sub.w	r4, r5, #8
 800521c:	444c      	add	r4, r9
 800521e:	1b2d      	subs	r5, r5, r4
 8005220:	1963      	adds	r3, r4, r5
 8005222:	42bb      	cmp	r3, r7
 8005224:	db04      	blt.n	8005230 <__s2b+0x78>
 8005226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800522a:	2509      	movs	r5, #9
 800522c:	340a      	adds	r4, #10
 800522e:	e7f6      	b.n	800521e <__s2b+0x66>
 8005230:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005234:	4601      	mov	r1, r0
 8005236:	220a      	movs	r2, #10
 8005238:	4630      	mov	r0, r6
 800523a:	3b30      	subs	r3, #48	; 0x30
 800523c:	f7ff ff76 	bl	800512c <__multadd>
 8005240:	e7ee      	b.n	8005220 <__s2b+0x68>
 8005242:	bf00      	nop
 8005244:	080079cf 	.word	0x080079cf
 8005248:	080079e0 	.word	0x080079e0

0800524c <__hi0bits>:
 800524c:	0c02      	lsrs	r2, r0, #16
 800524e:	0412      	lsls	r2, r2, #16
 8005250:	4603      	mov	r3, r0
 8005252:	b9ca      	cbnz	r2, 8005288 <__hi0bits+0x3c>
 8005254:	0403      	lsls	r3, r0, #16
 8005256:	2010      	movs	r0, #16
 8005258:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800525c:	bf04      	itt	eq
 800525e:	021b      	lsleq	r3, r3, #8
 8005260:	3008      	addeq	r0, #8
 8005262:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005266:	bf04      	itt	eq
 8005268:	011b      	lsleq	r3, r3, #4
 800526a:	3004      	addeq	r0, #4
 800526c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005270:	bf04      	itt	eq
 8005272:	009b      	lsleq	r3, r3, #2
 8005274:	3002      	addeq	r0, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	db05      	blt.n	8005286 <__hi0bits+0x3a>
 800527a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800527e:	f100 0001 	add.w	r0, r0, #1
 8005282:	bf08      	it	eq
 8005284:	2020      	moveq	r0, #32
 8005286:	4770      	bx	lr
 8005288:	2000      	movs	r0, #0
 800528a:	e7e5      	b.n	8005258 <__hi0bits+0xc>

0800528c <__lo0bits>:
 800528c:	6803      	ldr	r3, [r0, #0]
 800528e:	4602      	mov	r2, r0
 8005290:	f013 0007 	ands.w	r0, r3, #7
 8005294:	d00b      	beq.n	80052ae <__lo0bits+0x22>
 8005296:	07d9      	lsls	r1, r3, #31
 8005298:	d421      	bmi.n	80052de <__lo0bits+0x52>
 800529a:	0798      	lsls	r0, r3, #30
 800529c:	bf49      	itett	mi
 800529e:	085b      	lsrmi	r3, r3, #1
 80052a0:	089b      	lsrpl	r3, r3, #2
 80052a2:	2001      	movmi	r0, #1
 80052a4:	6013      	strmi	r3, [r2, #0]
 80052a6:	bf5c      	itt	pl
 80052a8:	2002      	movpl	r0, #2
 80052aa:	6013      	strpl	r3, [r2, #0]
 80052ac:	4770      	bx	lr
 80052ae:	b299      	uxth	r1, r3
 80052b0:	b909      	cbnz	r1, 80052b6 <__lo0bits+0x2a>
 80052b2:	2010      	movs	r0, #16
 80052b4:	0c1b      	lsrs	r3, r3, #16
 80052b6:	b2d9      	uxtb	r1, r3
 80052b8:	b909      	cbnz	r1, 80052be <__lo0bits+0x32>
 80052ba:	3008      	adds	r0, #8
 80052bc:	0a1b      	lsrs	r3, r3, #8
 80052be:	0719      	lsls	r1, r3, #28
 80052c0:	bf04      	itt	eq
 80052c2:	091b      	lsreq	r3, r3, #4
 80052c4:	3004      	addeq	r0, #4
 80052c6:	0799      	lsls	r1, r3, #30
 80052c8:	bf04      	itt	eq
 80052ca:	089b      	lsreq	r3, r3, #2
 80052cc:	3002      	addeq	r0, #2
 80052ce:	07d9      	lsls	r1, r3, #31
 80052d0:	d403      	bmi.n	80052da <__lo0bits+0x4e>
 80052d2:	085b      	lsrs	r3, r3, #1
 80052d4:	f100 0001 	add.w	r0, r0, #1
 80052d8:	d003      	beq.n	80052e2 <__lo0bits+0x56>
 80052da:	6013      	str	r3, [r2, #0]
 80052dc:	4770      	bx	lr
 80052de:	2000      	movs	r0, #0
 80052e0:	4770      	bx	lr
 80052e2:	2020      	movs	r0, #32
 80052e4:	4770      	bx	lr
	...

080052e8 <__i2b>:
 80052e8:	b510      	push	{r4, lr}
 80052ea:	460c      	mov	r4, r1
 80052ec:	2101      	movs	r1, #1
 80052ee:	f7ff febb 	bl	8005068 <_Balloc>
 80052f2:	4602      	mov	r2, r0
 80052f4:	b928      	cbnz	r0, 8005302 <__i2b+0x1a>
 80052f6:	f240 1145 	movw	r1, #325	; 0x145
 80052fa:	4b04      	ldr	r3, [pc, #16]	; (800530c <__i2b+0x24>)
 80052fc:	4804      	ldr	r0, [pc, #16]	; (8005310 <__i2b+0x28>)
 80052fe:	f001 fe17 	bl	8006f30 <__assert_func>
 8005302:	2301      	movs	r3, #1
 8005304:	6144      	str	r4, [r0, #20]
 8005306:	6103      	str	r3, [r0, #16]
 8005308:	bd10      	pop	{r4, pc}
 800530a:	bf00      	nop
 800530c:	080079cf 	.word	0x080079cf
 8005310:	080079e0 	.word	0x080079e0

08005314 <__multiply>:
 8005314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005318:	4691      	mov	r9, r2
 800531a:	690a      	ldr	r2, [r1, #16]
 800531c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005320:	460c      	mov	r4, r1
 8005322:	429a      	cmp	r2, r3
 8005324:	bfbe      	ittt	lt
 8005326:	460b      	movlt	r3, r1
 8005328:	464c      	movlt	r4, r9
 800532a:	4699      	movlt	r9, r3
 800532c:	6927      	ldr	r7, [r4, #16]
 800532e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005332:	68a3      	ldr	r3, [r4, #8]
 8005334:	6861      	ldr	r1, [r4, #4]
 8005336:	eb07 060a 	add.w	r6, r7, sl
 800533a:	42b3      	cmp	r3, r6
 800533c:	b085      	sub	sp, #20
 800533e:	bfb8      	it	lt
 8005340:	3101      	addlt	r1, #1
 8005342:	f7ff fe91 	bl	8005068 <_Balloc>
 8005346:	b930      	cbnz	r0, 8005356 <__multiply+0x42>
 8005348:	4602      	mov	r2, r0
 800534a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800534e:	4b43      	ldr	r3, [pc, #268]	; (800545c <__multiply+0x148>)
 8005350:	4843      	ldr	r0, [pc, #268]	; (8005460 <__multiply+0x14c>)
 8005352:	f001 fded 	bl	8006f30 <__assert_func>
 8005356:	f100 0514 	add.w	r5, r0, #20
 800535a:	462b      	mov	r3, r5
 800535c:	2200      	movs	r2, #0
 800535e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005362:	4543      	cmp	r3, r8
 8005364:	d321      	bcc.n	80053aa <__multiply+0x96>
 8005366:	f104 0314 	add.w	r3, r4, #20
 800536a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800536e:	f109 0314 	add.w	r3, r9, #20
 8005372:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005376:	9202      	str	r2, [sp, #8]
 8005378:	1b3a      	subs	r2, r7, r4
 800537a:	3a15      	subs	r2, #21
 800537c:	f022 0203 	bic.w	r2, r2, #3
 8005380:	3204      	adds	r2, #4
 8005382:	f104 0115 	add.w	r1, r4, #21
 8005386:	428f      	cmp	r7, r1
 8005388:	bf38      	it	cc
 800538a:	2204      	movcc	r2, #4
 800538c:	9201      	str	r2, [sp, #4]
 800538e:	9a02      	ldr	r2, [sp, #8]
 8005390:	9303      	str	r3, [sp, #12]
 8005392:	429a      	cmp	r2, r3
 8005394:	d80c      	bhi.n	80053b0 <__multiply+0x9c>
 8005396:	2e00      	cmp	r6, #0
 8005398:	dd03      	ble.n	80053a2 <__multiply+0x8e>
 800539a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d05a      	beq.n	8005458 <__multiply+0x144>
 80053a2:	6106      	str	r6, [r0, #16]
 80053a4:	b005      	add	sp, #20
 80053a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053aa:	f843 2b04 	str.w	r2, [r3], #4
 80053ae:	e7d8      	b.n	8005362 <__multiply+0x4e>
 80053b0:	f8b3 a000 	ldrh.w	sl, [r3]
 80053b4:	f1ba 0f00 	cmp.w	sl, #0
 80053b8:	d023      	beq.n	8005402 <__multiply+0xee>
 80053ba:	46a9      	mov	r9, r5
 80053bc:	f04f 0c00 	mov.w	ip, #0
 80053c0:	f104 0e14 	add.w	lr, r4, #20
 80053c4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80053c8:	f8d9 1000 	ldr.w	r1, [r9]
 80053cc:	fa1f fb82 	uxth.w	fp, r2
 80053d0:	b289      	uxth	r1, r1
 80053d2:	fb0a 110b 	mla	r1, sl, fp, r1
 80053d6:	4461      	add	r1, ip
 80053d8:	f8d9 c000 	ldr.w	ip, [r9]
 80053dc:	0c12      	lsrs	r2, r2, #16
 80053de:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80053e2:	fb0a c202 	mla	r2, sl, r2, ip
 80053e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80053ea:	b289      	uxth	r1, r1
 80053ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80053f0:	4577      	cmp	r7, lr
 80053f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80053f6:	f849 1b04 	str.w	r1, [r9], #4
 80053fa:	d8e3      	bhi.n	80053c4 <__multiply+0xb0>
 80053fc:	9a01      	ldr	r2, [sp, #4]
 80053fe:	f845 c002 	str.w	ip, [r5, r2]
 8005402:	9a03      	ldr	r2, [sp, #12]
 8005404:	3304      	adds	r3, #4
 8005406:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800540a:	f1b9 0f00 	cmp.w	r9, #0
 800540e:	d021      	beq.n	8005454 <__multiply+0x140>
 8005410:	46ae      	mov	lr, r5
 8005412:	f04f 0a00 	mov.w	sl, #0
 8005416:	6829      	ldr	r1, [r5, #0]
 8005418:	f104 0c14 	add.w	ip, r4, #20
 800541c:	f8bc b000 	ldrh.w	fp, [ip]
 8005420:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005424:	b289      	uxth	r1, r1
 8005426:	fb09 220b 	mla	r2, r9, fp, r2
 800542a:	4452      	add	r2, sl
 800542c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005430:	f84e 1b04 	str.w	r1, [lr], #4
 8005434:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005438:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800543c:	f8be 1000 	ldrh.w	r1, [lr]
 8005440:	4567      	cmp	r7, ip
 8005442:	fb09 110a 	mla	r1, r9, sl, r1
 8005446:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800544a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800544e:	d8e5      	bhi.n	800541c <__multiply+0x108>
 8005450:	9a01      	ldr	r2, [sp, #4]
 8005452:	50a9      	str	r1, [r5, r2]
 8005454:	3504      	adds	r5, #4
 8005456:	e79a      	b.n	800538e <__multiply+0x7a>
 8005458:	3e01      	subs	r6, #1
 800545a:	e79c      	b.n	8005396 <__multiply+0x82>
 800545c:	080079cf 	.word	0x080079cf
 8005460:	080079e0 	.word	0x080079e0

08005464 <__pow5mult>:
 8005464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005468:	4615      	mov	r5, r2
 800546a:	f012 0203 	ands.w	r2, r2, #3
 800546e:	4606      	mov	r6, r0
 8005470:	460f      	mov	r7, r1
 8005472:	d007      	beq.n	8005484 <__pow5mult+0x20>
 8005474:	4c25      	ldr	r4, [pc, #148]	; (800550c <__pow5mult+0xa8>)
 8005476:	3a01      	subs	r2, #1
 8005478:	2300      	movs	r3, #0
 800547a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800547e:	f7ff fe55 	bl	800512c <__multadd>
 8005482:	4607      	mov	r7, r0
 8005484:	10ad      	asrs	r5, r5, #2
 8005486:	d03d      	beq.n	8005504 <__pow5mult+0xa0>
 8005488:	69f4      	ldr	r4, [r6, #28]
 800548a:	b97c      	cbnz	r4, 80054ac <__pow5mult+0x48>
 800548c:	2010      	movs	r0, #16
 800548e:	f7ff fd37 	bl	8004f00 <malloc>
 8005492:	4602      	mov	r2, r0
 8005494:	61f0      	str	r0, [r6, #28]
 8005496:	b928      	cbnz	r0, 80054a4 <__pow5mult+0x40>
 8005498:	f240 11b3 	movw	r1, #435	; 0x1b3
 800549c:	4b1c      	ldr	r3, [pc, #112]	; (8005510 <__pow5mult+0xac>)
 800549e:	481d      	ldr	r0, [pc, #116]	; (8005514 <__pow5mult+0xb0>)
 80054a0:	f001 fd46 	bl	8006f30 <__assert_func>
 80054a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80054a8:	6004      	str	r4, [r0, #0]
 80054aa:	60c4      	str	r4, [r0, #12]
 80054ac:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80054b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80054b4:	b94c      	cbnz	r4, 80054ca <__pow5mult+0x66>
 80054b6:	f240 2171 	movw	r1, #625	; 0x271
 80054ba:	4630      	mov	r0, r6
 80054bc:	f7ff ff14 	bl	80052e8 <__i2b>
 80054c0:	2300      	movs	r3, #0
 80054c2:	4604      	mov	r4, r0
 80054c4:	f8c8 0008 	str.w	r0, [r8, #8]
 80054c8:	6003      	str	r3, [r0, #0]
 80054ca:	f04f 0900 	mov.w	r9, #0
 80054ce:	07eb      	lsls	r3, r5, #31
 80054d0:	d50a      	bpl.n	80054e8 <__pow5mult+0x84>
 80054d2:	4639      	mov	r1, r7
 80054d4:	4622      	mov	r2, r4
 80054d6:	4630      	mov	r0, r6
 80054d8:	f7ff ff1c 	bl	8005314 <__multiply>
 80054dc:	4680      	mov	r8, r0
 80054de:	4639      	mov	r1, r7
 80054e0:	4630      	mov	r0, r6
 80054e2:	f7ff fe01 	bl	80050e8 <_Bfree>
 80054e6:	4647      	mov	r7, r8
 80054e8:	106d      	asrs	r5, r5, #1
 80054ea:	d00b      	beq.n	8005504 <__pow5mult+0xa0>
 80054ec:	6820      	ldr	r0, [r4, #0]
 80054ee:	b938      	cbnz	r0, 8005500 <__pow5mult+0x9c>
 80054f0:	4622      	mov	r2, r4
 80054f2:	4621      	mov	r1, r4
 80054f4:	4630      	mov	r0, r6
 80054f6:	f7ff ff0d 	bl	8005314 <__multiply>
 80054fa:	6020      	str	r0, [r4, #0]
 80054fc:	f8c0 9000 	str.w	r9, [r0]
 8005500:	4604      	mov	r4, r0
 8005502:	e7e4      	b.n	80054ce <__pow5mult+0x6a>
 8005504:	4638      	mov	r0, r7
 8005506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800550a:	bf00      	nop
 800550c:	08007b30 	.word	0x08007b30
 8005510:	08007960 	.word	0x08007960
 8005514:	080079e0 	.word	0x080079e0

08005518 <__lshift>:
 8005518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800551c:	460c      	mov	r4, r1
 800551e:	4607      	mov	r7, r0
 8005520:	4691      	mov	r9, r2
 8005522:	6923      	ldr	r3, [r4, #16]
 8005524:	6849      	ldr	r1, [r1, #4]
 8005526:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800552a:	68a3      	ldr	r3, [r4, #8]
 800552c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005530:	f108 0601 	add.w	r6, r8, #1
 8005534:	42b3      	cmp	r3, r6
 8005536:	db0b      	blt.n	8005550 <__lshift+0x38>
 8005538:	4638      	mov	r0, r7
 800553a:	f7ff fd95 	bl	8005068 <_Balloc>
 800553e:	4605      	mov	r5, r0
 8005540:	b948      	cbnz	r0, 8005556 <__lshift+0x3e>
 8005542:	4602      	mov	r2, r0
 8005544:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005548:	4b27      	ldr	r3, [pc, #156]	; (80055e8 <__lshift+0xd0>)
 800554a:	4828      	ldr	r0, [pc, #160]	; (80055ec <__lshift+0xd4>)
 800554c:	f001 fcf0 	bl	8006f30 <__assert_func>
 8005550:	3101      	adds	r1, #1
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	e7ee      	b.n	8005534 <__lshift+0x1c>
 8005556:	2300      	movs	r3, #0
 8005558:	f100 0114 	add.w	r1, r0, #20
 800555c:	f100 0210 	add.w	r2, r0, #16
 8005560:	4618      	mov	r0, r3
 8005562:	4553      	cmp	r3, sl
 8005564:	db33      	blt.n	80055ce <__lshift+0xb6>
 8005566:	6920      	ldr	r0, [r4, #16]
 8005568:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800556c:	f104 0314 	add.w	r3, r4, #20
 8005570:	f019 091f 	ands.w	r9, r9, #31
 8005574:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005578:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800557c:	d02b      	beq.n	80055d6 <__lshift+0xbe>
 800557e:	468a      	mov	sl, r1
 8005580:	2200      	movs	r2, #0
 8005582:	f1c9 0e20 	rsb	lr, r9, #32
 8005586:	6818      	ldr	r0, [r3, #0]
 8005588:	fa00 f009 	lsl.w	r0, r0, r9
 800558c:	4310      	orrs	r0, r2
 800558e:	f84a 0b04 	str.w	r0, [sl], #4
 8005592:	f853 2b04 	ldr.w	r2, [r3], #4
 8005596:	459c      	cmp	ip, r3
 8005598:	fa22 f20e 	lsr.w	r2, r2, lr
 800559c:	d8f3      	bhi.n	8005586 <__lshift+0x6e>
 800559e:	ebac 0304 	sub.w	r3, ip, r4
 80055a2:	3b15      	subs	r3, #21
 80055a4:	f023 0303 	bic.w	r3, r3, #3
 80055a8:	3304      	adds	r3, #4
 80055aa:	f104 0015 	add.w	r0, r4, #21
 80055ae:	4584      	cmp	ip, r0
 80055b0:	bf38      	it	cc
 80055b2:	2304      	movcc	r3, #4
 80055b4:	50ca      	str	r2, [r1, r3]
 80055b6:	b10a      	cbz	r2, 80055bc <__lshift+0xa4>
 80055b8:	f108 0602 	add.w	r6, r8, #2
 80055bc:	3e01      	subs	r6, #1
 80055be:	4638      	mov	r0, r7
 80055c0:	4621      	mov	r1, r4
 80055c2:	612e      	str	r6, [r5, #16]
 80055c4:	f7ff fd90 	bl	80050e8 <_Bfree>
 80055c8:	4628      	mov	r0, r5
 80055ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80055d2:	3301      	adds	r3, #1
 80055d4:	e7c5      	b.n	8005562 <__lshift+0x4a>
 80055d6:	3904      	subs	r1, #4
 80055d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80055dc:	459c      	cmp	ip, r3
 80055de:	f841 2f04 	str.w	r2, [r1, #4]!
 80055e2:	d8f9      	bhi.n	80055d8 <__lshift+0xc0>
 80055e4:	e7ea      	b.n	80055bc <__lshift+0xa4>
 80055e6:	bf00      	nop
 80055e8:	080079cf 	.word	0x080079cf
 80055ec:	080079e0 	.word	0x080079e0

080055f0 <__mcmp>:
 80055f0:	4603      	mov	r3, r0
 80055f2:	690a      	ldr	r2, [r1, #16]
 80055f4:	6900      	ldr	r0, [r0, #16]
 80055f6:	b530      	push	{r4, r5, lr}
 80055f8:	1a80      	subs	r0, r0, r2
 80055fa:	d10d      	bne.n	8005618 <__mcmp+0x28>
 80055fc:	3314      	adds	r3, #20
 80055fe:	3114      	adds	r1, #20
 8005600:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005604:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005608:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800560c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005610:	4295      	cmp	r5, r2
 8005612:	d002      	beq.n	800561a <__mcmp+0x2a>
 8005614:	d304      	bcc.n	8005620 <__mcmp+0x30>
 8005616:	2001      	movs	r0, #1
 8005618:	bd30      	pop	{r4, r5, pc}
 800561a:	42a3      	cmp	r3, r4
 800561c:	d3f4      	bcc.n	8005608 <__mcmp+0x18>
 800561e:	e7fb      	b.n	8005618 <__mcmp+0x28>
 8005620:	f04f 30ff 	mov.w	r0, #4294967295
 8005624:	e7f8      	b.n	8005618 <__mcmp+0x28>
	...

08005628 <__mdiff>:
 8005628:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800562c:	460d      	mov	r5, r1
 800562e:	4607      	mov	r7, r0
 8005630:	4611      	mov	r1, r2
 8005632:	4628      	mov	r0, r5
 8005634:	4614      	mov	r4, r2
 8005636:	f7ff ffdb 	bl	80055f0 <__mcmp>
 800563a:	1e06      	subs	r6, r0, #0
 800563c:	d111      	bne.n	8005662 <__mdiff+0x3a>
 800563e:	4631      	mov	r1, r6
 8005640:	4638      	mov	r0, r7
 8005642:	f7ff fd11 	bl	8005068 <_Balloc>
 8005646:	4602      	mov	r2, r0
 8005648:	b928      	cbnz	r0, 8005656 <__mdiff+0x2e>
 800564a:	f240 2137 	movw	r1, #567	; 0x237
 800564e:	4b3a      	ldr	r3, [pc, #232]	; (8005738 <__mdiff+0x110>)
 8005650:	483a      	ldr	r0, [pc, #232]	; (800573c <__mdiff+0x114>)
 8005652:	f001 fc6d 	bl	8006f30 <__assert_func>
 8005656:	2301      	movs	r3, #1
 8005658:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800565c:	4610      	mov	r0, r2
 800565e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005662:	bfa4      	itt	ge
 8005664:	4623      	movge	r3, r4
 8005666:	462c      	movge	r4, r5
 8005668:	4638      	mov	r0, r7
 800566a:	6861      	ldr	r1, [r4, #4]
 800566c:	bfa6      	itte	ge
 800566e:	461d      	movge	r5, r3
 8005670:	2600      	movge	r6, #0
 8005672:	2601      	movlt	r6, #1
 8005674:	f7ff fcf8 	bl	8005068 <_Balloc>
 8005678:	4602      	mov	r2, r0
 800567a:	b918      	cbnz	r0, 8005684 <__mdiff+0x5c>
 800567c:	f240 2145 	movw	r1, #581	; 0x245
 8005680:	4b2d      	ldr	r3, [pc, #180]	; (8005738 <__mdiff+0x110>)
 8005682:	e7e5      	b.n	8005650 <__mdiff+0x28>
 8005684:	f102 0814 	add.w	r8, r2, #20
 8005688:	46c2      	mov	sl, r8
 800568a:	f04f 0c00 	mov.w	ip, #0
 800568e:	6927      	ldr	r7, [r4, #16]
 8005690:	60c6      	str	r6, [r0, #12]
 8005692:	692e      	ldr	r6, [r5, #16]
 8005694:	f104 0014 	add.w	r0, r4, #20
 8005698:	f105 0914 	add.w	r9, r5, #20
 800569c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80056a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80056a4:	3410      	adds	r4, #16
 80056a6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80056aa:	f859 3b04 	ldr.w	r3, [r9], #4
 80056ae:	fa1f f18b 	uxth.w	r1, fp
 80056b2:	4461      	add	r1, ip
 80056b4:	fa1f fc83 	uxth.w	ip, r3
 80056b8:	0c1b      	lsrs	r3, r3, #16
 80056ba:	eba1 010c 	sub.w	r1, r1, ip
 80056be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80056c2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80056c6:	b289      	uxth	r1, r1
 80056c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80056cc:	454e      	cmp	r6, r9
 80056ce:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80056d2:	f84a 1b04 	str.w	r1, [sl], #4
 80056d6:	d8e6      	bhi.n	80056a6 <__mdiff+0x7e>
 80056d8:	1b73      	subs	r3, r6, r5
 80056da:	3b15      	subs	r3, #21
 80056dc:	f023 0303 	bic.w	r3, r3, #3
 80056e0:	3515      	adds	r5, #21
 80056e2:	3304      	adds	r3, #4
 80056e4:	42ae      	cmp	r6, r5
 80056e6:	bf38      	it	cc
 80056e8:	2304      	movcc	r3, #4
 80056ea:	4418      	add	r0, r3
 80056ec:	4443      	add	r3, r8
 80056ee:	461e      	mov	r6, r3
 80056f0:	4605      	mov	r5, r0
 80056f2:	4575      	cmp	r5, lr
 80056f4:	d30e      	bcc.n	8005714 <__mdiff+0xec>
 80056f6:	f10e 0103 	add.w	r1, lr, #3
 80056fa:	1a09      	subs	r1, r1, r0
 80056fc:	f021 0103 	bic.w	r1, r1, #3
 8005700:	3803      	subs	r0, #3
 8005702:	4586      	cmp	lr, r0
 8005704:	bf38      	it	cc
 8005706:	2100      	movcc	r1, #0
 8005708:	440b      	add	r3, r1
 800570a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800570e:	b189      	cbz	r1, 8005734 <__mdiff+0x10c>
 8005710:	6117      	str	r7, [r2, #16]
 8005712:	e7a3      	b.n	800565c <__mdiff+0x34>
 8005714:	f855 8b04 	ldr.w	r8, [r5], #4
 8005718:	fa1f f188 	uxth.w	r1, r8
 800571c:	4461      	add	r1, ip
 800571e:	140c      	asrs	r4, r1, #16
 8005720:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005724:	b289      	uxth	r1, r1
 8005726:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800572a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800572e:	f846 1b04 	str.w	r1, [r6], #4
 8005732:	e7de      	b.n	80056f2 <__mdiff+0xca>
 8005734:	3f01      	subs	r7, #1
 8005736:	e7e8      	b.n	800570a <__mdiff+0xe2>
 8005738:	080079cf 	.word	0x080079cf
 800573c:	080079e0 	.word	0x080079e0

08005740 <__ulp>:
 8005740:	4b0e      	ldr	r3, [pc, #56]	; (800577c <__ulp+0x3c>)
 8005742:	400b      	ands	r3, r1
 8005744:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8005748:	2b00      	cmp	r3, #0
 800574a:	dc08      	bgt.n	800575e <__ulp+0x1e>
 800574c:	425b      	negs	r3, r3
 800574e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8005752:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005756:	da04      	bge.n	8005762 <__ulp+0x22>
 8005758:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800575c:	4113      	asrs	r3, r2
 800575e:	2200      	movs	r2, #0
 8005760:	e008      	b.n	8005774 <__ulp+0x34>
 8005762:	f1a2 0314 	sub.w	r3, r2, #20
 8005766:	2b1e      	cmp	r3, #30
 8005768:	bfd6      	itet	le
 800576a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800576e:	2201      	movgt	r2, #1
 8005770:	40da      	lsrle	r2, r3
 8005772:	2300      	movs	r3, #0
 8005774:	4619      	mov	r1, r3
 8005776:	4610      	mov	r0, r2
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	7ff00000 	.word	0x7ff00000

08005780 <__b2d>:
 8005780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005782:	6905      	ldr	r5, [r0, #16]
 8005784:	f100 0714 	add.w	r7, r0, #20
 8005788:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800578c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8005790:	1f2e      	subs	r6, r5, #4
 8005792:	4620      	mov	r0, r4
 8005794:	f7ff fd5a 	bl	800524c <__hi0bits>
 8005798:	f1c0 0220 	rsb	r2, r0, #32
 800579c:	280a      	cmp	r0, #10
 800579e:	4603      	mov	r3, r0
 80057a0:	f8df c068 	ldr.w	ip, [pc, #104]	; 800580c <__b2d+0x8c>
 80057a4:	600a      	str	r2, [r1, #0]
 80057a6:	dc12      	bgt.n	80057ce <__b2d+0x4e>
 80057a8:	f1c0 0e0b 	rsb	lr, r0, #11
 80057ac:	fa24 f20e 	lsr.w	r2, r4, lr
 80057b0:	42b7      	cmp	r7, r6
 80057b2:	ea42 010c 	orr.w	r1, r2, ip
 80057b6:	bf2c      	ite	cs
 80057b8:	2200      	movcs	r2, #0
 80057ba:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80057be:	3315      	adds	r3, #21
 80057c0:	fa04 f303 	lsl.w	r3, r4, r3
 80057c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80057c8:	431a      	orrs	r2, r3
 80057ca:	4610      	mov	r0, r2
 80057cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ce:	42b7      	cmp	r7, r6
 80057d0:	bf2e      	itee	cs
 80057d2:	2200      	movcs	r2, #0
 80057d4:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80057d8:	f1a5 0608 	subcc.w	r6, r5, #8
 80057dc:	3b0b      	subs	r3, #11
 80057de:	d012      	beq.n	8005806 <__b2d+0x86>
 80057e0:	f1c3 0520 	rsb	r5, r3, #32
 80057e4:	fa22 f105 	lsr.w	r1, r2, r5
 80057e8:	409c      	lsls	r4, r3
 80057ea:	430c      	orrs	r4, r1
 80057ec:	42be      	cmp	r6, r7
 80057ee:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 80057f2:	bf94      	ite	ls
 80057f4:	2400      	movls	r4, #0
 80057f6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80057fa:	409a      	lsls	r2, r3
 80057fc:	40ec      	lsrs	r4, r5
 80057fe:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005802:	4322      	orrs	r2, r4
 8005804:	e7e1      	b.n	80057ca <__b2d+0x4a>
 8005806:	ea44 010c 	orr.w	r1, r4, ip
 800580a:	e7de      	b.n	80057ca <__b2d+0x4a>
 800580c:	3ff00000 	.word	0x3ff00000

08005810 <__d2b>:
 8005810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005812:	2101      	movs	r1, #1
 8005814:	4617      	mov	r7, r2
 8005816:	461c      	mov	r4, r3
 8005818:	9e08      	ldr	r6, [sp, #32]
 800581a:	f7ff fc25 	bl	8005068 <_Balloc>
 800581e:	4605      	mov	r5, r0
 8005820:	b930      	cbnz	r0, 8005830 <__d2b+0x20>
 8005822:	4602      	mov	r2, r0
 8005824:	f240 310f 	movw	r1, #783	; 0x30f
 8005828:	4b22      	ldr	r3, [pc, #136]	; (80058b4 <__d2b+0xa4>)
 800582a:	4823      	ldr	r0, [pc, #140]	; (80058b8 <__d2b+0xa8>)
 800582c:	f001 fb80 	bl	8006f30 <__assert_func>
 8005830:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005834:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005838:	bb24      	cbnz	r4, 8005884 <__d2b+0x74>
 800583a:	2f00      	cmp	r7, #0
 800583c:	9301      	str	r3, [sp, #4]
 800583e:	d026      	beq.n	800588e <__d2b+0x7e>
 8005840:	4668      	mov	r0, sp
 8005842:	9700      	str	r7, [sp, #0]
 8005844:	f7ff fd22 	bl	800528c <__lo0bits>
 8005848:	e9dd 1200 	ldrd	r1, r2, [sp]
 800584c:	b1e8      	cbz	r0, 800588a <__d2b+0x7a>
 800584e:	f1c0 0320 	rsb	r3, r0, #32
 8005852:	fa02 f303 	lsl.w	r3, r2, r3
 8005856:	430b      	orrs	r3, r1
 8005858:	40c2      	lsrs	r2, r0
 800585a:	616b      	str	r3, [r5, #20]
 800585c:	9201      	str	r2, [sp, #4]
 800585e:	9b01      	ldr	r3, [sp, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	bf14      	ite	ne
 8005864:	2102      	movne	r1, #2
 8005866:	2101      	moveq	r1, #1
 8005868:	61ab      	str	r3, [r5, #24]
 800586a:	6129      	str	r1, [r5, #16]
 800586c:	b1bc      	cbz	r4, 800589e <__d2b+0x8e>
 800586e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005872:	4404      	add	r4, r0
 8005874:	6034      	str	r4, [r6, #0]
 8005876:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800587a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800587c:	6018      	str	r0, [r3, #0]
 800587e:	4628      	mov	r0, r5
 8005880:	b003      	add	sp, #12
 8005882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005884:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005888:	e7d7      	b.n	800583a <__d2b+0x2a>
 800588a:	6169      	str	r1, [r5, #20]
 800588c:	e7e7      	b.n	800585e <__d2b+0x4e>
 800588e:	a801      	add	r0, sp, #4
 8005890:	f7ff fcfc 	bl	800528c <__lo0bits>
 8005894:	9b01      	ldr	r3, [sp, #4]
 8005896:	2101      	movs	r1, #1
 8005898:	616b      	str	r3, [r5, #20]
 800589a:	3020      	adds	r0, #32
 800589c:	e7e5      	b.n	800586a <__d2b+0x5a>
 800589e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80058a2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80058a6:	6030      	str	r0, [r6, #0]
 80058a8:	6918      	ldr	r0, [r3, #16]
 80058aa:	f7ff fccf 	bl	800524c <__hi0bits>
 80058ae:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80058b2:	e7e2      	b.n	800587a <__d2b+0x6a>
 80058b4:	080079cf 	.word	0x080079cf
 80058b8:	080079e0 	.word	0x080079e0

080058bc <__ratio>:
 80058bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c0:	4688      	mov	r8, r1
 80058c2:	4669      	mov	r1, sp
 80058c4:	4681      	mov	r9, r0
 80058c6:	f7ff ff5b 	bl	8005780 <__b2d>
 80058ca:	460f      	mov	r7, r1
 80058cc:	4604      	mov	r4, r0
 80058ce:	460d      	mov	r5, r1
 80058d0:	4640      	mov	r0, r8
 80058d2:	a901      	add	r1, sp, #4
 80058d4:	f7ff ff54 	bl	8005780 <__b2d>
 80058d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80058dc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80058e0:	468b      	mov	fp, r1
 80058e2:	eba3 0c02 	sub.w	ip, r3, r2
 80058e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80058ea:	1a9b      	subs	r3, r3, r2
 80058ec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	bfd5      	itete	le
 80058f4:	460a      	movle	r2, r1
 80058f6:	462a      	movgt	r2, r5
 80058f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80058fc:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8005900:	bfd8      	it	le
 8005902:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8005906:	465b      	mov	r3, fp
 8005908:	4602      	mov	r2, r0
 800590a:	4639      	mov	r1, r7
 800590c:	4620      	mov	r0, r4
 800590e:	f7fa ff0d 	bl	800072c <__aeabi_ddiv>
 8005912:	b003      	add	sp, #12
 8005914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005918 <__copybits>:
 8005918:	3901      	subs	r1, #1
 800591a:	b570      	push	{r4, r5, r6, lr}
 800591c:	1149      	asrs	r1, r1, #5
 800591e:	6914      	ldr	r4, [r2, #16]
 8005920:	3101      	adds	r1, #1
 8005922:	f102 0314 	add.w	r3, r2, #20
 8005926:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800592a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800592e:	1f05      	subs	r5, r0, #4
 8005930:	42a3      	cmp	r3, r4
 8005932:	d30c      	bcc.n	800594e <__copybits+0x36>
 8005934:	1aa3      	subs	r3, r4, r2
 8005936:	3b11      	subs	r3, #17
 8005938:	f023 0303 	bic.w	r3, r3, #3
 800593c:	3211      	adds	r2, #17
 800593e:	42a2      	cmp	r2, r4
 8005940:	bf88      	it	hi
 8005942:	2300      	movhi	r3, #0
 8005944:	4418      	add	r0, r3
 8005946:	2300      	movs	r3, #0
 8005948:	4288      	cmp	r0, r1
 800594a:	d305      	bcc.n	8005958 <__copybits+0x40>
 800594c:	bd70      	pop	{r4, r5, r6, pc}
 800594e:	f853 6b04 	ldr.w	r6, [r3], #4
 8005952:	f845 6f04 	str.w	r6, [r5, #4]!
 8005956:	e7eb      	b.n	8005930 <__copybits+0x18>
 8005958:	f840 3b04 	str.w	r3, [r0], #4
 800595c:	e7f4      	b.n	8005948 <__copybits+0x30>

0800595e <__any_on>:
 800595e:	f100 0214 	add.w	r2, r0, #20
 8005962:	6900      	ldr	r0, [r0, #16]
 8005964:	114b      	asrs	r3, r1, #5
 8005966:	4298      	cmp	r0, r3
 8005968:	b510      	push	{r4, lr}
 800596a:	db11      	blt.n	8005990 <__any_on+0x32>
 800596c:	dd0a      	ble.n	8005984 <__any_on+0x26>
 800596e:	f011 011f 	ands.w	r1, r1, #31
 8005972:	d007      	beq.n	8005984 <__any_on+0x26>
 8005974:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005978:	fa24 f001 	lsr.w	r0, r4, r1
 800597c:	fa00 f101 	lsl.w	r1, r0, r1
 8005980:	428c      	cmp	r4, r1
 8005982:	d10b      	bne.n	800599c <__any_on+0x3e>
 8005984:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005988:	4293      	cmp	r3, r2
 800598a:	d803      	bhi.n	8005994 <__any_on+0x36>
 800598c:	2000      	movs	r0, #0
 800598e:	bd10      	pop	{r4, pc}
 8005990:	4603      	mov	r3, r0
 8005992:	e7f7      	b.n	8005984 <__any_on+0x26>
 8005994:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005998:	2900      	cmp	r1, #0
 800599a:	d0f5      	beq.n	8005988 <__any_on+0x2a>
 800599c:	2001      	movs	r0, #1
 800599e:	e7f6      	b.n	800598e <__any_on+0x30>

080059a0 <sulp>:
 80059a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059a4:	460f      	mov	r7, r1
 80059a6:	4690      	mov	r8, r2
 80059a8:	f7ff feca 	bl	8005740 <__ulp>
 80059ac:	4604      	mov	r4, r0
 80059ae:	460d      	mov	r5, r1
 80059b0:	f1b8 0f00 	cmp.w	r8, #0
 80059b4:	d011      	beq.n	80059da <sulp+0x3a>
 80059b6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80059ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80059be:	2b00      	cmp	r3, #0
 80059c0:	dd0b      	ble.n	80059da <sulp+0x3a>
 80059c2:	2400      	movs	r4, #0
 80059c4:	051b      	lsls	r3, r3, #20
 80059c6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80059ca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80059ce:	4622      	mov	r2, r4
 80059d0:	462b      	mov	r3, r5
 80059d2:	f7fa fd81 	bl	80004d8 <__aeabi_dmul>
 80059d6:	4604      	mov	r4, r0
 80059d8:	460d      	mov	r5, r1
 80059da:	4620      	mov	r0, r4
 80059dc:	4629      	mov	r1, r5
 80059de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059e2:	0000      	movs	r0, r0
 80059e4:	0000      	movs	r0, r0
	...

080059e8 <_strtod_l>:
 80059e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ec:	b09f      	sub	sp, #124	; 0x7c
 80059ee:	9217      	str	r2, [sp, #92]	; 0x5c
 80059f0:	2200      	movs	r2, #0
 80059f2:	4604      	mov	r4, r0
 80059f4:	921a      	str	r2, [sp, #104]	; 0x68
 80059f6:	460d      	mov	r5, r1
 80059f8:	f04f 0800 	mov.w	r8, #0
 80059fc:	f04f 0900 	mov.w	r9, #0
 8005a00:	460a      	mov	r2, r1
 8005a02:	9219      	str	r2, [sp, #100]	; 0x64
 8005a04:	7811      	ldrb	r1, [r2, #0]
 8005a06:	292b      	cmp	r1, #43	; 0x2b
 8005a08:	d04a      	beq.n	8005aa0 <_strtod_l+0xb8>
 8005a0a:	d838      	bhi.n	8005a7e <_strtod_l+0x96>
 8005a0c:	290d      	cmp	r1, #13
 8005a0e:	d832      	bhi.n	8005a76 <_strtod_l+0x8e>
 8005a10:	2908      	cmp	r1, #8
 8005a12:	d832      	bhi.n	8005a7a <_strtod_l+0x92>
 8005a14:	2900      	cmp	r1, #0
 8005a16:	d03b      	beq.n	8005a90 <_strtod_l+0xa8>
 8005a18:	2200      	movs	r2, #0
 8005a1a:	920e      	str	r2, [sp, #56]	; 0x38
 8005a1c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005a1e:	7832      	ldrb	r2, [r6, #0]
 8005a20:	2a30      	cmp	r2, #48	; 0x30
 8005a22:	f040 80b2 	bne.w	8005b8a <_strtod_l+0x1a2>
 8005a26:	7872      	ldrb	r2, [r6, #1]
 8005a28:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005a2c:	2a58      	cmp	r2, #88	; 0x58
 8005a2e:	d16e      	bne.n	8005b0e <_strtod_l+0x126>
 8005a30:	9302      	str	r3, [sp, #8]
 8005a32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a34:	4620      	mov	r0, r4
 8005a36:	9301      	str	r3, [sp, #4]
 8005a38:	ab1a      	add	r3, sp, #104	; 0x68
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	4a8c      	ldr	r2, [pc, #560]	; (8005c70 <_strtod_l+0x288>)
 8005a3e:	ab1b      	add	r3, sp, #108	; 0x6c
 8005a40:	a919      	add	r1, sp, #100	; 0x64
 8005a42:	f001 fb0f 	bl	8007064 <__gethex>
 8005a46:	f010 070f 	ands.w	r7, r0, #15
 8005a4a:	4605      	mov	r5, r0
 8005a4c:	d005      	beq.n	8005a5a <_strtod_l+0x72>
 8005a4e:	2f06      	cmp	r7, #6
 8005a50:	d128      	bne.n	8005aa4 <_strtod_l+0xbc>
 8005a52:	2300      	movs	r3, #0
 8005a54:	3601      	adds	r6, #1
 8005a56:	9619      	str	r6, [sp, #100]	; 0x64
 8005a58:	930e      	str	r3, [sp, #56]	; 0x38
 8005a5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f040 85a0 	bne.w	80065a2 <_strtod_l+0xbba>
 8005a62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a64:	b1cb      	cbz	r3, 8005a9a <_strtod_l+0xb2>
 8005a66:	4642      	mov	r2, r8
 8005a68:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	4619      	mov	r1, r3
 8005a70:	b01f      	add	sp, #124	; 0x7c
 8005a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a76:	2920      	cmp	r1, #32
 8005a78:	d1ce      	bne.n	8005a18 <_strtod_l+0x30>
 8005a7a:	3201      	adds	r2, #1
 8005a7c:	e7c1      	b.n	8005a02 <_strtod_l+0x1a>
 8005a7e:	292d      	cmp	r1, #45	; 0x2d
 8005a80:	d1ca      	bne.n	8005a18 <_strtod_l+0x30>
 8005a82:	2101      	movs	r1, #1
 8005a84:	910e      	str	r1, [sp, #56]	; 0x38
 8005a86:	1c51      	adds	r1, r2, #1
 8005a88:	9119      	str	r1, [sp, #100]	; 0x64
 8005a8a:	7852      	ldrb	r2, [r2, #1]
 8005a8c:	2a00      	cmp	r2, #0
 8005a8e:	d1c5      	bne.n	8005a1c <_strtod_l+0x34>
 8005a90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a92:	9519      	str	r5, [sp, #100]	; 0x64
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f040 8582 	bne.w	800659e <_strtod_l+0xbb6>
 8005a9a:	4642      	mov	r2, r8
 8005a9c:	464b      	mov	r3, r9
 8005a9e:	e7e5      	b.n	8005a6c <_strtod_l+0x84>
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	e7ef      	b.n	8005a84 <_strtod_l+0x9c>
 8005aa4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005aa6:	b13a      	cbz	r2, 8005ab8 <_strtod_l+0xd0>
 8005aa8:	2135      	movs	r1, #53	; 0x35
 8005aaa:	a81c      	add	r0, sp, #112	; 0x70
 8005aac:	f7ff ff34 	bl	8005918 <__copybits>
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005ab4:	f7ff fb18 	bl	80050e8 <_Bfree>
 8005ab8:	3f01      	subs	r7, #1
 8005aba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005abc:	2f04      	cmp	r7, #4
 8005abe:	d806      	bhi.n	8005ace <_strtod_l+0xe6>
 8005ac0:	e8df f007 	tbb	[pc, r7]
 8005ac4:	201d0314 	.word	0x201d0314
 8005ac8:	14          	.byte	0x14
 8005ac9:	00          	.byte	0x00
 8005aca:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005ace:	05e9      	lsls	r1, r5, #23
 8005ad0:	bf48      	it	mi
 8005ad2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8005ad6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005ada:	0d1b      	lsrs	r3, r3, #20
 8005adc:	051b      	lsls	r3, r3, #20
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1bb      	bne.n	8005a5a <_strtod_l+0x72>
 8005ae2:	f7fe fb17 	bl	8004114 <__errno>
 8005ae6:	2322      	movs	r3, #34	; 0x22
 8005ae8:	6003      	str	r3, [r0, #0]
 8005aea:	e7b6      	b.n	8005a5a <_strtod_l+0x72>
 8005aec:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005af0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8005af4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005af8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005afc:	e7e7      	b.n	8005ace <_strtod_l+0xe6>
 8005afe:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8005c74 <_strtod_l+0x28c>
 8005b02:	e7e4      	b.n	8005ace <_strtod_l+0xe6>
 8005b04:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005b08:	f04f 38ff 	mov.w	r8, #4294967295
 8005b0c:	e7df      	b.n	8005ace <_strtod_l+0xe6>
 8005b0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b10:	1c5a      	adds	r2, r3, #1
 8005b12:	9219      	str	r2, [sp, #100]	; 0x64
 8005b14:	785b      	ldrb	r3, [r3, #1]
 8005b16:	2b30      	cmp	r3, #48	; 0x30
 8005b18:	d0f9      	beq.n	8005b0e <_strtod_l+0x126>
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d09d      	beq.n	8005a5a <_strtod_l+0x72>
 8005b1e:	2301      	movs	r3, #1
 8005b20:	f04f 0a00 	mov.w	sl, #0
 8005b24:	220a      	movs	r2, #10
 8005b26:	46d3      	mov	fp, sl
 8005b28:	9305      	str	r3, [sp, #20]
 8005b2a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b2c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8005b30:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b32:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005b34:	7806      	ldrb	r6, [r0, #0]
 8005b36:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005b3a:	b2d9      	uxtb	r1, r3
 8005b3c:	2909      	cmp	r1, #9
 8005b3e:	d926      	bls.n	8005b8e <_strtod_l+0x1a6>
 8005b40:	2201      	movs	r2, #1
 8005b42:	494d      	ldr	r1, [pc, #308]	; (8005c78 <_strtod_l+0x290>)
 8005b44:	f001 f9be 	bl	8006ec4 <strncmp>
 8005b48:	2800      	cmp	r0, #0
 8005b4a:	d030      	beq.n	8005bae <_strtod_l+0x1c6>
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	4632      	mov	r2, r6
 8005b50:	4603      	mov	r3, r0
 8005b52:	465e      	mov	r6, fp
 8005b54:	9008      	str	r0, [sp, #32]
 8005b56:	2a65      	cmp	r2, #101	; 0x65
 8005b58:	d001      	beq.n	8005b5e <_strtod_l+0x176>
 8005b5a:	2a45      	cmp	r2, #69	; 0x45
 8005b5c:	d113      	bne.n	8005b86 <_strtod_l+0x19e>
 8005b5e:	b91e      	cbnz	r6, 8005b68 <_strtod_l+0x180>
 8005b60:	9a05      	ldr	r2, [sp, #20]
 8005b62:	4302      	orrs	r2, r0
 8005b64:	d094      	beq.n	8005a90 <_strtod_l+0xa8>
 8005b66:	2600      	movs	r6, #0
 8005b68:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005b6a:	1c6a      	adds	r2, r5, #1
 8005b6c:	9219      	str	r2, [sp, #100]	; 0x64
 8005b6e:	786a      	ldrb	r2, [r5, #1]
 8005b70:	2a2b      	cmp	r2, #43	; 0x2b
 8005b72:	d074      	beq.n	8005c5e <_strtod_l+0x276>
 8005b74:	2a2d      	cmp	r2, #45	; 0x2d
 8005b76:	d078      	beq.n	8005c6a <_strtod_l+0x282>
 8005b78:	f04f 0c00 	mov.w	ip, #0
 8005b7c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005b80:	2909      	cmp	r1, #9
 8005b82:	d97f      	bls.n	8005c84 <_strtod_l+0x29c>
 8005b84:	9519      	str	r5, [sp, #100]	; 0x64
 8005b86:	2700      	movs	r7, #0
 8005b88:	e09e      	b.n	8005cc8 <_strtod_l+0x2e0>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	e7c8      	b.n	8005b20 <_strtod_l+0x138>
 8005b8e:	f1bb 0f08 	cmp.w	fp, #8
 8005b92:	bfd8      	it	le
 8005b94:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8005b96:	f100 0001 	add.w	r0, r0, #1
 8005b9a:	bfd6      	itet	le
 8005b9c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005ba0:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8005ba4:	930a      	strle	r3, [sp, #40]	; 0x28
 8005ba6:	f10b 0b01 	add.w	fp, fp, #1
 8005baa:	9019      	str	r0, [sp, #100]	; 0x64
 8005bac:	e7c1      	b.n	8005b32 <_strtod_l+0x14a>
 8005bae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	9219      	str	r2, [sp, #100]	; 0x64
 8005bb4:	785a      	ldrb	r2, [r3, #1]
 8005bb6:	f1bb 0f00 	cmp.w	fp, #0
 8005bba:	d037      	beq.n	8005c2c <_strtod_l+0x244>
 8005bbc:	465e      	mov	r6, fp
 8005bbe:	9008      	str	r0, [sp, #32]
 8005bc0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005bc4:	2b09      	cmp	r3, #9
 8005bc6:	d912      	bls.n	8005bee <_strtod_l+0x206>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e7c4      	b.n	8005b56 <_strtod_l+0x16e>
 8005bcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005bce:	3001      	adds	r0, #1
 8005bd0:	1c5a      	adds	r2, r3, #1
 8005bd2:	9219      	str	r2, [sp, #100]	; 0x64
 8005bd4:	785a      	ldrb	r2, [r3, #1]
 8005bd6:	2a30      	cmp	r2, #48	; 0x30
 8005bd8:	d0f8      	beq.n	8005bcc <_strtod_l+0x1e4>
 8005bda:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005bde:	2b08      	cmp	r3, #8
 8005be0:	f200 84e4 	bhi.w	80065ac <_strtod_l+0xbc4>
 8005be4:	9008      	str	r0, [sp, #32]
 8005be6:	2000      	movs	r0, #0
 8005be8:	4606      	mov	r6, r0
 8005bea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005bec:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bee:	3a30      	subs	r2, #48	; 0x30
 8005bf0:	f100 0301 	add.w	r3, r0, #1
 8005bf4:	d014      	beq.n	8005c20 <_strtod_l+0x238>
 8005bf6:	9908      	ldr	r1, [sp, #32]
 8005bf8:	eb00 0c06 	add.w	ip, r0, r6
 8005bfc:	4419      	add	r1, r3
 8005bfe:	9108      	str	r1, [sp, #32]
 8005c00:	4633      	mov	r3, r6
 8005c02:	210a      	movs	r1, #10
 8005c04:	4563      	cmp	r3, ip
 8005c06:	d113      	bne.n	8005c30 <_strtod_l+0x248>
 8005c08:	1833      	adds	r3, r6, r0
 8005c0a:	2b08      	cmp	r3, #8
 8005c0c:	f106 0601 	add.w	r6, r6, #1
 8005c10:	4406      	add	r6, r0
 8005c12:	dc1a      	bgt.n	8005c4a <_strtod_l+0x262>
 8005c14:	230a      	movs	r3, #10
 8005c16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c18:	fb03 2301 	mla	r3, r3, r1, r2
 8005c1c:	930a      	str	r3, [sp, #40]	; 0x28
 8005c1e:	2300      	movs	r3, #0
 8005c20:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005c22:	4618      	mov	r0, r3
 8005c24:	1c51      	adds	r1, r2, #1
 8005c26:	9119      	str	r1, [sp, #100]	; 0x64
 8005c28:	7852      	ldrb	r2, [r2, #1]
 8005c2a:	e7c9      	b.n	8005bc0 <_strtod_l+0x1d8>
 8005c2c:	4658      	mov	r0, fp
 8005c2e:	e7d2      	b.n	8005bd6 <_strtod_l+0x1ee>
 8005c30:	2b08      	cmp	r3, #8
 8005c32:	f103 0301 	add.w	r3, r3, #1
 8005c36:	dc03      	bgt.n	8005c40 <_strtod_l+0x258>
 8005c38:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005c3a:	434f      	muls	r7, r1
 8005c3c:	970a      	str	r7, [sp, #40]	; 0x28
 8005c3e:	e7e1      	b.n	8005c04 <_strtod_l+0x21c>
 8005c40:	2b10      	cmp	r3, #16
 8005c42:	bfd8      	it	le
 8005c44:	fb01 fa0a 	mulle.w	sl, r1, sl
 8005c48:	e7dc      	b.n	8005c04 <_strtod_l+0x21c>
 8005c4a:	2e10      	cmp	r6, #16
 8005c4c:	bfdc      	itt	le
 8005c4e:	230a      	movle	r3, #10
 8005c50:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8005c54:	e7e3      	b.n	8005c1e <_strtod_l+0x236>
 8005c56:	2300      	movs	r3, #0
 8005c58:	9308      	str	r3, [sp, #32]
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e780      	b.n	8005b60 <_strtod_l+0x178>
 8005c5e:	f04f 0c00 	mov.w	ip, #0
 8005c62:	1caa      	adds	r2, r5, #2
 8005c64:	9219      	str	r2, [sp, #100]	; 0x64
 8005c66:	78aa      	ldrb	r2, [r5, #2]
 8005c68:	e788      	b.n	8005b7c <_strtod_l+0x194>
 8005c6a:	f04f 0c01 	mov.w	ip, #1
 8005c6e:	e7f8      	b.n	8005c62 <_strtod_l+0x27a>
 8005c70:	08007b40 	.word	0x08007b40
 8005c74:	7ff00000 	.word	0x7ff00000
 8005c78:	08007b3c 	.word	0x08007b3c
 8005c7c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005c7e:	1c51      	adds	r1, r2, #1
 8005c80:	9119      	str	r1, [sp, #100]	; 0x64
 8005c82:	7852      	ldrb	r2, [r2, #1]
 8005c84:	2a30      	cmp	r2, #48	; 0x30
 8005c86:	d0f9      	beq.n	8005c7c <_strtod_l+0x294>
 8005c88:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005c8c:	2908      	cmp	r1, #8
 8005c8e:	f63f af7a 	bhi.w	8005b86 <_strtod_l+0x19e>
 8005c92:	3a30      	subs	r2, #48	; 0x30
 8005c94:	9209      	str	r2, [sp, #36]	; 0x24
 8005c96:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005c98:	920c      	str	r2, [sp, #48]	; 0x30
 8005c9a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005c9c:	1c57      	adds	r7, r2, #1
 8005c9e:	9719      	str	r7, [sp, #100]	; 0x64
 8005ca0:	7852      	ldrb	r2, [r2, #1]
 8005ca2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005ca6:	f1be 0f09 	cmp.w	lr, #9
 8005caa:	d938      	bls.n	8005d1e <_strtod_l+0x336>
 8005cac:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005cae:	1a7f      	subs	r7, r7, r1
 8005cb0:	2f08      	cmp	r7, #8
 8005cb2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005cb6:	dc03      	bgt.n	8005cc0 <_strtod_l+0x2d8>
 8005cb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cba:	428f      	cmp	r7, r1
 8005cbc:	bfa8      	it	ge
 8005cbe:	460f      	movge	r7, r1
 8005cc0:	f1bc 0f00 	cmp.w	ip, #0
 8005cc4:	d000      	beq.n	8005cc8 <_strtod_l+0x2e0>
 8005cc6:	427f      	negs	r7, r7
 8005cc8:	2e00      	cmp	r6, #0
 8005cca:	d14f      	bne.n	8005d6c <_strtod_l+0x384>
 8005ccc:	9905      	ldr	r1, [sp, #20]
 8005cce:	4301      	orrs	r1, r0
 8005cd0:	f47f aec3 	bne.w	8005a5a <_strtod_l+0x72>
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f47f aedb 	bne.w	8005a90 <_strtod_l+0xa8>
 8005cda:	2a69      	cmp	r2, #105	; 0x69
 8005cdc:	d029      	beq.n	8005d32 <_strtod_l+0x34a>
 8005cde:	dc26      	bgt.n	8005d2e <_strtod_l+0x346>
 8005ce0:	2a49      	cmp	r2, #73	; 0x49
 8005ce2:	d026      	beq.n	8005d32 <_strtod_l+0x34a>
 8005ce4:	2a4e      	cmp	r2, #78	; 0x4e
 8005ce6:	f47f aed3 	bne.w	8005a90 <_strtod_l+0xa8>
 8005cea:	499a      	ldr	r1, [pc, #616]	; (8005f54 <_strtod_l+0x56c>)
 8005cec:	a819      	add	r0, sp, #100	; 0x64
 8005cee:	f001 fbfb 	bl	80074e8 <__match>
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	f43f aecc 	beq.w	8005a90 <_strtod_l+0xa8>
 8005cf8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	2b28      	cmp	r3, #40	; 0x28
 8005cfe:	d12f      	bne.n	8005d60 <_strtod_l+0x378>
 8005d00:	4995      	ldr	r1, [pc, #596]	; (8005f58 <_strtod_l+0x570>)
 8005d02:	aa1c      	add	r2, sp, #112	; 0x70
 8005d04:	a819      	add	r0, sp, #100	; 0x64
 8005d06:	f001 fc03 	bl	8007510 <__hexnan>
 8005d0a:	2805      	cmp	r0, #5
 8005d0c:	d128      	bne.n	8005d60 <_strtod_l+0x378>
 8005d0e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005d10:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005d14:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005d18:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005d1c:	e69d      	b.n	8005a5a <_strtod_l+0x72>
 8005d1e:	210a      	movs	r1, #10
 8005d20:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005d22:	fb01 2107 	mla	r1, r1, r7, r2
 8005d26:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8005d2a:	9209      	str	r2, [sp, #36]	; 0x24
 8005d2c:	e7b5      	b.n	8005c9a <_strtod_l+0x2b2>
 8005d2e:	2a6e      	cmp	r2, #110	; 0x6e
 8005d30:	e7d9      	b.n	8005ce6 <_strtod_l+0x2fe>
 8005d32:	498a      	ldr	r1, [pc, #552]	; (8005f5c <_strtod_l+0x574>)
 8005d34:	a819      	add	r0, sp, #100	; 0x64
 8005d36:	f001 fbd7 	bl	80074e8 <__match>
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	f43f aea8 	beq.w	8005a90 <_strtod_l+0xa8>
 8005d40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d42:	4987      	ldr	r1, [pc, #540]	; (8005f60 <_strtod_l+0x578>)
 8005d44:	3b01      	subs	r3, #1
 8005d46:	a819      	add	r0, sp, #100	; 0x64
 8005d48:	9319      	str	r3, [sp, #100]	; 0x64
 8005d4a:	f001 fbcd 	bl	80074e8 <__match>
 8005d4e:	b910      	cbnz	r0, 8005d56 <_strtod_l+0x36e>
 8005d50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d52:	3301      	adds	r3, #1
 8005d54:	9319      	str	r3, [sp, #100]	; 0x64
 8005d56:	f04f 0800 	mov.w	r8, #0
 8005d5a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8005f64 <_strtod_l+0x57c>
 8005d5e:	e67c      	b.n	8005a5a <_strtod_l+0x72>
 8005d60:	4881      	ldr	r0, [pc, #516]	; (8005f68 <_strtod_l+0x580>)
 8005d62:	f001 f8df 	bl	8006f24 <nan>
 8005d66:	4680      	mov	r8, r0
 8005d68:	4689      	mov	r9, r1
 8005d6a:	e676      	b.n	8005a5a <_strtod_l+0x72>
 8005d6c:	9b08      	ldr	r3, [sp, #32]
 8005d6e:	f1bb 0f00 	cmp.w	fp, #0
 8005d72:	bf08      	it	eq
 8005d74:	46b3      	moveq	fp, r6
 8005d76:	1afb      	subs	r3, r7, r3
 8005d78:	2e10      	cmp	r6, #16
 8005d7a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005d7c:	4635      	mov	r5, r6
 8005d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d80:	bfa8      	it	ge
 8005d82:	2510      	movge	r5, #16
 8005d84:	f7fa fb2e 	bl	80003e4 <__aeabi_ui2d>
 8005d88:	2e09      	cmp	r6, #9
 8005d8a:	4680      	mov	r8, r0
 8005d8c:	4689      	mov	r9, r1
 8005d8e:	dd13      	ble.n	8005db8 <_strtod_l+0x3d0>
 8005d90:	4b76      	ldr	r3, [pc, #472]	; (8005f6c <_strtod_l+0x584>)
 8005d92:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005d96:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005d9a:	f7fa fb9d 	bl	80004d8 <__aeabi_dmul>
 8005d9e:	4680      	mov	r8, r0
 8005da0:	4650      	mov	r0, sl
 8005da2:	4689      	mov	r9, r1
 8005da4:	f7fa fb1e 	bl	80003e4 <__aeabi_ui2d>
 8005da8:	4602      	mov	r2, r0
 8005daa:	460b      	mov	r3, r1
 8005dac:	4640      	mov	r0, r8
 8005dae:	4649      	mov	r1, r9
 8005db0:	f7fa f9dc 	bl	800016c <__adddf3>
 8005db4:	4680      	mov	r8, r0
 8005db6:	4689      	mov	r9, r1
 8005db8:	2e0f      	cmp	r6, #15
 8005dba:	dc36      	bgt.n	8005e2a <_strtod_l+0x442>
 8005dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f43f ae4b 	beq.w	8005a5a <_strtod_l+0x72>
 8005dc4:	dd22      	ble.n	8005e0c <_strtod_l+0x424>
 8005dc6:	2b16      	cmp	r3, #22
 8005dc8:	dc09      	bgt.n	8005dde <_strtod_l+0x3f6>
 8005dca:	4968      	ldr	r1, [pc, #416]	; (8005f6c <_strtod_l+0x584>)
 8005dcc:	4642      	mov	r2, r8
 8005dce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005dd2:	464b      	mov	r3, r9
 8005dd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dd8:	f7fa fb7e 	bl	80004d8 <__aeabi_dmul>
 8005ddc:	e7c3      	b.n	8005d66 <_strtod_l+0x37e>
 8005dde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005de0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8005de4:	4293      	cmp	r3, r2
 8005de6:	db20      	blt.n	8005e2a <_strtod_l+0x442>
 8005de8:	4c60      	ldr	r4, [pc, #384]	; (8005f6c <_strtod_l+0x584>)
 8005dea:	f1c6 060f 	rsb	r6, r6, #15
 8005dee:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8005df2:	4642      	mov	r2, r8
 8005df4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005df8:	464b      	mov	r3, r9
 8005dfa:	f7fa fb6d 	bl	80004d8 <__aeabi_dmul>
 8005dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e00:	1b9e      	subs	r6, r3, r6
 8005e02:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8005e06:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005e0a:	e7e5      	b.n	8005dd8 <_strtod_l+0x3f0>
 8005e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e0e:	3316      	adds	r3, #22
 8005e10:	db0b      	blt.n	8005e2a <_strtod_l+0x442>
 8005e12:	9b08      	ldr	r3, [sp, #32]
 8005e14:	4640      	mov	r0, r8
 8005e16:	1bdf      	subs	r7, r3, r7
 8005e18:	4b54      	ldr	r3, [pc, #336]	; (8005f6c <_strtod_l+0x584>)
 8005e1a:	4649      	mov	r1, r9
 8005e1c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e24:	f7fa fc82 	bl	800072c <__aeabi_ddiv>
 8005e28:	e79d      	b.n	8005d66 <_strtod_l+0x37e>
 8005e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e2c:	1b75      	subs	r5, r6, r5
 8005e2e:	441d      	add	r5, r3
 8005e30:	2d00      	cmp	r5, #0
 8005e32:	dd70      	ble.n	8005f16 <_strtod_l+0x52e>
 8005e34:	f015 030f 	ands.w	r3, r5, #15
 8005e38:	d00a      	beq.n	8005e50 <_strtod_l+0x468>
 8005e3a:	494c      	ldr	r1, [pc, #304]	; (8005f6c <_strtod_l+0x584>)
 8005e3c:	4642      	mov	r2, r8
 8005e3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005e42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e46:	464b      	mov	r3, r9
 8005e48:	f7fa fb46 	bl	80004d8 <__aeabi_dmul>
 8005e4c:	4680      	mov	r8, r0
 8005e4e:	4689      	mov	r9, r1
 8005e50:	f035 050f 	bics.w	r5, r5, #15
 8005e54:	d04d      	beq.n	8005ef2 <_strtod_l+0x50a>
 8005e56:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8005e5a:	dd22      	ble.n	8005ea2 <_strtod_l+0x4ba>
 8005e5c:	2600      	movs	r6, #0
 8005e5e:	46b3      	mov	fp, r6
 8005e60:	960b      	str	r6, [sp, #44]	; 0x2c
 8005e62:	9608      	str	r6, [sp, #32]
 8005e64:	2322      	movs	r3, #34	; 0x22
 8005e66:	f04f 0800 	mov.w	r8, #0
 8005e6a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8005f64 <_strtod_l+0x57c>
 8005e6e:	6023      	str	r3, [r4, #0]
 8005e70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f43f adf1 	beq.w	8005a5a <_strtod_l+0x72>
 8005e78:	4620      	mov	r0, r4
 8005e7a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005e7c:	f7ff f934 	bl	80050e8 <_Bfree>
 8005e80:	4620      	mov	r0, r4
 8005e82:	9908      	ldr	r1, [sp, #32]
 8005e84:	f7ff f930 	bl	80050e8 <_Bfree>
 8005e88:	4659      	mov	r1, fp
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	f7ff f92c 	bl	80050e8 <_Bfree>
 8005e90:	4620      	mov	r0, r4
 8005e92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e94:	f7ff f928 	bl	80050e8 <_Bfree>
 8005e98:	4631      	mov	r1, r6
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	f7ff f924 	bl	80050e8 <_Bfree>
 8005ea0:	e5db      	b.n	8005a5a <_strtod_l+0x72>
 8005ea2:	4b33      	ldr	r3, [pc, #204]	; (8005f70 <_strtod_l+0x588>)
 8005ea4:	4640      	mov	r0, r8
 8005ea6:	9305      	str	r3, [sp, #20]
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	4649      	mov	r1, r9
 8005eac:	469a      	mov	sl, r3
 8005eae:	112d      	asrs	r5, r5, #4
 8005eb0:	2d01      	cmp	r5, #1
 8005eb2:	dc21      	bgt.n	8005ef8 <_strtod_l+0x510>
 8005eb4:	b10b      	cbz	r3, 8005eba <_strtod_l+0x4d2>
 8005eb6:	4680      	mov	r8, r0
 8005eb8:	4689      	mov	r9, r1
 8005eba:	492d      	ldr	r1, [pc, #180]	; (8005f70 <_strtod_l+0x588>)
 8005ebc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005ec0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005ec4:	4642      	mov	r2, r8
 8005ec6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005eca:	464b      	mov	r3, r9
 8005ecc:	f7fa fb04 	bl	80004d8 <__aeabi_dmul>
 8005ed0:	4b24      	ldr	r3, [pc, #144]	; (8005f64 <_strtod_l+0x57c>)
 8005ed2:	460a      	mov	r2, r1
 8005ed4:	400b      	ands	r3, r1
 8005ed6:	4927      	ldr	r1, [pc, #156]	; (8005f74 <_strtod_l+0x58c>)
 8005ed8:	4680      	mov	r8, r0
 8005eda:	428b      	cmp	r3, r1
 8005edc:	d8be      	bhi.n	8005e5c <_strtod_l+0x474>
 8005ede:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005ee2:	428b      	cmp	r3, r1
 8005ee4:	bf86      	itte	hi
 8005ee6:	f04f 38ff 	movhi.w	r8, #4294967295
 8005eea:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8005f78 <_strtod_l+0x590>
 8005eee:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	9305      	str	r3, [sp, #20]
 8005ef6:	e07b      	b.n	8005ff0 <_strtod_l+0x608>
 8005ef8:	07ea      	lsls	r2, r5, #31
 8005efa:	d505      	bpl.n	8005f08 <_strtod_l+0x520>
 8005efc:	9b05      	ldr	r3, [sp, #20]
 8005efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f02:	f7fa fae9 	bl	80004d8 <__aeabi_dmul>
 8005f06:	2301      	movs	r3, #1
 8005f08:	9a05      	ldr	r2, [sp, #20]
 8005f0a:	f10a 0a01 	add.w	sl, sl, #1
 8005f0e:	3208      	adds	r2, #8
 8005f10:	106d      	asrs	r5, r5, #1
 8005f12:	9205      	str	r2, [sp, #20]
 8005f14:	e7cc      	b.n	8005eb0 <_strtod_l+0x4c8>
 8005f16:	d0ec      	beq.n	8005ef2 <_strtod_l+0x50a>
 8005f18:	426d      	negs	r5, r5
 8005f1a:	f015 020f 	ands.w	r2, r5, #15
 8005f1e:	d00a      	beq.n	8005f36 <_strtod_l+0x54e>
 8005f20:	4b12      	ldr	r3, [pc, #72]	; (8005f6c <_strtod_l+0x584>)
 8005f22:	4640      	mov	r0, r8
 8005f24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f28:	4649      	mov	r1, r9
 8005f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2e:	f7fa fbfd 	bl	800072c <__aeabi_ddiv>
 8005f32:	4680      	mov	r8, r0
 8005f34:	4689      	mov	r9, r1
 8005f36:	112d      	asrs	r5, r5, #4
 8005f38:	d0db      	beq.n	8005ef2 <_strtod_l+0x50a>
 8005f3a:	2d1f      	cmp	r5, #31
 8005f3c:	dd1e      	ble.n	8005f7c <_strtod_l+0x594>
 8005f3e:	2600      	movs	r6, #0
 8005f40:	46b3      	mov	fp, r6
 8005f42:	960b      	str	r6, [sp, #44]	; 0x2c
 8005f44:	9608      	str	r6, [sp, #32]
 8005f46:	2322      	movs	r3, #34	; 0x22
 8005f48:	f04f 0800 	mov.w	r8, #0
 8005f4c:	f04f 0900 	mov.w	r9, #0
 8005f50:	6023      	str	r3, [r4, #0]
 8005f52:	e78d      	b.n	8005e70 <_strtod_l+0x488>
 8005f54:	08007927 	.word	0x08007927
 8005f58:	08007b54 	.word	0x08007b54
 8005f5c:	0800791f 	.word	0x0800791f
 8005f60:	08007956 	.word	0x08007956
 8005f64:	7ff00000 	.word	0x7ff00000
 8005f68:	08007ce5 	.word	0x08007ce5
 8005f6c:	08007a68 	.word	0x08007a68
 8005f70:	08007a40 	.word	0x08007a40
 8005f74:	7ca00000 	.word	0x7ca00000
 8005f78:	7fefffff 	.word	0x7fefffff
 8005f7c:	f015 0310 	ands.w	r3, r5, #16
 8005f80:	bf18      	it	ne
 8005f82:	236a      	movne	r3, #106	; 0x6a
 8005f84:	4640      	mov	r0, r8
 8005f86:	9305      	str	r3, [sp, #20]
 8005f88:	4649      	mov	r1, r9
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8006258 <_strtod_l+0x870>
 8005f90:	07ea      	lsls	r2, r5, #31
 8005f92:	d504      	bpl.n	8005f9e <_strtod_l+0x5b6>
 8005f94:	e9da 2300 	ldrd	r2, r3, [sl]
 8005f98:	f7fa fa9e 	bl	80004d8 <__aeabi_dmul>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	106d      	asrs	r5, r5, #1
 8005fa0:	f10a 0a08 	add.w	sl, sl, #8
 8005fa4:	d1f4      	bne.n	8005f90 <_strtod_l+0x5a8>
 8005fa6:	b10b      	cbz	r3, 8005fac <_strtod_l+0x5c4>
 8005fa8:	4680      	mov	r8, r0
 8005faa:	4689      	mov	r9, r1
 8005fac:	9b05      	ldr	r3, [sp, #20]
 8005fae:	b1bb      	cbz	r3, 8005fe0 <_strtod_l+0x5f8>
 8005fb0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005fb4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	4649      	mov	r1, r9
 8005fbc:	dd10      	ble.n	8005fe0 <_strtod_l+0x5f8>
 8005fbe:	2b1f      	cmp	r3, #31
 8005fc0:	f340 8128 	ble.w	8006214 <_strtod_l+0x82c>
 8005fc4:	2b34      	cmp	r3, #52	; 0x34
 8005fc6:	bfd8      	it	le
 8005fc8:	f04f 33ff 	movle.w	r3, #4294967295
 8005fcc:	f04f 0800 	mov.w	r8, #0
 8005fd0:	bfcf      	iteee	gt
 8005fd2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005fd6:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005fda:	4093      	lslle	r3, r2
 8005fdc:	ea03 0901 	andle.w	r9, r3, r1
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	4640      	mov	r0, r8
 8005fe6:	4649      	mov	r1, r9
 8005fe8:	f7fa fcde 	bl	80009a8 <__aeabi_dcmpeq>
 8005fec:	2800      	cmp	r0, #0
 8005fee:	d1a6      	bne.n	8005f3e <_strtod_l+0x556>
 8005ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ff2:	465a      	mov	r2, fp
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	4633      	mov	r3, r6
 8005ffa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ffc:	f7ff f8dc 	bl	80051b8 <__s2b>
 8006000:	900b      	str	r0, [sp, #44]	; 0x2c
 8006002:	2800      	cmp	r0, #0
 8006004:	f43f af2a 	beq.w	8005e5c <_strtod_l+0x474>
 8006008:	2600      	movs	r6, #0
 800600a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800600c:	9b08      	ldr	r3, [sp, #32]
 800600e:	2a00      	cmp	r2, #0
 8006010:	eba3 0307 	sub.w	r3, r3, r7
 8006014:	bfa8      	it	ge
 8006016:	2300      	movge	r3, #0
 8006018:	46b3      	mov	fp, r6
 800601a:	9312      	str	r3, [sp, #72]	; 0x48
 800601c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006020:	9316      	str	r3, [sp, #88]	; 0x58
 8006022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006024:	4620      	mov	r0, r4
 8006026:	6859      	ldr	r1, [r3, #4]
 8006028:	f7ff f81e 	bl	8005068 <_Balloc>
 800602c:	9008      	str	r0, [sp, #32]
 800602e:	2800      	cmp	r0, #0
 8006030:	f43f af18 	beq.w	8005e64 <_strtod_l+0x47c>
 8006034:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006036:	300c      	adds	r0, #12
 8006038:	691a      	ldr	r2, [r3, #16]
 800603a:	f103 010c 	add.w	r1, r3, #12
 800603e:	3202      	adds	r2, #2
 8006040:	0092      	lsls	r2, r2, #2
 8006042:	f000 ff61 	bl	8006f08 <memcpy>
 8006046:	ab1c      	add	r3, sp, #112	; 0x70
 8006048:	9301      	str	r3, [sp, #4]
 800604a:	ab1b      	add	r3, sp, #108	; 0x6c
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	4642      	mov	r2, r8
 8006050:	464b      	mov	r3, r9
 8006052:	4620      	mov	r0, r4
 8006054:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8006058:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800605c:	f7ff fbd8 	bl	8005810 <__d2b>
 8006060:	901a      	str	r0, [sp, #104]	; 0x68
 8006062:	2800      	cmp	r0, #0
 8006064:	f43f aefe 	beq.w	8005e64 <_strtod_l+0x47c>
 8006068:	2101      	movs	r1, #1
 800606a:	4620      	mov	r0, r4
 800606c:	f7ff f93c 	bl	80052e8 <__i2b>
 8006070:	4683      	mov	fp, r0
 8006072:	2800      	cmp	r0, #0
 8006074:	f43f aef6 	beq.w	8005e64 <_strtod_l+0x47c>
 8006078:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800607a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800607c:	2f00      	cmp	r7, #0
 800607e:	bfab      	itete	ge
 8006080:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8006082:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006084:	eb07 0a03 	addge.w	sl, r7, r3
 8006088:	1bdd      	sublt	r5, r3, r7
 800608a:	9b05      	ldr	r3, [sp, #20]
 800608c:	bfa8      	it	ge
 800608e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006090:	eba7 0703 	sub.w	r7, r7, r3
 8006094:	4417      	add	r7, r2
 8006096:	4b71      	ldr	r3, [pc, #452]	; (800625c <_strtod_l+0x874>)
 8006098:	f107 37ff 	add.w	r7, r7, #4294967295
 800609c:	bfb8      	it	lt
 800609e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 80060a2:	429f      	cmp	r7, r3
 80060a4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80060a8:	f280 80c7 	bge.w	800623a <_strtod_l+0x852>
 80060ac:	1bdb      	subs	r3, r3, r7
 80060ae:	2b1f      	cmp	r3, #31
 80060b0:	f04f 0101 	mov.w	r1, #1
 80060b4:	eba2 0203 	sub.w	r2, r2, r3
 80060b8:	f300 80b3 	bgt.w	8006222 <_strtod_l+0x83a>
 80060bc:	fa01 f303 	lsl.w	r3, r1, r3
 80060c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80060c2:	2300      	movs	r3, #0
 80060c4:	9310      	str	r3, [sp, #64]	; 0x40
 80060c6:	eb0a 0702 	add.w	r7, sl, r2
 80060ca:	9b05      	ldr	r3, [sp, #20]
 80060cc:	45ba      	cmp	sl, r7
 80060ce:	4415      	add	r5, r2
 80060d0:	441d      	add	r5, r3
 80060d2:	4653      	mov	r3, sl
 80060d4:	bfa8      	it	ge
 80060d6:	463b      	movge	r3, r7
 80060d8:	42ab      	cmp	r3, r5
 80060da:	bfa8      	it	ge
 80060dc:	462b      	movge	r3, r5
 80060de:	2b00      	cmp	r3, #0
 80060e0:	bfc2      	ittt	gt
 80060e2:	1aff      	subgt	r7, r7, r3
 80060e4:	1aed      	subgt	r5, r5, r3
 80060e6:	ebaa 0a03 	subgt.w	sl, sl, r3
 80060ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	dd17      	ble.n	8006120 <_strtod_l+0x738>
 80060f0:	4659      	mov	r1, fp
 80060f2:	461a      	mov	r2, r3
 80060f4:	4620      	mov	r0, r4
 80060f6:	f7ff f9b5 	bl	8005464 <__pow5mult>
 80060fa:	4683      	mov	fp, r0
 80060fc:	2800      	cmp	r0, #0
 80060fe:	f43f aeb1 	beq.w	8005e64 <_strtod_l+0x47c>
 8006102:	4601      	mov	r1, r0
 8006104:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006106:	4620      	mov	r0, r4
 8006108:	f7ff f904 	bl	8005314 <__multiply>
 800610c:	900a      	str	r0, [sp, #40]	; 0x28
 800610e:	2800      	cmp	r0, #0
 8006110:	f43f aea8 	beq.w	8005e64 <_strtod_l+0x47c>
 8006114:	4620      	mov	r0, r4
 8006116:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006118:	f7fe ffe6 	bl	80050e8 <_Bfree>
 800611c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800611e:	931a      	str	r3, [sp, #104]	; 0x68
 8006120:	2f00      	cmp	r7, #0
 8006122:	f300 808f 	bgt.w	8006244 <_strtod_l+0x85c>
 8006126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006128:	2b00      	cmp	r3, #0
 800612a:	dd08      	ble.n	800613e <_strtod_l+0x756>
 800612c:	4620      	mov	r0, r4
 800612e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006130:	9908      	ldr	r1, [sp, #32]
 8006132:	f7ff f997 	bl	8005464 <__pow5mult>
 8006136:	9008      	str	r0, [sp, #32]
 8006138:	2800      	cmp	r0, #0
 800613a:	f43f ae93 	beq.w	8005e64 <_strtod_l+0x47c>
 800613e:	2d00      	cmp	r5, #0
 8006140:	dd08      	ble.n	8006154 <_strtod_l+0x76c>
 8006142:	462a      	mov	r2, r5
 8006144:	4620      	mov	r0, r4
 8006146:	9908      	ldr	r1, [sp, #32]
 8006148:	f7ff f9e6 	bl	8005518 <__lshift>
 800614c:	9008      	str	r0, [sp, #32]
 800614e:	2800      	cmp	r0, #0
 8006150:	f43f ae88 	beq.w	8005e64 <_strtod_l+0x47c>
 8006154:	f1ba 0f00 	cmp.w	sl, #0
 8006158:	dd08      	ble.n	800616c <_strtod_l+0x784>
 800615a:	4659      	mov	r1, fp
 800615c:	4652      	mov	r2, sl
 800615e:	4620      	mov	r0, r4
 8006160:	f7ff f9da 	bl	8005518 <__lshift>
 8006164:	4683      	mov	fp, r0
 8006166:	2800      	cmp	r0, #0
 8006168:	f43f ae7c 	beq.w	8005e64 <_strtod_l+0x47c>
 800616c:	4620      	mov	r0, r4
 800616e:	9a08      	ldr	r2, [sp, #32]
 8006170:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006172:	f7ff fa59 	bl	8005628 <__mdiff>
 8006176:	4606      	mov	r6, r0
 8006178:	2800      	cmp	r0, #0
 800617a:	f43f ae73 	beq.w	8005e64 <_strtod_l+0x47c>
 800617e:	2500      	movs	r5, #0
 8006180:	68c3      	ldr	r3, [r0, #12]
 8006182:	4659      	mov	r1, fp
 8006184:	60c5      	str	r5, [r0, #12]
 8006186:	930a      	str	r3, [sp, #40]	; 0x28
 8006188:	f7ff fa32 	bl	80055f0 <__mcmp>
 800618c:	42a8      	cmp	r0, r5
 800618e:	da6b      	bge.n	8006268 <_strtod_l+0x880>
 8006190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006192:	ea53 0308 	orrs.w	r3, r3, r8
 8006196:	f040 808f 	bne.w	80062b8 <_strtod_l+0x8d0>
 800619a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f040 808a 	bne.w	80062b8 <_strtod_l+0x8d0>
 80061a4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80061a8:	0d1b      	lsrs	r3, r3, #20
 80061aa:	051b      	lsls	r3, r3, #20
 80061ac:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80061b0:	f240 8082 	bls.w	80062b8 <_strtod_l+0x8d0>
 80061b4:	6973      	ldr	r3, [r6, #20]
 80061b6:	b913      	cbnz	r3, 80061be <_strtod_l+0x7d6>
 80061b8:	6933      	ldr	r3, [r6, #16]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	dd7c      	ble.n	80062b8 <_strtod_l+0x8d0>
 80061be:	4631      	mov	r1, r6
 80061c0:	2201      	movs	r2, #1
 80061c2:	4620      	mov	r0, r4
 80061c4:	f7ff f9a8 	bl	8005518 <__lshift>
 80061c8:	4659      	mov	r1, fp
 80061ca:	4606      	mov	r6, r0
 80061cc:	f7ff fa10 	bl	80055f0 <__mcmp>
 80061d0:	2800      	cmp	r0, #0
 80061d2:	dd71      	ble.n	80062b8 <_strtod_l+0x8d0>
 80061d4:	9905      	ldr	r1, [sp, #20]
 80061d6:	464b      	mov	r3, r9
 80061d8:	4a21      	ldr	r2, [pc, #132]	; (8006260 <_strtod_l+0x878>)
 80061da:	2900      	cmp	r1, #0
 80061dc:	f000 808d 	beq.w	80062fa <_strtod_l+0x912>
 80061e0:	ea02 0109 	and.w	r1, r2, r9
 80061e4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80061e8:	f300 8087 	bgt.w	80062fa <_strtod_l+0x912>
 80061ec:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80061f0:	f77f aea9 	ble.w	8005f46 <_strtod_l+0x55e>
 80061f4:	4640      	mov	r0, r8
 80061f6:	4649      	mov	r1, r9
 80061f8:	4b1a      	ldr	r3, [pc, #104]	; (8006264 <_strtod_l+0x87c>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	f7fa f96c 	bl	80004d8 <__aeabi_dmul>
 8006200:	4b17      	ldr	r3, [pc, #92]	; (8006260 <_strtod_l+0x878>)
 8006202:	4680      	mov	r8, r0
 8006204:	400b      	ands	r3, r1
 8006206:	4689      	mov	r9, r1
 8006208:	2b00      	cmp	r3, #0
 800620a:	f47f ae35 	bne.w	8005e78 <_strtod_l+0x490>
 800620e:	2322      	movs	r3, #34	; 0x22
 8006210:	6023      	str	r3, [r4, #0]
 8006212:	e631      	b.n	8005e78 <_strtod_l+0x490>
 8006214:	f04f 32ff 	mov.w	r2, #4294967295
 8006218:	fa02 f303 	lsl.w	r3, r2, r3
 800621c:	ea03 0808 	and.w	r8, r3, r8
 8006220:	e6de      	b.n	8005fe0 <_strtod_l+0x5f8>
 8006222:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8006226:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800622a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800622e:	37e2      	adds	r7, #226	; 0xe2
 8006230:	fa01 f307 	lsl.w	r3, r1, r7
 8006234:	9310      	str	r3, [sp, #64]	; 0x40
 8006236:	9113      	str	r1, [sp, #76]	; 0x4c
 8006238:	e745      	b.n	80060c6 <_strtod_l+0x6de>
 800623a:	2300      	movs	r3, #0
 800623c:	9310      	str	r3, [sp, #64]	; 0x40
 800623e:	2301      	movs	r3, #1
 8006240:	9313      	str	r3, [sp, #76]	; 0x4c
 8006242:	e740      	b.n	80060c6 <_strtod_l+0x6de>
 8006244:	463a      	mov	r2, r7
 8006246:	4620      	mov	r0, r4
 8006248:	991a      	ldr	r1, [sp, #104]	; 0x68
 800624a:	f7ff f965 	bl	8005518 <__lshift>
 800624e:	901a      	str	r0, [sp, #104]	; 0x68
 8006250:	2800      	cmp	r0, #0
 8006252:	f47f af68 	bne.w	8006126 <_strtod_l+0x73e>
 8006256:	e605      	b.n	8005e64 <_strtod_l+0x47c>
 8006258:	08007b68 	.word	0x08007b68
 800625c:	fffffc02 	.word	0xfffffc02
 8006260:	7ff00000 	.word	0x7ff00000
 8006264:	39500000 	.word	0x39500000
 8006268:	46ca      	mov	sl, r9
 800626a:	d165      	bne.n	8006338 <_strtod_l+0x950>
 800626c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800626e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006272:	b352      	cbz	r2, 80062ca <_strtod_l+0x8e2>
 8006274:	4a9e      	ldr	r2, [pc, #632]	; (80064f0 <_strtod_l+0xb08>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d12a      	bne.n	80062d0 <_strtod_l+0x8e8>
 800627a:	9b05      	ldr	r3, [sp, #20]
 800627c:	4641      	mov	r1, r8
 800627e:	b1fb      	cbz	r3, 80062c0 <_strtod_l+0x8d8>
 8006280:	4b9c      	ldr	r3, [pc, #624]	; (80064f4 <_strtod_l+0xb0c>)
 8006282:	f04f 32ff 	mov.w	r2, #4294967295
 8006286:	ea09 0303 	and.w	r3, r9, r3
 800628a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800628e:	d81a      	bhi.n	80062c6 <_strtod_l+0x8de>
 8006290:	0d1b      	lsrs	r3, r3, #20
 8006292:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006296:	fa02 f303 	lsl.w	r3, r2, r3
 800629a:	4299      	cmp	r1, r3
 800629c:	d118      	bne.n	80062d0 <_strtod_l+0x8e8>
 800629e:	4b96      	ldr	r3, [pc, #600]	; (80064f8 <_strtod_l+0xb10>)
 80062a0:	459a      	cmp	sl, r3
 80062a2:	d102      	bne.n	80062aa <_strtod_l+0x8c2>
 80062a4:	3101      	adds	r1, #1
 80062a6:	f43f addd 	beq.w	8005e64 <_strtod_l+0x47c>
 80062aa:	f04f 0800 	mov.w	r8, #0
 80062ae:	4b91      	ldr	r3, [pc, #580]	; (80064f4 <_strtod_l+0xb0c>)
 80062b0:	ea0a 0303 	and.w	r3, sl, r3
 80062b4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80062b8:	9b05      	ldr	r3, [sp, #20]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d19a      	bne.n	80061f4 <_strtod_l+0x80c>
 80062be:	e5db      	b.n	8005e78 <_strtod_l+0x490>
 80062c0:	f04f 33ff 	mov.w	r3, #4294967295
 80062c4:	e7e9      	b.n	800629a <_strtod_l+0x8b2>
 80062c6:	4613      	mov	r3, r2
 80062c8:	e7e7      	b.n	800629a <_strtod_l+0x8b2>
 80062ca:	ea53 0308 	orrs.w	r3, r3, r8
 80062ce:	d081      	beq.n	80061d4 <_strtod_l+0x7ec>
 80062d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062d2:	b1e3      	cbz	r3, 800630e <_strtod_l+0x926>
 80062d4:	ea13 0f0a 	tst.w	r3, sl
 80062d8:	d0ee      	beq.n	80062b8 <_strtod_l+0x8d0>
 80062da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062dc:	4640      	mov	r0, r8
 80062de:	4649      	mov	r1, r9
 80062e0:	9a05      	ldr	r2, [sp, #20]
 80062e2:	b1c3      	cbz	r3, 8006316 <_strtod_l+0x92e>
 80062e4:	f7ff fb5c 	bl	80059a0 <sulp>
 80062e8:	4602      	mov	r2, r0
 80062ea:	460b      	mov	r3, r1
 80062ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80062ee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80062f0:	f7f9 ff3c 	bl	800016c <__adddf3>
 80062f4:	4680      	mov	r8, r0
 80062f6:	4689      	mov	r9, r1
 80062f8:	e7de      	b.n	80062b8 <_strtod_l+0x8d0>
 80062fa:	4013      	ands	r3, r2
 80062fc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006300:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006304:	f04f 38ff 	mov.w	r8, #4294967295
 8006308:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800630c:	e7d4      	b.n	80062b8 <_strtod_l+0x8d0>
 800630e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006310:	ea13 0f08 	tst.w	r3, r8
 8006314:	e7e0      	b.n	80062d8 <_strtod_l+0x8f0>
 8006316:	f7ff fb43 	bl	80059a0 <sulp>
 800631a:	4602      	mov	r2, r0
 800631c:	460b      	mov	r3, r1
 800631e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006320:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006322:	f7f9 ff21 	bl	8000168 <__aeabi_dsub>
 8006326:	2200      	movs	r2, #0
 8006328:	2300      	movs	r3, #0
 800632a:	4680      	mov	r8, r0
 800632c:	4689      	mov	r9, r1
 800632e:	f7fa fb3b 	bl	80009a8 <__aeabi_dcmpeq>
 8006332:	2800      	cmp	r0, #0
 8006334:	d0c0      	beq.n	80062b8 <_strtod_l+0x8d0>
 8006336:	e606      	b.n	8005f46 <_strtod_l+0x55e>
 8006338:	4659      	mov	r1, fp
 800633a:	4630      	mov	r0, r6
 800633c:	f7ff fabe 	bl	80058bc <__ratio>
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006348:	2200      	movs	r2, #0
 800634a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800634e:	f7fa fb3f 	bl	80009d0 <__aeabi_dcmple>
 8006352:	2800      	cmp	r0, #0
 8006354:	d06f      	beq.n	8006436 <_strtod_l+0xa4e>
 8006356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006358:	2b00      	cmp	r3, #0
 800635a:	d17c      	bne.n	8006456 <_strtod_l+0xa6e>
 800635c:	f1b8 0f00 	cmp.w	r8, #0
 8006360:	d159      	bne.n	8006416 <_strtod_l+0xa2e>
 8006362:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006366:	2b00      	cmp	r3, #0
 8006368:	d17b      	bne.n	8006462 <_strtod_l+0xa7a>
 800636a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800636e:	2200      	movs	r2, #0
 8006370:	4b62      	ldr	r3, [pc, #392]	; (80064fc <_strtod_l+0xb14>)
 8006372:	f7fa fb23 	bl	80009bc <__aeabi_dcmplt>
 8006376:	2800      	cmp	r0, #0
 8006378:	d15a      	bne.n	8006430 <_strtod_l+0xa48>
 800637a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800637e:	2200      	movs	r2, #0
 8006380:	4b5f      	ldr	r3, [pc, #380]	; (8006500 <_strtod_l+0xb18>)
 8006382:	f7fa f8a9 	bl	80004d8 <__aeabi_dmul>
 8006386:	4605      	mov	r5, r0
 8006388:	460f      	mov	r7, r1
 800638a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800638e:	9506      	str	r5, [sp, #24]
 8006390:	9307      	str	r3, [sp, #28]
 8006392:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006396:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800639a:	4b56      	ldr	r3, [pc, #344]	; (80064f4 <_strtod_l+0xb0c>)
 800639c:	4a55      	ldr	r2, [pc, #340]	; (80064f4 <_strtod_l+0xb0c>)
 800639e:	ea0a 0303 	and.w	r3, sl, r3
 80063a2:	9313      	str	r3, [sp, #76]	; 0x4c
 80063a4:	4b57      	ldr	r3, [pc, #348]	; (8006504 <_strtod_l+0xb1c>)
 80063a6:	ea0a 0202 	and.w	r2, sl, r2
 80063aa:	429a      	cmp	r2, r3
 80063ac:	f040 80b0 	bne.w	8006510 <_strtod_l+0xb28>
 80063b0:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80063b4:	4640      	mov	r0, r8
 80063b6:	4649      	mov	r1, r9
 80063b8:	f7ff f9c2 	bl	8005740 <__ulp>
 80063bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063c0:	f7fa f88a 	bl	80004d8 <__aeabi_dmul>
 80063c4:	4642      	mov	r2, r8
 80063c6:	464b      	mov	r3, r9
 80063c8:	f7f9 fed0 	bl	800016c <__adddf3>
 80063cc:	f8df a124 	ldr.w	sl, [pc, #292]	; 80064f4 <_strtod_l+0xb0c>
 80063d0:	4a4d      	ldr	r2, [pc, #308]	; (8006508 <_strtod_l+0xb20>)
 80063d2:	ea01 0a0a 	and.w	sl, r1, sl
 80063d6:	4592      	cmp	sl, r2
 80063d8:	4680      	mov	r8, r0
 80063da:	d948      	bls.n	800646e <_strtod_l+0xa86>
 80063dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063de:	4b46      	ldr	r3, [pc, #280]	; (80064f8 <_strtod_l+0xb10>)
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d103      	bne.n	80063ec <_strtod_l+0xa04>
 80063e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063e6:	3301      	adds	r3, #1
 80063e8:	f43f ad3c 	beq.w	8005e64 <_strtod_l+0x47c>
 80063ec:	f04f 38ff 	mov.w	r8, #4294967295
 80063f0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80064f8 <_strtod_l+0xb10>
 80063f4:	4620      	mov	r0, r4
 80063f6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80063f8:	f7fe fe76 	bl	80050e8 <_Bfree>
 80063fc:	4620      	mov	r0, r4
 80063fe:	9908      	ldr	r1, [sp, #32]
 8006400:	f7fe fe72 	bl	80050e8 <_Bfree>
 8006404:	4659      	mov	r1, fp
 8006406:	4620      	mov	r0, r4
 8006408:	f7fe fe6e 	bl	80050e8 <_Bfree>
 800640c:	4631      	mov	r1, r6
 800640e:	4620      	mov	r0, r4
 8006410:	f7fe fe6a 	bl	80050e8 <_Bfree>
 8006414:	e605      	b.n	8006022 <_strtod_l+0x63a>
 8006416:	f1b8 0f01 	cmp.w	r8, #1
 800641a:	d103      	bne.n	8006424 <_strtod_l+0xa3c>
 800641c:	f1b9 0f00 	cmp.w	r9, #0
 8006420:	f43f ad91 	beq.w	8005f46 <_strtod_l+0x55e>
 8006424:	2200      	movs	r2, #0
 8006426:	4b39      	ldr	r3, [pc, #228]	; (800650c <_strtod_l+0xb24>)
 8006428:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800642a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800642e:	e016      	b.n	800645e <_strtod_l+0xa76>
 8006430:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006432:	4f33      	ldr	r7, [pc, #204]	; (8006500 <_strtod_l+0xb18>)
 8006434:	e7a9      	b.n	800638a <_strtod_l+0x9a2>
 8006436:	4b32      	ldr	r3, [pc, #200]	; (8006500 <_strtod_l+0xb18>)
 8006438:	2200      	movs	r2, #0
 800643a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800643e:	f7fa f84b 	bl	80004d8 <__aeabi_dmul>
 8006442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006444:	4605      	mov	r5, r0
 8006446:	460f      	mov	r7, r1
 8006448:	2b00      	cmp	r3, #0
 800644a:	d09e      	beq.n	800638a <_strtod_l+0x9a2>
 800644c:	4602      	mov	r2, r0
 800644e:	460b      	mov	r3, r1
 8006450:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006454:	e79d      	b.n	8006392 <_strtod_l+0x9aa>
 8006456:	2200      	movs	r2, #0
 8006458:	4b28      	ldr	r3, [pc, #160]	; (80064fc <_strtod_l+0xb14>)
 800645a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800645e:	4f27      	ldr	r7, [pc, #156]	; (80064fc <_strtod_l+0xb14>)
 8006460:	e797      	b.n	8006392 <_strtod_l+0x9aa>
 8006462:	2200      	movs	r2, #0
 8006464:	4b29      	ldr	r3, [pc, #164]	; (800650c <_strtod_l+0xb24>)
 8006466:	4645      	mov	r5, r8
 8006468:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800646c:	e7f7      	b.n	800645e <_strtod_l+0xa76>
 800646e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8006472:	9b05      	ldr	r3, [sp, #20]
 8006474:	46ca      	mov	sl, r9
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1bc      	bne.n	80063f4 <_strtod_l+0xa0c>
 800647a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800647e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006480:	0d1b      	lsrs	r3, r3, #20
 8006482:	051b      	lsls	r3, r3, #20
 8006484:	429a      	cmp	r2, r3
 8006486:	d1b5      	bne.n	80063f4 <_strtod_l+0xa0c>
 8006488:	4628      	mov	r0, r5
 800648a:	4639      	mov	r1, r7
 800648c:	f7fa fb6c 	bl	8000b68 <__aeabi_d2lz>
 8006490:	f7f9 fff4 	bl	800047c <__aeabi_l2d>
 8006494:	4602      	mov	r2, r0
 8006496:	460b      	mov	r3, r1
 8006498:	4628      	mov	r0, r5
 800649a:	4639      	mov	r1, r7
 800649c:	f7f9 fe64 	bl	8000168 <__aeabi_dsub>
 80064a0:	460b      	mov	r3, r1
 80064a2:	4602      	mov	r2, r0
 80064a4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 80064a8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80064ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064ae:	ea4a 0a08 	orr.w	sl, sl, r8
 80064b2:	ea5a 0a03 	orrs.w	sl, sl, r3
 80064b6:	d06c      	beq.n	8006592 <_strtod_l+0xbaa>
 80064b8:	a309      	add	r3, pc, #36	; (adr r3, 80064e0 <_strtod_l+0xaf8>)
 80064ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064be:	f7fa fa7d 	bl	80009bc <__aeabi_dcmplt>
 80064c2:	2800      	cmp	r0, #0
 80064c4:	f47f acd8 	bne.w	8005e78 <_strtod_l+0x490>
 80064c8:	a307      	add	r3, pc, #28	; (adr r3, 80064e8 <_strtod_l+0xb00>)
 80064ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80064d2:	f7fa fa91 	bl	80009f8 <__aeabi_dcmpgt>
 80064d6:	2800      	cmp	r0, #0
 80064d8:	d08c      	beq.n	80063f4 <_strtod_l+0xa0c>
 80064da:	e4cd      	b.n	8005e78 <_strtod_l+0x490>
 80064dc:	f3af 8000 	nop.w
 80064e0:	94a03595 	.word	0x94a03595
 80064e4:	3fdfffff 	.word	0x3fdfffff
 80064e8:	35afe535 	.word	0x35afe535
 80064ec:	3fe00000 	.word	0x3fe00000
 80064f0:	000fffff 	.word	0x000fffff
 80064f4:	7ff00000 	.word	0x7ff00000
 80064f8:	7fefffff 	.word	0x7fefffff
 80064fc:	3ff00000 	.word	0x3ff00000
 8006500:	3fe00000 	.word	0x3fe00000
 8006504:	7fe00000 	.word	0x7fe00000
 8006508:	7c9fffff 	.word	0x7c9fffff
 800650c:	bff00000 	.word	0xbff00000
 8006510:	9b05      	ldr	r3, [sp, #20]
 8006512:	b333      	cbz	r3, 8006562 <_strtod_l+0xb7a>
 8006514:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006516:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800651a:	d822      	bhi.n	8006562 <_strtod_l+0xb7a>
 800651c:	a328      	add	r3, pc, #160	; (adr r3, 80065c0 <_strtod_l+0xbd8>)
 800651e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006522:	4628      	mov	r0, r5
 8006524:	4639      	mov	r1, r7
 8006526:	f7fa fa53 	bl	80009d0 <__aeabi_dcmple>
 800652a:	b1a0      	cbz	r0, 8006556 <_strtod_l+0xb6e>
 800652c:	4639      	mov	r1, r7
 800652e:	4628      	mov	r0, r5
 8006530:	f7fa faaa 	bl	8000a88 <__aeabi_d2uiz>
 8006534:	2801      	cmp	r0, #1
 8006536:	bf38      	it	cc
 8006538:	2001      	movcc	r0, #1
 800653a:	f7f9 ff53 	bl	80003e4 <__aeabi_ui2d>
 800653e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006540:	4605      	mov	r5, r0
 8006542:	460f      	mov	r7, r1
 8006544:	bb03      	cbnz	r3, 8006588 <_strtod_l+0xba0>
 8006546:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800654a:	9014      	str	r0, [sp, #80]	; 0x50
 800654c:	9315      	str	r3, [sp, #84]	; 0x54
 800654e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006552:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006556:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006558:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800655a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800655e:	1a9b      	subs	r3, r3, r2
 8006560:	9311      	str	r3, [sp, #68]	; 0x44
 8006562:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006564:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006566:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800656a:	f7ff f8e9 	bl	8005740 <__ulp>
 800656e:	4602      	mov	r2, r0
 8006570:	460b      	mov	r3, r1
 8006572:	4640      	mov	r0, r8
 8006574:	4649      	mov	r1, r9
 8006576:	f7f9 ffaf 	bl	80004d8 <__aeabi_dmul>
 800657a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800657c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800657e:	f7f9 fdf5 	bl	800016c <__adddf3>
 8006582:	4680      	mov	r8, r0
 8006584:	4689      	mov	r9, r1
 8006586:	e774      	b.n	8006472 <_strtod_l+0xa8a>
 8006588:	4602      	mov	r2, r0
 800658a:	460b      	mov	r3, r1
 800658c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006590:	e7dd      	b.n	800654e <_strtod_l+0xb66>
 8006592:	a30d      	add	r3, pc, #52	; (adr r3, 80065c8 <_strtod_l+0xbe0>)
 8006594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006598:	f7fa fa10 	bl	80009bc <__aeabi_dcmplt>
 800659c:	e79b      	b.n	80064d6 <_strtod_l+0xaee>
 800659e:	2300      	movs	r3, #0
 80065a0:	930e      	str	r3, [sp, #56]	; 0x38
 80065a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80065a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80065a6:	6013      	str	r3, [r2, #0]
 80065a8:	f7ff ba5b 	b.w	8005a62 <_strtod_l+0x7a>
 80065ac:	2a65      	cmp	r2, #101	; 0x65
 80065ae:	f43f ab52 	beq.w	8005c56 <_strtod_l+0x26e>
 80065b2:	2a45      	cmp	r2, #69	; 0x45
 80065b4:	f43f ab4f 	beq.w	8005c56 <_strtod_l+0x26e>
 80065b8:	2301      	movs	r3, #1
 80065ba:	f7ff bb87 	b.w	8005ccc <_strtod_l+0x2e4>
 80065be:	bf00      	nop
 80065c0:	ffc00000 	.word	0xffc00000
 80065c4:	41dfffff 	.word	0x41dfffff
 80065c8:	94a03595 	.word	0x94a03595
 80065cc:	3fcfffff 	.word	0x3fcfffff

080065d0 <_strtod_r>:
 80065d0:	4b01      	ldr	r3, [pc, #4]	; (80065d8 <_strtod_r+0x8>)
 80065d2:	f7ff ba09 	b.w	80059e8 <_strtod_l>
 80065d6:	bf00      	nop
 80065d8:	20000068 	.word	0x20000068

080065dc <_strtol_l.constprop.0>:
 80065dc:	2b01      	cmp	r3, #1
 80065de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065e2:	4686      	mov	lr, r0
 80065e4:	4690      	mov	r8, r2
 80065e6:	d001      	beq.n	80065ec <_strtol_l.constprop.0+0x10>
 80065e8:	2b24      	cmp	r3, #36	; 0x24
 80065ea:	d906      	bls.n	80065fa <_strtol_l.constprop.0+0x1e>
 80065ec:	f7fd fd92 	bl	8004114 <__errno>
 80065f0:	2316      	movs	r3, #22
 80065f2:	6003      	str	r3, [r0, #0]
 80065f4:	2000      	movs	r0, #0
 80065f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065fa:	460d      	mov	r5, r1
 80065fc:	4835      	ldr	r0, [pc, #212]	; (80066d4 <_strtol_l.constprop.0+0xf8>)
 80065fe:	462a      	mov	r2, r5
 8006600:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006604:	5d06      	ldrb	r6, [r0, r4]
 8006606:	f016 0608 	ands.w	r6, r6, #8
 800660a:	d1f8      	bne.n	80065fe <_strtol_l.constprop.0+0x22>
 800660c:	2c2d      	cmp	r4, #45	; 0x2d
 800660e:	d12e      	bne.n	800666e <_strtol_l.constprop.0+0x92>
 8006610:	2601      	movs	r6, #1
 8006612:	782c      	ldrb	r4, [r5, #0]
 8006614:	1c95      	adds	r5, r2, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d057      	beq.n	80066ca <_strtol_l.constprop.0+0xee>
 800661a:	2b10      	cmp	r3, #16
 800661c:	d109      	bne.n	8006632 <_strtol_l.constprop.0+0x56>
 800661e:	2c30      	cmp	r4, #48	; 0x30
 8006620:	d107      	bne.n	8006632 <_strtol_l.constprop.0+0x56>
 8006622:	782a      	ldrb	r2, [r5, #0]
 8006624:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006628:	2a58      	cmp	r2, #88	; 0x58
 800662a:	d149      	bne.n	80066c0 <_strtol_l.constprop.0+0xe4>
 800662c:	2310      	movs	r3, #16
 800662e:	786c      	ldrb	r4, [r5, #1]
 8006630:	3502      	adds	r5, #2
 8006632:	2200      	movs	r2, #0
 8006634:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8006638:	f10c 3cff 	add.w	ip, ip, #4294967295
 800663c:	fbbc f9f3 	udiv	r9, ip, r3
 8006640:	4610      	mov	r0, r2
 8006642:	fb03 ca19 	mls	sl, r3, r9, ip
 8006646:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800664a:	2f09      	cmp	r7, #9
 800664c:	d814      	bhi.n	8006678 <_strtol_l.constprop.0+0x9c>
 800664e:	463c      	mov	r4, r7
 8006650:	42a3      	cmp	r3, r4
 8006652:	dd20      	ble.n	8006696 <_strtol_l.constprop.0+0xba>
 8006654:	1c57      	adds	r7, r2, #1
 8006656:	d007      	beq.n	8006668 <_strtol_l.constprop.0+0x8c>
 8006658:	4581      	cmp	r9, r0
 800665a:	d319      	bcc.n	8006690 <_strtol_l.constprop.0+0xb4>
 800665c:	d101      	bne.n	8006662 <_strtol_l.constprop.0+0x86>
 800665e:	45a2      	cmp	sl, r4
 8006660:	db16      	blt.n	8006690 <_strtol_l.constprop.0+0xb4>
 8006662:	2201      	movs	r2, #1
 8006664:	fb00 4003 	mla	r0, r0, r3, r4
 8006668:	f815 4b01 	ldrb.w	r4, [r5], #1
 800666c:	e7eb      	b.n	8006646 <_strtol_l.constprop.0+0x6a>
 800666e:	2c2b      	cmp	r4, #43	; 0x2b
 8006670:	bf04      	itt	eq
 8006672:	782c      	ldrbeq	r4, [r5, #0]
 8006674:	1c95      	addeq	r5, r2, #2
 8006676:	e7ce      	b.n	8006616 <_strtol_l.constprop.0+0x3a>
 8006678:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800667c:	2f19      	cmp	r7, #25
 800667e:	d801      	bhi.n	8006684 <_strtol_l.constprop.0+0xa8>
 8006680:	3c37      	subs	r4, #55	; 0x37
 8006682:	e7e5      	b.n	8006650 <_strtol_l.constprop.0+0x74>
 8006684:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006688:	2f19      	cmp	r7, #25
 800668a:	d804      	bhi.n	8006696 <_strtol_l.constprop.0+0xba>
 800668c:	3c57      	subs	r4, #87	; 0x57
 800668e:	e7df      	b.n	8006650 <_strtol_l.constprop.0+0x74>
 8006690:	f04f 32ff 	mov.w	r2, #4294967295
 8006694:	e7e8      	b.n	8006668 <_strtol_l.constprop.0+0x8c>
 8006696:	1c53      	adds	r3, r2, #1
 8006698:	d108      	bne.n	80066ac <_strtol_l.constprop.0+0xd0>
 800669a:	2322      	movs	r3, #34	; 0x22
 800669c:	4660      	mov	r0, ip
 800669e:	f8ce 3000 	str.w	r3, [lr]
 80066a2:	f1b8 0f00 	cmp.w	r8, #0
 80066a6:	d0a6      	beq.n	80065f6 <_strtol_l.constprop.0+0x1a>
 80066a8:	1e69      	subs	r1, r5, #1
 80066aa:	e006      	b.n	80066ba <_strtol_l.constprop.0+0xde>
 80066ac:	b106      	cbz	r6, 80066b0 <_strtol_l.constprop.0+0xd4>
 80066ae:	4240      	negs	r0, r0
 80066b0:	f1b8 0f00 	cmp.w	r8, #0
 80066b4:	d09f      	beq.n	80065f6 <_strtol_l.constprop.0+0x1a>
 80066b6:	2a00      	cmp	r2, #0
 80066b8:	d1f6      	bne.n	80066a8 <_strtol_l.constprop.0+0xcc>
 80066ba:	f8c8 1000 	str.w	r1, [r8]
 80066be:	e79a      	b.n	80065f6 <_strtol_l.constprop.0+0x1a>
 80066c0:	2430      	movs	r4, #48	; 0x30
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1b5      	bne.n	8006632 <_strtol_l.constprop.0+0x56>
 80066c6:	2308      	movs	r3, #8
 80066c8:	e7b3      	b.n	8006632 <_strtol_l.constprop.0+0x56>
 80066ca:	2c30      	cmp	r4, #48	; 0x30
 80066cc:	d0a9      	beq.n	8006622 <_strtol_l.constprop.0+0x46>
 80066ce:	230a      	movs	r3, #10
 80066d0:	e7af      	b.n	8006632 <_strtol_l.constprop.0+0x56>
 80066d2:	bf00      	nop
 80066d4:	08007b91 	.word	0x08007b91

080066d8 <_strtol_r>:
 80066d8:	f7ff bf80 	b.w	80065dc <_strtol_l.constprop.0>

080066dc <__ssputs_r>:
 80066dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066e0:	461f      	mov	r7, r3
 80066e2:	688e      	ldr	r6, [r1, #8]
 80066e4:	4682      	mov	sl, r0
 80066e6:	42be      	cmp	r6, r7
 80066e8:	460c      	mov	r4, r1
 80066ea:	4690      	mov	r8, r2
 80066ec:	680b      	ldr	r3, [r1, #0]
 80066ee:	d82c      	bhi.n	800674a <__ssputs_r+0x6e>
 80066f0:	898a      	ldrh	r2, [r1, #12]
 80066f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80066f6:	d026      	beq.n	8006746 <__ssputs_r+0x6a>
 80066f8:	6965      	ldr	r5, [r4, #20]
 80066fa:	6909      	ldr	r1, [r1, #16]
 80066fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006700:	eba3 0901 	sub.w	r9, r3, r1
 8006704:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006708:	1c7b      	adds	r3, r7, #1
 800670a:	444b      	add	r3, r9
 800670c:	106d      	asrs	r5, r5, #1
 800670e:	429d      	cmp	r5, r3
 8006710:	bf38      	it	cc
 8006712:	461d      	movcc	r5, r3
 8006714:	0553      	lsls	r3, r2, #21
 8006716:	d527      	bpl.n	8006768 <__ssputs_r+0x8c>
 8006718:	4629      	mov	r1, r5
 800671a:	f7fe fc19 	bl	8004f50 <_malloc_r>
 800671e:	4606      	mov	r6, r0
 8006720:	b360      	cbz	r0, 800677c <__ssputs_r+0xa0>
 8006722:	464a      	mov	r2, r9
 8006724:	6921      	ldr	r1, [r4, #16]
 8006726:	f000 fbef 	bl	8006f08 <memcpy>
 800672a:	89a3      	ldrh	r3, [r4, #12]
 800672c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006734:	81a3      	strh	r3, [r4, #12]
 8006736:	6126      	str	r6, [r4, #16]
 8006738:	444e      	add	r6, r9
 800673a:	6026      	str	r6, [r4, #0]
 800673c:	463e      	mov	r6, r7
 800673e:	6165      	str	r5, [r4, #20]
 8006740:	eba5 0509 	sub.w	r5, r5, r9
 8006744:	60a5      	str	r5, [r4, #8]
 8006746:	42be      	cmp	r6, r7
 8006748:	d900      	bls.n	800674c <__ssputs_r+0x70>
 800674a:	463e      	mov	r6, r7
 800674c:	4632      	mov	r2, r6
 800674e:	4641      	mov	r1, r8
 8006750:	6820      	ldr	r0, [r4, #0]
 8006752:	f000 fb9d 	bl	8006e90 <memmove>
 8006756:	2000      	movs	r0, #0
 8006758:	68a3      	ldr	r3, [r4, #8]
 800675a:	1b9b      	subs	r3, r3, r6
 800675c:	60a3      	str	r3, [r4, #8]
 800675e:	6823      	ldr	r3, [r4, #0]
 8006760:	4433      	add	r3, r6
 8006762:	6023      	str	r3, [r4, #0]
 8006764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006768:	462a      	mov	r2, r5
 800676a:	f000 ff7e 	bl	800766a <_realloc_r>
 800676e:	4606      	mov	r6, r0
 8006770:	2800      	cmp	r0, #0
 8006772:	d1e0      	bne.n	8006736 <__ssputs_r+0x5a>
 8006774:	4650      	mov	r0, sl
 8006776:	6921      	ldr	r1, [r4, #16]
 8006778:	f7fe fb7a 	bl	8004e70 <_free_r>
 800677c:	230c      	movs	r3, #12
 800677e:	f8ca 3000 	str.w	r3, [sl]
 8006782:	89a3      	ldrh	r3, [r4, #12]
 8006784:	f04f 30ff 	mov.w	r0, #4294967295
 8006788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800678c:	81a3      	strh	r3, [r4, #12]
 800678e:	e7e9      	b.n	8006764 <__ssputs_r+0x88>

08006790 <_svfiprintf_r>:
 8006790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006794:	4698      	mov	r8, r3
 8006796:	898b      	ldrh	r3, [r1, #12]
 8006798:	4607      	mov	r7, r0
 800679a:	061b      	lsls	r3, r3, #24
 800679c:	460d      	mov	r5, r1
 800679e:	4614      	mov	r4, r2
 80067a0:	b09d      	sub	sp, #116	; 0x74
 80067a2:	d50e      	bpl.n	80067c2 <_svfiprintf_r+0x32>
 80067a4:	690b      	ldr	r3, [r1, #16]
 80067a6:	b963      	cbnz	r3, 80067c2 <_svfiprintf_r+0x32>
 80067a8:	2140      	movs	r1, #64	; 0x40
 80067aa:	f7fe fbd1 	bl	8004f50 <_malloc_r>
 80067ae:	6028      	str	r0, [r5, #0]
 80067b0:	6128      	str	r0, [r5, #16]
 80067b2:	b920      	cbnz	r0, 80067be <_svfiprintf_r+0x2e>
 80067b4:	230c      	movs	r3, #12
 80067b6:	603b      	str	r3, [r7, #0]
 80067b8:	f04f 30ff 	mov.w	r0, #4294967295
 80067bc:	e0d0      	b.n	8006960 <_svfiprintf_r+0x1d0>
 80067be:	2340      	movs	r3, #64	; 0x40
 80067c0:	616b      	str	r3, [r5, #20]
 80067c2:	2300      	movs	r3, #0
 80067c4:	9309      	str	r3, [sp, #36]	; 0x24
 80067c6:	2320      	movs	r3, #32
 80067c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067cc:	2330      	movs	r3, #48	; 0x30
 80067ce:	f04f 0901 	mov.w	r9, #1
 80067d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80067d6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006978 <_svfiprintf_r+0x1e8>
 80067da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067de:	4623      	mov	r3, r4
 80067e0:	469a      	mov	sl, r3
 80067e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067e6:	b10a      	cbz	r2, 80067ec <_svfiprintf_r+0x5c>
 80067e8:	2a25      	cmp	r2, #37	; 0x25
 80067ea:	d1f9      	bne.n	80067e0 <_svfiprintf_r+0x50>
 80067ec:	ebba 0b04 	subs.w	fp, sl, r4
 80067f0:	d00b      	beq.n	800680a <_svfiprintf_r+0x7a>
 80067f2:	465b      	mov	r3, fp
 80067f4:	4622      	mov	r2, r4
 80067f6:	4629      	mov	r1, r5
 80067f8:	4638      	mov	r0, r7
 80067fa:	f7ff ff6f 	bl	80066dc <__ssputs_r>
 80067fe:	3001      	adds	r0, #1
 8006800:	f000 80a9 	beq.w	8006956 <_svfiprintf_r+0x1c6>
 8006804:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006806:	445a      	add	r2, fp
 8006808:	9209      	str	r2, [sp, #36]	; 0x24
 800680a:	f89a 3000 	ldrb.w	r3, [sl]
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 80a1 	beq.w	8006956 <_svfiprintf_r+0x1c6>
 8006814:	2300      	movs	r3, #0
 8006816:	f04f 32ff 	mov.w	r2, #4294967295
 800681a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800681e:	f10a 0a01 	add.w	sl, sl, #1
 8006822:	9304      	str	r3, [sp, #16]
 8006824:	9307      	str	r3, [sp, #28]
 8006826:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800682a:	931a      	str	r3, [sp, #104]	; 0x68
 800682c:	4654      	mov	r4, sl
 800682e:	2205      	movs	r2, #5
 8006830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006834:	4850      	ldr	r0, [pc, #320]	; (8006978 <_svfiprintf_r+0x1e8>)
 8006836:	f7fd fc9a 	bl	800416e <memchr>
 800683a:	9a04      	ldr	r2, [sp, #16]
 800683c:	b9d8      	cbnz	r0, 8006876 <_svfiprintf_r+0xe6>
 800683e:	06d0      	lsls	r0, r2, #27
 8006840:	bf44      	itt	mi
 8006842:	2320      	movmi	r3, #32
 8006844:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006848:	0711      	lsls	r1, r2, #28
 800684a:	bf44      	itt	mi
 800684c:	232b      	movmi	r3, #43	; 0x2b
 800684e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006852:	f89a 3000 	ldrb.w	r3, [sl]
 8006856:	2b2a      	cmp	r3, #42	; 0x2a
 8006858:	d015      	beq.n	8006886 <_svfiprintf_r+0xf6>
 800685a:	4654      	mov	r4, sl
 800685c:	2000      	movs	r0, #0
 800685e:	f04f 0c0a 	mov.w	ip, #10
 8006862:	9a07      	ldr	r2, [sp, #28]
 8006864:	4621      	mov	r1, r4
 8006866:	f811 3b01 	ldrb.w	r3, [r1], #1
 800686a:	3b30      	subs	r3, #48	; 0x30
 800686c:	2b09      	cmp	r3, #9
 800686e:	d94d      	bls.n	800690c <_svfiprintf_r+0x17c>
 8006870:	b1b0      	cbz	r0, 80068a0 <_svfiprintf_r+0x110>
 8006872:	9207      	str	r2, [sp, #28]
 8006874:	e014      	b.n	80068a0 <_svfiprintf_r+0x110>
 8006876:	eba0 0308 	sub.w	r3, r0, r8
 800687a:	fa09 f303 	lsl.w	r3, r9, r3
 800687e:	4313      	orrs	r3, r2
 8006880:	46a2      	mov	sl, r4
 8006882:	9304      	str	r3, [sp, #16]
 8006884:	e7d2      	b.n	800682c <_svfiprintf_r+0x9c>
 8006886:	9b03      	ldr	r3, [sp, #12]
 8006888:	1d19      	adds	r1, r3, #4
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	9103      	str	r1, [sp, #12]
 800688e:	2b00      	cmp	r3, #0
 8006890:	bfbb      	ittet	lt
 8006892:	425b      	neglt	r3, r3
 8006894:	f042 0202 	orrlt.w	r2, r2, #2
 8006898:	9307      	strge	r3, [sp, #28]
 800689a:	9307      	strlt	r3, [sp, #28]
 800689c:	bfb8      	it	lt
 800689e:	9204      	strlt	r2, [sp, #16]
 80068a0:	7823      	ldrb	r3, [r4, #0]
 80068a2:	2b2e      	cmp	r3, #46	; 0x2e
 80068a4:	d10c      	bne.n	80068c0 <_svfiprintf_r+0x130>
 80068a6:	7863      	ldrb	r3, [r4, #1]
 80068a8:	2b2a      	cmp	r3, #42	; 0x2a
 80068aa:	d134      	bne.n	8006916 <_svfiprintf_r+0x186>
 80068ac:	9b03      	ldr	r3, [sp, #12]
 80068ae:	3402      	adds	r4, #2
 80068b0:	1d1a      	adds	r2, r3, #4
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	9203      	str	r2, [sp, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	bfb8      	it	lt
 80068ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80068be:	9305      	str	r3, [sp, #20]
 80068c0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800697c <_svfiprintf_r+0x1ec>
 80068c4:	2203      	movs	r2, #3
 80068c6:	4650      	mov	r0, sl
 80068c8:	7821      	ldrb	r1, [r4, #0]
 80068ca:	f7fd fc50 	bl	800416e <memchr>
 80068ce:	b138      	cbz	r0, 80068e0 <_svfiprintf_r+0x150>
 80068d0:	2240      	movs	r2, #64	; 0x40
 80068d2:	9b04      	ldr	r3, [sp, #16]
 80068d4:	eba0 000a 	sub.w	r0, r0, sl
 80068d8:	4082      	lsls	r2, r0
 80068da:	4313      	orrs	r3, r2
 80068dc:	3401      	adds	r4, #1
 80068de:	9304      	str	r3, [sp, #16]
 80068e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068e4:	2206      	movs	r2, #6
 80068e6:	4826      	ldr	r0, [pc, #152]	; (8006980 <_svfiprintf_r+0x1f0>)
 80068e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068ec:	f7fd fc3f 	bl	800416e <memchr>
 80068f0:	2800      	cmp	r0, #0
 80068f2:	d038      	beq.n	8006966 <_svfiprintf_r+0x1d6>
 80068f4:	4b23      	ldr	r3, [pc, #140]	; (8006984 <_svfiprintf_r+0x1f4>)
 80068f6:	bb1b      	cbnz	r3, 8006940 <_svfiprintf_r+0x1b0>
 80068f8:	9b03      	ldr	r3, [sp, #12]
 80068fa:	3307      	adds	r3, #7
 80068fc:	f023 0307 	bic.w	r3, r3, #7
 8006900:	3308      	adds	r3, #8
 8006902:	9303      	str	r3, [sp, #12]
 8006904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006906:	4433      	add	r3, r6
 8006908:	9309      	str	r3, [sp, #36]	; 0x24
 800690a:	e768      	b.n	80067de <_svfiprintf_r+0x4e>
 800690c:	460c      	mov	r4, r1
 800690e:	2001      	movs	r0, #1
 8006910:	fb0c 3202 	mla	r2, ip, r2, r3
 8006914:	e7a6      	b.n	8006864 <_svfiprintf_r+0xd4>
 8006916:	2300      	movs	r3, #0
 8006918:	f04f 0c0a 	mov.w	ip, #10
 800691c:	4619      	mov	r1, r3
 800691e:	3401      	adds	r4, #1
 8006920:	9305      	str	r3, [sp, #20]
 8006922:	4620      	mov	r0, r4
 8006924:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006928:	3a30      	subs	r2, #48	; 0x30
 800692a:	2a09      	cmp	r2, #9
 800692c:	d903      	bls.n	8006936 <_svfiprintf_r+0x1a6>
 800692e:	2b00      	cmp	r3, #0
 8006930:	d0c6      	beq.n	80068c0 <_svfiprintf_r+0x130>
 8006932:	9105      	str	r1, [sp, #20]
 8006934:	e7c4      	b.n	80068c0 <_svfiprintf_r+0x130>
 8006936:	4604      	mov	r4, r0
 8006938:	2301      	movs	r3, #1
 800693a:	fb0c 2101 	mla	r1, ip, r1, r2
 800693e:	e7f0      	b.n	8006922 <_svfiprintf_r+0x192>
 8006940:	ab03      	add	r3, sp, #12
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	462a      	mov	r2, r5
 8006946:	4638      	mov	r0, r7
 8006948:	4b0f      	ldr	r3, [pc, #60]	; (8006988 <_svfiprintf_r+0x1f8>)
 800694a:	a904      	add	r1, sp, #16
 800694c:	f7fc fc88 	bl	8003260 <_printf_float>
 8006950:	1c42      	adds	r2, r0, #1
 8006952:	4606      	mov	r6, r0
 8006954:	d1d6      	bne.n	8006904 <_svfiprintf_r+0x174>
 8006956:	89ab      	ldrh	r3, [r5, #12]
 8006958:	065b      	lsls	r3, r3, #25
 800695a:	f53f af2d 	bmi.w	80067b8 <_svfiprintf_r+0x28>
 800695e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006960:	b01d      	add	sp, #116	; 0x74
 8006962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006966:	ab03      	add	r3, sp, #12
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	462a      	mov	r2, r5
 800696c:	4638      	mov	r0, r7
 800696e:	4b06      	ldr	r3, [pc, #24]	; (8006988 <_svfiprintf_r+0x1f8>)
 8006970:	a904      	add	r1, sp, #16
 8006972:	f7fc ff15 	bl	80037a0 <_printf_i>
 8006976:	e7eb      	b.n	8006950 <_svfiprintf_r+0x1c0>
 8006978:	08007c91 	.word	0x08007c91
 800697c:	08007c97 	.word	0x08007c97
 8006980:	08007c9b 	.word	0x08007c9b
 8006984:	08003261 	.word	0x08003261
 8006988:	080066dd 	.word	0x080066dd

0800698c <__sfputc_r>:
 800698c:	6893      	ldr	r3, [r2, #8]
 800698e:	b410      	push	{r4}
 8006990:	3b01      	subs	r3, #1
 8006992:	2b00      	cmp	r3, #0
 8006994:	6093      	str	r3, [r2, #8]
 8006996:	da07      	bge.n	80069a8 <__sfputc_r+0x1c>
 8006998:	6994      	ldr	r4, [r2, #24]
 800699a:	42a3      	cmp	r3, r4
 800699c:	db01      	blt.n	80069a2 <__sfputc_r+0x16>
 800699e:	290a      	cmp	r1, #10
 80069a0:	d102      	bne.n	80069a8 <__sfputc_r+0x1c>
 80069a2:	bc10      	pop	{r4}
 80069a4:	f000 b9de 	b.w	8006d64 <__swbuf_r>
 80069a8:	6813      	ldr	r3, [r2, #0]
 80069aa:	1c58      	adds	r0, r3, #1
 80069ac:	6010      	str	r0, [r2, #0]
 80069ae:	7019      	strb	r1, [r3, #0]
 80069b0:	4608      	mov	r0, r1
 80069b2:	bc10      	pop	{r4}
 80069b4:	4770      	bx	lr

080069b6 <__sfputs_r>:
 80069b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069b8:	4606      	mov	r6, r0
 80069ba:	460f      	mov	r7, r1
 80069bc:	4614      	mov	r4, r2
 80069be:	18d5      	adds	r5, r2, r3
 80069c0:	42ac      	cmp	r4, r5
 80069c2:	d101      	bne.n	80069c8 <__sfputs_r+0x12>
 80069c4:	2000      	movs	r0, #0
 80069c6:	e007      	b.n	80069d8 <__sfputs_r+0x22>
 80069c8:	463a      	mov	r2, r7
 80069ca:	4630      	mov	r0, r6
 80069cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069d0:	f7ff ffdc 	bl	800698c <__sfputc_r>
 80069d4:	1c43      	adds	r3, r0, #1
 80069d6:	d1f3      	bne.n	80069c0 <__sfputs_r+0xa>
 80069d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069dc <_vfiprintf_r>:
 80069dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e0:	460d      	mov	r5, r1
 80069e2:	4614      	mov	r4, r2
 80069e4:	4698      	mov	r8, r3
 80069e6:	4606      	mov	r6, r0
 80069e8:	b09d      	sub	sp, #116	; 0x74
 80069ea:	b118      	cbz	r0, 80069f4 <_vfiprintf_r+0x18>
 80069ec:	6a03      	ldr	r3, [r0, #32]
 80069ee:	b90b      	cbnz	r3, 80069f4 <_vfiprintf_r+0x18>
 80069f0:	f7fd fa92 	bl	8003f18 <__sinit>
 80069f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069f6:	07d9      	lsls	r1, r3, #31
 80069f8:	d405      	bmi.n	8006a06 <_vfiprintf_r+0x2a>
 80069fa:	89ab      	ldrh	r3, [r5, #12]
 80069fc:	059a      	lsls	r2, r3, #22
 80069fe:	d402      	bmi.n	8006a06 <_vfiprintf_r+0x2a>
 8006a00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a02:	f7fd fbb2 	bl	800416a <__retarget_lock_acquire_recursive>
 8006a06:	89ab      	ldrh	r3, [r5, #12]
 8006a08:	071b      	lsls	r3, r3, #28
 8006a0a:	d501      	bpl.n	8006a10 <_vfiprintf_r+0x34>
 8006a0c:	692b      	ldr	r3, [r5, #16]
 8006a0e:	b99b      	cbnz	r3, 8006a38 <_vfiprintf_r+0x5c>
 8006a10:	4629      	mov	r1, r5
 8006a12:	4630      	mov	r0, r6
 8006a14:	f000 f9e4 	bl	8006de0 <__swsetup_r>
 8006a18:	b170      	cbz	r0, 8006a38 <_vfiprintf_r+0x5c>
 8006a1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a1c:	07dc      	lsls	r4, r3, #31
 8006a1e:	d504      	bpl.n	8006a2a <_vfiprintf_r+0x4e>
 8006a20:	f04f 30ff 	mov.w	r0, #4294967295
 8006a24:	b01d      	add	sp, #116	; 0x74
 8006a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a2a:	89ab      	ldrh	r3, [r5, #12]
 8006a2c:	0598      	lsls	r0, r3, #22
 8006a2e:	d4f7      	bmi.n	8006a20 <_vfiprintf_r+0x44>
 8006a30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a32:	f7fd fb9b 	bl	800416c <__retarget_lock_release_recursive>
 8006a36:	e7f3      	b.n	8006a20 <_vfiprintf_r+0x44>
 8006a38:	2300      	movs	r3, #0
 8006a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a3c:	2320      	movs	r3, #32
 8006a3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a42:	2330      	movs	r3, #48	; 0x30
 8006a44:	f04f 0901 	mov.w	r9, #1
 8006a48:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006bfc <_vfiprintf_r+0x220>
 8006a50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a54:	4623      	mov	r3, r4
 8006a56:	469a      	mov	sl, r3
 8006a58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a5c:	b10a      	cbz	r2, 8006a62 <_vfiprintf_r+0x86>
 8006a5e:	2a25      	cmp	r2, #37	; 0x25
 8006a60:	d1f9      	bne.n	8006a56 <_vfiprintf_r+0x7a>
 8006a62:	ebba 0b04 	subs.w	fp, sl, r4
 8006a66:	d00b      	beq.n	8006a80 <_vfiprintf_r+0xa4>
 8006a68:	465b      	mov	r3, fp
 8006a6a:	4622      	mov	r2, r4
 8006a6c:	4629      	mov	r1, r5
 8006a6e:	4630      	mov	r0, r6
 8006a70:	f7ff ffa1 	bl	80069b6 <__sfputs_r>
 8006a74:	3001      	adds	r0, #1
 8006a76:	f000 80a9 	beq.w	8006bcc <_vfiprintf_r+0x1f0>
 8006a7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a7c:	445a      	add	r2, fp
 8006a7e:	9209      	str	r2, [sp, #36]	; 0x24
 8006a80:	f89a 3000 	ldrb.w	r3, [sl]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 80a1 	beq.w	8006bcc <_vfiprintf_r+0x1f0>
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a94:	f10a 0a01 	add.w	sl, sl, #1
 8006a98:	9304      	str	r3, [sp, #16]
 8006a9a:	9307      	str	r3, [sp, #28]
 8006a9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006aa0:	931a      	str	r3, [sp, #104]	; 0x68
 8006aa2:	4654      	mov	r4, sl
 8006aa4:	2205      	movs	r2, #5
 8006aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aaa:	4854      	ldr	r0, [pc, #336]	; (8006bfc <_vfiprintf_r+0x220>)
 8006aac:	f7fd fb5f 	bl	800416e <memchr>
 8006ab0:	9a04      	ldr	r2, [sp, #16]
 8006ab2:	b9d8      	cbnz	r0, 8006aec <_vfiprintf_r+0x110>
 8006ab4:	06d1      	lsls	r1, r2, #27
 8006ab6:	bf44      	itt	mi
 8006ab8:	2320      	movmi	r3, #32
 8006aba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006abe:	0713      	lsls	r3, r2, #28
 8006ac0:	bf44      	itt	mi
 8006ac2:	232b      	movmi	r3, #43	; 0x2b
 8006ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8006acc:	2b2a      	cmp	r3, #42	; 0x2a
 8006ace:	d015      	beq.n	8006afc <_vfiprintf_r+0x120>
 8006ad0:	4654      	mov	r4, sl
 8006ad2:	2000      	movs	r0, #0
 8006ad4:	f04f 0c0a 	mov.w	ip, #10
 8006ad8:	9a07      	ldr	r2, [sp, #28]
 8006ada:	4621      	mov	r1, r4
 8006adc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ae0:	3b30      	subs	r3, #48	; 0x30
 8006ae2:	2b09      	cmp	r3, #9
 8006ae4:	d94d      	bls.n	8006b82 <_vfiprintf_r+0x1a6>
 8006ae6:	b1b0      	cbz	r0, 8006b16 <_vfiprintf_r+0x13a>
 8006ae8:	9207      	str	r2, [sp, #28]
 8006aea:	e014      	b.n	8006b16 <_vfiprintf_r+0x13a>
 8006aec:	eba0 0308 	sub.w	r3, r0, r8
 8006af0:	fa09 f303 	lsl.w	r3, r9, r3
 8006af4:	4313      	orrs	r3, r2
 8006af6:	46a2      	mov	sl, r4
 8006af8:	9304      	str	r3, [sp, #16]
 8006afa:	e7d2      	b.n	8006aa2 <_vfiprintf_r+0xc6>
 8006afc:	9b03      	ldr	r3, [sp, #12]
 8006afe:	1d19      	adds	r1, r3, #4
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	9103      	str	r1, [sp, #12]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	bfbb      	ittet	lt
 8006b08:	425b      	neglt	r3, r3
 8006b0a:	f042 0202 	orrlt.w	r2, r2, #2
 8006b0e:	9307      	strge	r3, [sp, #28]
 8006b10:	9307      	strlt	r3, [sp, #28]
 8006b12:	bfb8      	it	lt
 8006b14:	9204      	strlt	r2, [sp, #16]
 8006b16:	7823      	ldrb	r3, [r4, #0]
 8006b18:	2b2e      	cmp	r3, #46	; 0x2e
 8006b1a:	d10c      	bne.n	8006b36 <_vfiprintf_r+0x15a>
 8006b1c:	7863      	ldrb	r3, [r4, #1]
 8006b1e:	2b2a      	cmp	r3, #42	; 0x2a
 8006b20:	d134      	bne.n	8006b8c <_vfiprintf_r+0x1b0>
 8006b22:	9b03      	ldr	r3, [sp, #12]
 8006b24:	3402      	adds	r4, #2
 8006b26:	1d1a      	adds	r2, r3, #4
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	9203      	str	r2, [sp, #12]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	bfb8      	it	lt
 8006b30:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b34:	9305      	str	r3, [sp, #20]
 8006b36:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006c00 <_vfiprintf_r+0x224>
 8006b3a:	2203      	movs	r2, #3
 8006b3c:	4650      	mov	r0, sl
 8006b3e:	7821      	ldrb	r1, [r4, #0]
 8006b40:	f7fd fb15 	bl	800416e <memchr>
 8006b44:	b138      	cbz	r0, 8006b56 <_vfiprintf_r+0x17a>
 8006b46:	2240      	movs	r2, #64	; 0x40
 8006b48:	9b04      	ldr	r3, [sp, #16]
 8006b4a:	eba0 000a 	sub.w	r0, r0, sl
 8006b4e:	4082      	lsls	r2, r0
 8006b50:	4313      	orrs	r3, r2
 8006b52:	3401      	adds	r4, #1
 8006b54:	9304      	str	r3, [sp, #16]
 8006b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b5a:	2206      	movs	r2, #6
 8006b5c:	4829      	ldr	r0, [pc, #164]	; (8006c04 <_vfiprintf_r+0x228>)
 8006b5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b62:	f7fd fb04 	bl	800416e <memchr>
 8006b66:	2800      	cmp	r0, #0
 8006b68:	d03f      	beq.n	8006bea <_vfiprintf_r+0x20e>
 8006b6a:	4b27      	ldr	r3, [pc, #156]	; (8006c08 <_vfiprintf_r+0x22c>)
 8006b6c:	bb1b      	cbnz	r3, 8006bb6 <_vfiprintf_r+0x1da>
 8006b6e:	9b03      	ldr	r3, [sp, #12]
 8006b70:	3307      	adds	r3, #7
 8006b72:	f023 0307 	bic.w	r3, r3, #7
 8006b76:	3308      	adds	r3, #8
 8006b78:	9303      	str	r3, [sp, #12]
 8006b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b7c:	443b      	add	r3, r7
 8006b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b80:	e768      	b.n	8006a54 <_vfiprintf_r+0x78>
 8006b82:	460c      	mov	r4, r1
 8006b84:	2001      	movs	r0, #1
 8006b86:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b8a:	e7a6      	b.n	8006ada <_vfiprintf_r+0xfe>
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	f04f 0c0a 	mov.w	ip, #10
 8006b92:	4619      	mov	r1, r3
 8006b94:	3401      	adds	r4, #1
 8006b96:	9305      	str	r3, [sp, #20]
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b9e:	3a30      	subs	r2, #48	; 0x30
 8006ba0:	2a09      	cmp	r2, #9
 8006ba2:	d903      	bls.n	8006bac <_vfiprintf_r+0x1d0>
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d0c6      	beq.n	8006b36 <_vfiprintf_r+0x15a>
 8006ba8:	9105      	str	r1, [sp, #20]
 8006baa:	e7c4      	b.n	8006b36 <_vfiprintf_r+0x15a>
 8006bac:	4604      	mov	r4, r0
 8006bae:	2301      	movs	r3, #1
 8006bb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bb4:	e7f0      	b.n	8006b98 <_vfiprintf_r+0x1bc>
 8006bb6:	ab03      	add	r3, sp, #12
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	462a      	mov	r2, r5
 8006bbc:	4630      	mov	r0, r6
 8006bbe:	4b13      	ldr	r3, [pc, #76]	; (8006c0c <_vfiprintf_r+0x230>)
 8006bc0:	a904      	add	r1, sp, #16
 8006bc2:	f7fc fb4d 	bl	8003260 <_printf_float>
 8006bc6:	4607      	mov	r7, r0
 8006bc8:	1c78      	adds	r0, r7, #1
 8006bca:	d1d6      	bne.n	8006b7a <_vfiprintf_r+0x19e>
 8006bcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bce:	07d9      	lsls	r1, r3, #31
 8006bd0:	d405      	bmi.n	8006bde <_vfiprintf_r+0x202>
 8006bd2:	89ab      	ldrh	r3, [r5, #12]
 8006bd4:	059a      	lsls	r2, r3, #22
 8006bd6:	d402      	bmi.n	8006bde <_vfiprintf_r+0x202>
 8006bd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bda:	f7fd fac7 	bl	800416c <__retarget_lock_release_recursive>
 8006bde:	89ab      	ldrh	r3, [r5, #12]
 8006be0:	065b      	lsls	r3, r3, #25
 8006be2:	f53f af1d 	bmi.w	8006a20 <_vfiprintf_r+0x44>
 8006be6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006be8:	e71c      	b.n	8006a24 <_vfiprintf_r+0x48>
 8006bea:	ab03      	add	r3, sp, #12
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	462a      	mov	r2, r5
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	4b06      	ldr	r3, [pc, #24]	; (8006c0c <_vfiprintf_r+0x230>)
 8006bf4:	a904      	add	r1, sp, #16
 8006bf6:	f7fc fdd3 	bl	80037a0 <_printf_i>
 8006bfa:	e7e4      	b.n	8006bc6 <_vfiprintf_r+0x1ea>
 8006bfc:	08007c91 	.word	0x08007c91
 8006c00:	08007c97 	.word	0x08007c97
 8006c04:	08007c9b 	.word	0x08007c9b
 8006c08:	08003261 	.word	0x08003261
 8006c0c:	080069b7 	.word	0x080069b7

08006c10 <__sflush_r>:
 8006c10:	898a      	ldrh	r2, [r1, #12]
 8006c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c14:	4605      	mov	r5, r0
 8006c16:	0710      	lsls	r0, r2, #28
 8006c18:	460c      	mov	r4, r1
 8006c1a:	d457      	bmi.n	8006ccc <__sflush_r+0xbc>
 8006c1c:	684b      	ldr	r3, [r1, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	dc04      	bgt.n	8006c2c <__sflush_r+0x1c>
 8006c22:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	dc01      	bgt.n	8006c2c <__sflush_r+0x1c>
 8006c28:	2000      	movs	r0, #0
 8006c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c2e:	2e00      	cmp	r6, #0
 8006c30:	d0fa      	beq.n	8006c28 <__sflush_r+0x18>
 8006c32:	2300      	movs	r3, #0
 8006c34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c38:	682f      	ldr	r7, [r5, #0]
 8006c3a:	6a21      	ldr	r1, [r4, #32]
 8006c3c:	602b      	str	r3, [r5, #0]
 8006c3e:	d032      	beq.n	8006ca6 <__sflush_r+0x96>
 8006c40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c42:	89a3      	ldrh	r3, [r4, #12]
 8006c44:	075a      	lsls	r2, r3, #29
 8006c46:	d505      	bpl.n	8006c54 <__sflush_r+0x44>
 8006c48:	6863      	ldr	r3, [r4, #4]
 8006c4a:	1ac0      	subs	r0, r0, r3
 8006c4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c4e:	b10b      	cbz	r3, 8006c54 <__sflush_r+0x44>
 8006c50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c52:	1ac0      	subs	r0, r0, r3
 8006c54:	2300      	movs	r3, #0
 8006c56:	4602      	mov	r2, r0
 8006c58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c5a:	4628      	mov	r0, r5
 8006c5c:	6a21      	ldr	r1, [r4, #32]
 8006c5e:	47b0      	blx	r6
 8006c60:	1c43      	adds	r3, r0, #1
 8006c62:	89a3      	ldrh	r3, [r4, #12]
 8006c64:	d106      	bne.n	8006c74 <__sflush_r+0x64>
 8006c66:	6829      	ldr	r1, [r5, #0]
 8006c68:	291d      	cmp	r1, #29
 8006c6a:	d82b      	bhi.n	8006cc4 <__sflush_r+0xb4>
 8006c6c:	4a28      	ldr	r2, [pc, #160]	; (8006d10 <__sflush_r+0x100>)
 8006c6e:	410a      	asrs	r2, r1
 8006c70:	07d6      	lsls	r6, r2, #31
 8006c72:	d427      	bmi.n	8006cc4 <__sflush_r+0xb4>
 8006c74:	2200      	movs	r2, #0
 8006c76:	6062      	str	r2, [r4, #4]
 8006c78:	6922      	ldr	r2, [r4, #16]
 8006c7a:	04d9      	lsls	r1, r3, #19
 8006c7c:	6022      	str	r2, [r4, #0]
 8006c7e:	d504      	bpl.n	8006c8a <__sflush_r+0x7a>
 8006c80:	1c42      	adds	r2, r0, #1
 8006c82:	d101      	bne.n	8006c88 <__sflush_r+0x78>
 8006c84:	682b      	ldr	r3, [r5, #0]
 8006c86:	b903      	cbnz	r3, 8006c8a <__sflush_r+0x7a>
 8006c88:	6560      	str	r0, [r4, #84]	; 0x54
 8006c8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c8c:	602f      	str	r7, [r5, #0]
 8006c8e:	2900      	cmp	r1, #0
 8006c90:	d0ca      	beq.n	8006c28 <__sflush_r+0x18>
 8006c92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c96:	4299      	cmp	r1, r3
 8006c98:	d002      	beq.n	8006ca0 <__sflush_r+0x90>
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	f7fe f8e8 	bl	8004e70 <_free_r>
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	6360      	str	r0, [r4, #52]	; 0x34
 8006ca4:	e7c1      	b.n	8006c2a <__sflush_r+0x1a>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	4628      	mov	r0, r5
 8006caa:	47b0      	blx	r6
 8006cac:	1c41      	adds	r1, r0, #1
 8006cae:	d1c8      	bne.n	8006c42 <__sflush_r+0x32>
 8006cb0:	682b      	ldr	r3, [r5, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d0c5      	beq.n	8006c42 <__sflush_r+0x32>
 8006cb6:	2b1d      	cmp	r3, #29
 8006cb8:	d001      	beq.n	8006cbe <__sflush_r+0xae>
 8006cba:	2b16      	cmp	r3, #22
 8006cbc:	d101      	bne.n	8006cc2 <__sflush_r+0xb2>
 8006cbe:	602f      	str	r7, [r5, #0]
 8006cc0:	e7b2      	b.n	8006c28 <__sflush_r+0x18>
 8006cc2:	89a3      	ldrh	r3, [r4, #12]
 8006cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cc8:	81a3      	strh	r3, [r4, #12]
 8006cca:	e7ae      	b.n	8006c2a <__sflush_r+0x1a>
 8006ccc:	690f      	ldr	r7, [r1, #16]
 8006cce:	2f00      	cmp	r7, #0
 8006cd0:	d0aa      	beq.n	8006c28 <__sflush_r+0x18>
 8006cd2:	0793      	lsls	r3, r2, #30
 8006cd4:	bf18      	it	ne
 8006cd6:	2300      	movne	r3, #0
 8006cd8:	680e      	ldr	r6, [r1, #0]
 8006cda:	bf08      	it	eq
 8006cdc:	694b      	ldreq	r3, [r1, #20]
 8006cde:	1bf6      	subs	r6, r6, r7
 8006ce0:	600f      	str	r7, [r1, #0]
 8006ce2:	608b      	str	r3, [r1, #8]
 8006ce4:	2e00      	cmp	r6, #0
 8006ce6:	dd9f      	ble.n	8006c28 <__sflush_r+0x18>
 8006ce8:	4633      	mov	r3, r6
 8006cea:	463a      	mov	r2, r7
 8006cec:	4628      	mov	r0, r5
 8006cee:	6a21      	ldr	r1, [r4, #32]
 8006cf0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006cf4:	47e0      	blx	ip
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	dc06      	bgt.n	8006d08 <__sflush_r+0xf8>
 8006cfa:	89a3      	ldrh	r3, [r4, #12]
 8006cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d04:	81a3      	strh	r3, [r4, #12]
 8006d06:	e790      	b.n	8006c2a <__sflush_r+0x1a>
 8006d08:	4407      	add	r7, r0
 8006d0a:	1a36      	subs	r6, r6, r0
 8006d0c:	e7ea      	b.n	8006ce4 <__sflush_r+0xd4>
 8006d0e:	bf00      	nop
 8006d10:	dfbffffe 	.word	0xdfbffffe

08006d14 <_fflush_r>:
 8006d14:	b538      	push	{r3, r4, r5, lr}
 8006d16:	690b      	ldr	r3, [r1, #16]
 8006d18:	4605      	mov	r5, r0
 8006d1a:	460c      	mov	r4, r1
 8006d1c:	b913      	cbnz	r3, 8006d24 <_fflush_r+0x10>
 8006d1e:	2500      	movs	r5, #0
 8006d20:	4628      	mov	r0, r5
 8006d22:	bd38      	pop	{r3, r4, r5, pc}
 8006d24:	b118      	cbz	r0, 8006d2e <_fflush_r+0x1a>
 8006d26:	6a03      	ldr	r3, [r0, #32]
 8006d28:	b90b      	cbnz	r3, 8006d2e <_fflush_r+0x1a>
 8006d2a:	f7fd f8f5 	bl	8003f18 <__sinit>
 8006d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d0f3      	beq.n	8006d1e <_fflush_r+0xa>
 8006d36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d38:	07d0      	lsls	r0, r2, #31
 8006d3a:	d404      	bmi.n	8006d46 <_fflush_r+0x32>
 8006d3c:	0599      	lsls	r1, r3, #22
 8006d3e:	d402      	bmi.n	8006d46 <_fflush_r+0x32>
 8006d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d42:	f7fd fa12 	bl	800416a <__retarget_lock_acquire_recursive>
 8006d46:	4628      	mov	r0, r5
 8006d48:	4621      	mov	r1, r4
 8006d4a:	f7ff ff61 	bl	8006c10 <__sflush_r>
 8006d4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d50:	4605      	mov	r5, r0
 8006d52:	07da      	lsls	r2, r3, #31
 8006d54:	d4e4      	bmi.n	8006d20 <_fflush_r+0xc>
 8006d56:	89a3      	ldrh	r3, [r4, #12]
 8006d58:	059b      	lsls	r3, r3, #22
 8006d5a:	d4e1      	bmi.n	8006d20 <_fflush_r+0xc>
 8006d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d5e:	f7fd fa05 	bl	800416c <__retarget_lock_release_recursive>
 8006d62:	e7dd      	b.n	8006d20 <_fflush_r+0xc>

08006d64 <__swbuf_r>:
 8006d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d66:	460e      	mov	r6, r1
 8006d68:	4614      	mov	r4, r2
 8006d6a:	4605      	mov	r5, r0
 8006d6c:	b118      	cbz	r0, 8006d76 <__swbuf_r+0x12>
 8006d6e:	6a03      	ldr	r3, [r0, #32]
 8006d70:	b90b      	cbnz	r3, 8006d76 <__swbuf_r+0x12>
 8006d72:	f7fd f8d1 	bl	8003f18 <__sinit>
 8006d76:	69a3      	ldr	r3, [r4, #24]
 8006d78:	60a3      	str	r3, [r4, #8]
 8006d7a:	89a3      	ldrh	r3, [r4, #12]
 8006d7c:	071a      	lsls	r2, r3, #28
 8006d7e:	d525      	bpl.n	8006dcc <__swbuf_r+0x68>
 8006d80:	6923      	ldr	r3, [r4, #16]
 8006d82:	b31b      	cbz	r3, 8006dcc <__swbuf_r+0x68>
 8006d84:	6823      	ldr	r3, [r4, #0]
 8006d86:	6922      	ldr	r2, [r4, #16]
 8006d88:	b2f6      	uxtb	r6, r6
 8006d8a:	1a98      	subs	r0, r3, r2
 8006d8c:	6963      	ldr	r3, [r4, #20]
 8006d8e:	4637      	mov	r7, r6
 8006d90:	4283      	cmp	r3, r0
 8006d92:	dc04      	bgt.n	8006d9e <__swbuf_r+0x3a>
 8006d94:	4621      	mov	r1, r4
 8006d96:	4628      	mov	r0, r5
 8006d98:	f7ff ffbc 	bl	8006d14 <_fflush_r>
 8006d9c:	b9e0      	cbnz	r0, 8006dd8 <__swbuf_r+0x74>
 8006d9e:	68a3      	ldr	r3, [r4, #8]
 8006da0:	3b01      	subs	r3, #1
 8006da2:	60a3      	str	r3, [r4, #8]
 8006da4:	6823      	ldr	r3, [r4, #0]
 8006da6:	1c5a      	adds	r2, r3, #1
 8006da8:	6022      	str	r2, [r4, #0]
 8006daa:	701e      	strb	r6, [r3, #0]
 8006dac:	6962      	ldr	r2, [r4, #20]
 8006dae:	1c43      	adds	r3, r0, #1
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d004      	beq.n	8006dbe <__swbuf_r+0x5a>
 8006db4:	89a3      	ldrh	r3, [r4, #12]
 8006db6:	07db      	lsls	r3, r3, #31
 8006db8:	d506      	bpl.n	8006dc8 <__swbuf_r+0x64>
 8006dba:	2e0a      	cmp	r6, #10
 8006dbc:	d104      	bne.n	8006dc8 <__swbuf_r+0x64>
 8006dbe:	4621      	mov	r1, r4
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	f7ff ffa7 	bl	8006d14 <_fflush_r>
 8006dc6:	b938      	cbnz	r0, 8006dd8 <__swbuf_r+0x74>
 8006dc8:	4638      	mov	r0, r7
 8006dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dcc:	4621      	mov	r1, r4
 8006dce:	4628      	mov	r0, r5
 8006dd0:	f000 f806 	bl	8006de0 <__swsetup_r>
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	d0d5      	beq.n	8006d84 <__swbuf_r+0x20>
 8006dd8:	f04f 37ff 	mov.w	r7, #4294967295
 8006ddc:	e7f4      	b.n	8006dc8 <__swbuf_r+0x64>
	...

08006de0 <__swsetup_r>:
 8006de0:	b538      	push	{r3, r4, r5, lr}
 8006de2:	4b2a      	ldr	r3, [pc, #168]	; (8006e8c <__swsetup_r+0xac>)
 8006de4:	4605      	mov	r5, r0
 8006de6:	6818      	ldr	r0, [r3, #0]
 8006de8:	460c      	mov	r4, r1
 8006dea:	b118      	cbz	r0, 8006df4 <__swsetup_r+0x14>
 8006dec:	6a03      	ldr	r3, [r0, #32]
 8006dee:	b90b      	cbnz	r3, 8006df4 <__swsetup_r+0x14>
 8006df0:	f7fd f892 	bl	8003f18 <__sinit>
 8006df4:	89a3      	ldrh	r3, [r4, #12]
 8006df6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dfa:	0718      	lsls	r0, r3, #28
 8006dfc:	d422      	bmi.n	8006e44 <__swsetup_r+0x64>
 8006dfe:	06d9      	lsls	r1, r3, #27
 8006e00:	d407      	bmi.n	8006e12 <__swsetup_r+0x32>
 8006e02:	2309      	movs	r3, #9
 8006e04:	602b      	str	r3, [r5, #0]
 8006e06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e0e:	81a3      	strh	r3, [r4, #12]
 8006e10:	e034      	b.n	8006e7c <__swsetup_r+0x9c>
 8006e12:	0758      	lsls	r0, r3, #29
 8006e14:	d512      	bpl.n	8006e3c <__swsetup_r+0x5c>
 8006e16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e18:	b141      	cbz	r1, 8006e2c <__swsetup_r+0x4c>
 8006e1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e1e:	4299      	cmp	r1, r3
 8006e20:	d002      	beq.n	8006e28 <__swsetup_r+0x48>
 8006e22:	4628      	mov	r0, r5
 8006e24:	f7fe f824 	bl	8004e70 <_free_r>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	6363      	str	r3, [r4, #52]	; 0x34
 8006e2c:	89a3      	ldrh	r3, [r4, #12]
 8006e2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e32:	81a3      	strh	r3, [r4, #12]
 8006e34:	2300      	movs	r3, #0
 8006e36:	6063      	str	r3, [r4, #4]
 8006e38:	6923      	ldr	r3, [r4, #16]
 8006e3a:	6023      	str	r3, [r4, #0]
 8006e3c:	89a3      	ldrh	r3, [r4, #12]
 8006e3e:	f043 0308 	orr.w	r3, r3, #8
 8006e42:	81a3      	strh	r3, [r4, #12]
 8006e44:	6923      	ldr	r3, [r4, #16]
 8006e46:	b94b      	cbnz	r3, 8006e5c <__swsetup_r+0x7c>
 8006e48:	89a3      	ldrh	r3, [r4, #12]
 8006e4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e52:	d003      	beq.n	8006e5c <__swsetup_r+0x7c>
 8006e54:	4621      	mov	r1, r4
 8006e56:	4628      	mov	r0, r5
 8006e58:	f000 fc7b 	bl	8007752 <__smakebuf_r>
 8006e5c:	89a0      	ldrh	r0, [r4, #12]
 8006e5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e62:	f010 0301 	ands.w	r3, r0, #1
 8006e66:	d00a      	beq.n	8006e7e <__swsetup_r+0x9e>
 8006e68:	2300      	movs	r3, #0
 8006e6a:	60a3      	str	r3, [r4, #8]
 8006e6c:	6963      	ldr	r3, [r4, #20]
 8006e6e:	425b      	negs	r3, r3
 8006e70:	61a3      	str	r3, [r4, #24]
 8006e72:	6923      	ldr	r3, [r4, #16]
 8006e74:	b943      	cbnz	r3, 8006e88 <__swsetup_r+0xa8>
 8006e76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e7a:	d1c4      	bne.n	8006e06 <__swsetup_r+0x26>
 8006e7c:	bd38      	pop	{r3, r4, r5, pc}
 8006e7e:	0781      	lsls	r1, r0, #30
 8006e80:	bf58      	it	pl
 8006e82:	6963      	ldrpl	r3, [r4, #20]
 8006e84:	60a3      	str	r3, [r4, #8]
 8006e86:	e7f4      	b.n	8006e72 <__swsetup_r+0x92>
 8006e88:	2000      	movs	r0, #0
 8006e8a:	e7f7      	b.n	8006e7c <__swsetup_r+0x9c>
 8006e8c:	20000064 	.word	0x20000064

08006e90 <memmove>:
 8006e90:	4288      	cmp	r0, r1
 8006e92:	b510      	push	{r4, lr}
 8006e94:	eb01 0402 	add.w	r4, r1, r2
 8006e98:	d902      	bls.n	8006ea0 <memmove+0x10>
 8006e9a:	4284      	cmp	r4, r0
 8006e9c:	4623      	mov	r3, r4
 8006e9e:	d807      	bhi.n	8006eb0 <memmove+0x20>
 8006ea0:	1e43      	subs	r3, r0, #1
 8006ea2:	42a1      	cmp	r1, r4
 8006ea4:	d008      	beq.n	8006eb8 <memmove+0x28>
 8006ea6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006eaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006eae:	e7f8      	b.n	8006ea2 <memmove+0x12>
 8006eb0:	4601      	mov	r1, r0
 8006eb2:	4402      	add	r2, r0
 8006eb4:	428a      	cmp	r2, r1
 8006eb6:	d100      	bne.n	8006eba <memmove+0x2a>
 8006eb8:	bd10      	pop	{r4, pc}
 8006eba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ebe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ec2:	e7f7      	b.n	8006eb4 <memmove+0x24>

08006ec4 <strncmp>:
 8006ec4:	b510      	push	{r4, lr}
 8006ec6:	b16a      	cbz	r2, 8006ee4 <strncmp+0x20>
 8006ec8:	3901      	subs	r1, #1
 8006eca:	1884      	adds	r4, r0, r2
 8006ecc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ed0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d103      	bne.n	8006ee0 <strncmp+0x1c>
 8006ed8:	42a0      	cmp	r0, r4
 8006eda:	d001      	beq.n	8006ee0 <strncmp+0x1c>
 8006edc:	2a00      	cmp	r2, #0
 8006ede:	d1f5      	bne.n	8006ecc <strncmp+0x8>
 8006ee0:	1ad0      	subs	r0, r2, r3
 8006ee2:	bd10      	pop	{r4, pc}
 8006ee4:	4610      	mov	r0, r2
 8006ee6:	e7fc      	b.n	8006ee2 <strncmp+0x1e>

08006ee8 <_sbrk_r>:
 8006ee8:	b538      	push	{r3, r4, r5, lr}
 8006eea:	2300      	movs	r3, #0
 8006eec:	4d05      	ldr	r5, [pc, #20]	; (8006f04 <_sbrk_r+0x1c>)
 8006eee:	4604      	mov	r4, r0
 8006ef0:	4608      	mov	r0, r1
 8006ef2:	602b      	str	r3, [r5, #0]
 8006ef4:	f7fa f920 	bl	8001138 <_sbrk>
 8006ef8:	1c43      	adds	r3, r0, #1
 8006efa:	d102      	bne.n	8006f02 <_sbrk_r+0x1a>
 8006efc:	682b      	ldr	r3, [r5, #0]
 8006efe:	b103      	cbz	r3, 8006f02 <_sbrk_r+0x1a>
 8006f00:	6023      	str	r3, [r4, #0]
 8006f02:	bd38      	pop	{r3, r4, r5, pc}
 8006f04:	200003b0 	.word	0x200003b0

08006f08 <memcpy>:
 8006f08:	440a      	add	r2, r1
 8006f0a:	4291      	cmp	r1, r2
 8006f0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f10:	d100      	bne.n	8006f14 <memcpy+0xc>
 8006f12:	4770      	bx	lr
 8006f14:	b510      	push	{r4, lr}
 8006f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f1a:	4291      	cmp	r1, r2
 8006f1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f20:	d1f9      	bne.n	8006f16 <memcpy+0xe>
 8006f22:	bd10      	pop	{r4, pc}

08006f24 <nan>:
 8006f24:	2000      	movs	r0, #0
 8006f26:	4901      	ldr	r1, [pc, #4]	; (8006f2c <nan+0x8>)
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	7ff80000 	.word	0x7ff80000

08006f30 <__assert_func>:
 8006f30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f32:	4614      	mov	r4, r2
 8006f34:	461a      	mov	r2, r3
 8006f36:	4b09      	ldr	r3, [pc, #36]	; (8006f5c <__assert_func+0x2c>)
 8006f38:	4605      	mov	r5, r0
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68d8      	ldr	r0, [r3, #12]
 8006f3e:	b14c      	cbz	r4, 8006f54 <__assert_func+0x24>
 8006f40:	4b07      	ldr	r3, [pc, #28]	; (8006f60 <__assert_func+0x30>)
 8006f42:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f46:	9100      	str	r1, [sp, #0]
 8006f48:	462b      	mov	r3, r5
 8006f4a:	4906      	ldr	r1, [pc, #24]	; (8006f64 <__assert_func+0x34>)
 8006f4c:	f000 fbca 	bl	80076e4 <fiprintf>
 8006f50:	f000 fc5e 	bl	8007810 <abort>
 8006f54:	4b04      	ldr	r3, [pc, #16]	; (8006f68 <__assert_func+0x38>)
 8006f56:	461c      	mov	r4, r3
 8006f58:	e7f3      	b.n	8006f42 <__assert_func+0x12>
 8006f5a:	bf00      	nop
 8006f5c:	20000064 	.word	0x20000064
 8006f60:	08007caa 	.word	0x08007caa
 8006f64:	08007cb7 	.word	0x08007cb7
 8006f68:	08007ce5 	.word	0x08007ce5

08006f6c <_calloc_r>:
 8006f6c:	b570      	push	{r4, r5, r6, lr}
 8006f6e:	fba1 5402 	umull	r5, r4, r1, r2
 8006f72:	b934      	cbnz	r4, 8006f82 <_calloc_r+0x16>
 8006f74:	4629      	mov	r1, r5
 8006f76:	f7fd ffeb 	bl	8004f50 <_malloc_r>
 8006f7a:	4606      	mov	r6, r0
 8006f7c:	b928      	cbnz	r0, 8006f8a <_calloc_r+0x1e>
 8006f7e:	4630      	mov	r0, r6
 8006f80:	bd70      	pop	{r4, r5, r6, pc}
 8006f82:	220c      	movs	r2, #12
 8006f84:	2600      	movs	r6, #0
 8006f86:	6002      	str	r2, [r0, #0]
 8006f88:	e7f9      	b.n	8006f7e <_calloc_r+0x12>
 8006f8a:	462a      	mov	r2, r5
 8006f8c:	4621      	mov	r1, r4
 8006f8e:	f7fd f86e 	bl	800406e <memset>
 8006f92:	e7f4      	b.n	8006f7e <_calloc_r+0x12>

08006f94 <rshift>:
 8006f94:	6903      	ldr	r3, [r0, #16]
 8006f96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f9a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006f9e:	f100 0414 	add.w	r4, r0, #20
 8006fa2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006fa6:	dd46      	ble.n	8007036 <rshift+0xa2>
 8006fa8:	f011 011f 	ands.w	r1, r1, #31
 8006fac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006fb0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006fb4:	d10c      	bne.n	8006fd0 <rshift+0x3c>
 8006fb6:	4629      	mov	r1, r5
 8006fb8:	f100 0710 	add.w	r7, r0, #16
 8006fbc:	42b1      	cmp	r1, r6
 8006fbe:	d335      	bcc.n	800702c <rshift+0x98>
 8006fc0:	1a9b      	subs	r3, r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	1eea      	subs	r2, r5, #3
 8006fc6:	4296      	cmp	r6, r2
 8006fc8:	bf38      	it	cc
 8006fca:	2300      	movcc	r3, #0
 8006fcc:	4423      	add	r3, r4
 8006fce:	e015      	b.n	8006ffc <rshift+0x68>
 8006fd0:	46a1      	mov	r9, r4
 8006fd2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006fd6:	f1c1 0820 	rsb	r8, r1, #32
 8006fda:	40cf      	lsrs	r7, r1
 8006fdc:	f105 0e04 	add.w	lr, r5, #4
 8006fe0:	4576      	cmp	r6, lr
 8006fe2:	46f4      	mov	ip, lr
 8006fe4:	d816      	bhi.n	8007014 <rshift+0x80>
 8006fe6:	1a9a      	subs	r2, r3, r2
 8006fe8:	0092      	lsls	r2, r2, #2
 8006fea:	3a04      	subs	r2, #4
 8006fec:	3501      	adds	r5, #1
 8006fee:	42ae      	cmp	r6, r5
 8006ff0:	bf38      	it	cc
 8006ff2:	2200      	movcc	r2, #0
 8006ff4:	18a3      	adds	r3, r4, r2
 8006ff6:	50a7      	str	r7, [r4, r2]
 8006ff8:	b107      	cbz	r7, 8006ffc <rshift+0x68>
 8006ffa:	3304      	adds	r3, #4
 8006ffc:	42a3      	cmp	r3, r4
 8006ffe:	eba3 0204 	sub.w	r2, r3, r4
 8007002:	bf08      	it	eq
 8007004:	2300      	moveq	r3, #0
 8007006:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800700a:	6102      	str	r2, [r0, #16]
 800700c:	bf08      	it	eq
 800700e:	6143      	streq	r3, [r0, #20]
 8007010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007014:	f8dc c000 	ldr.w	ip, [ip]
 8007018:	fa0c fc08 	lsl.w	ip, ip, r8
 800701c:	ea4c 0707 	orr.w	r7, ip, r7
 8007020:	f849 7b04 	str.w	r7, [r9], #4
 8007024:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007028:	40cf      	lsrs	r7, r1
 800702a:	e7d9      	b.n	8006fe0 <rshift+0x4c>
 800702c:	f851 cb04 	ldr.w	ip, [r1], #4
 8007030:	f847 cf04 	str.w	ip, [r7, #4]!
 8007034:	e7c2      	b.n	8006fbc <rshift+0x28>
 8007036:	4623      	mov	r3, r4
 8007038:	e7e0      	b.n	8006ffc <rshift+0x68>

0800703a <__hexdig_fun>:
 800703a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800703e:	2b09      	cmp	r3, #9
 8007040:	d802      	bhi.n	8007048 <__hexdig_fun+0xe>
 8007042:	3820      	subs	r0, #32
 8007044:	b2c0      	uxtb	r0, r0
 8007046:	4770      	bx	lr
 8007048:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800704c:	2b05      	cmp	r3, #5
 800704e:	d801      	bhi.n	8007054 <__hexdig_fun+0x1a>
 8007050:	3847      	subs	r0, #71	; 0x47
 8007052:	e7f7      	b.n	8007044 <__hexdig_fun+0xa>
 8007054:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007058:	2b05      	cmp	r3, #5
 800705a:	d801      	bhi.n	8007060 <__hexdig_fun+0x26>
 800705c:	3827      	subs	r0, #39	; 0x27
 800705e:	e7f1      	b.n	8007044 <__hexdig_fun+0xa>
 8007060:	2000      	movs	r0, #0
 8007062:	4770      	bx	lr

08007064 <__gethex>:
 8007064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007068:	4681      	mov	r9, r0
 800706a:	468a      	mov	sl, r1
 800706c:	4617      	mov	r7, r2
 800706e:	680a      	ldr	r2, [r1, #0]
 8007070:	b085      	sub	sp, #20
 8007072:	f102 0b02 	add.w	fp, r2, #2
 8007076:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800707a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800707e:	9302      	str	r3, [sp, #8]
 8007080:	32fe      	adds	r2, #254	; 0xfe
 8007082:	eb02 030b 	add.w	r3, r2, fp
 8007086:	46d8      	mov	r8, fp
 8007088:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800708c:	9301      	str	r3, [sp, #4]
 800708e:	2830      	cmp	r0, #48	; 0x30
 8007090:	d0f7      	beq.n	8007082 <__gethex+0x1e>
 8007092:	f7ff ffd2 	bl	800703a <__hexdig_fun>
 8007096:	4604      	mov	r4, r0
 8007098:	2800      	cmp	r0, #0
 800709a:	d138      	bne.n	800710e <__gethex+0xaa>
 800709c:	2201      	movs	r2, #1
 800709e:	4640      	mov	r0, r8
 80070a0:	49a7      	ldr	r1, [pc, #668]	; (8007340 <__gethex+0x2dc>)
 80070a2:	f7ff ff0f 	bl	8006ec4 <strncmp>
 80070a6:	4606      	mov	r6, r0
 80070a8:	2800      	cmp	r0, #0
 80070aa:	d169      	bne.n	8007180 <__gethex+0x11c>
 80070ac:	f898 0001 	ldrb.w	r0, [r8, #1]
 80070b0:	465d      	mov	r5, fp
 80070b2:	f7ff ffc2 	bl	800703a <__hexdig_fun>
 80070b6:	2800      	cmp	r0, #0
 80070b8:	d064      	beq.n	8007184 <__gethex+0x120>
 80070ba:	465a      	mov	r2, fp
 80070bc:	7810      	ldrb	r0, [r2, #0]
 80070be:	4690      	mov	r8, r2
 80070c0:	2830      	cmp	r0, #48	; 0x30
 80070c2:	f102 0201 	add.w	r2, r2, #1
 80070c6:	d0f9      	beq.n	80070bc <__gethex+0x58>
 80070c8:	f7ff ffb7 	bl	800703a <__hexdig_fun>
 80070cc:	2301      	movs	r3, #1
 80070ce:	fab0 f480 	clz	r4, r0
 80070d2:	465e      	mov	r6, fp
 80070d4:	0964      	lsrs	r4, r4, #5
 80070d6:	9301      	str	r3, [sp, #4]
 80070d8:	4642      	mov	r2, r8
 80070da:	4615      	mov	r5, r2
 80070dc:	7828      	ldrb	r0, [r5, #0]
 80070de:	3201      	adds	r2, #1
 80070e0:	f7ff ffab 	bl	800703a <__hexdig_fun>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	d1f8      	bne.n	80070da <__gethex+0x76>
 80070e8:	2201      	movs	r2, #1
 80070ea:	4628      	mov	r0, r5
 80070ec:	4994      	ldr	r1, [pc, #592]	; (8007340 <__gethex+0x2dc>)
 80070ee:	f7ff fee9 	bl	8006ec4 <strncmp>
 80070f2:	b978      	cbnz	r0, 8007114 <__gethex+0xb0>
 80070f4:	b946      	cbnz	r6, 8007108 <__gethex+0xa4>
 80070f6:	1c6e      	adds	r6, r5, #1
 80070f8:	4632      	mov	r2, r6
 80070fa:	4615      	mov	r5, r2
 80070fc:	7828      	ldrb	r0, [r5, #0]
 80070fe:	3201      	adds	r2, #1
 8007100:	f7ff ff9b 	bl	800703a <__hexdig_fun>
 8007104:	2800      	cmp	r0, #0
 8007106:	d1f8      	bne.n	80070fa <__gethex+0x96>
 8007108:	1b73      	subs	r3, r6, r5
 800710a:	009e      	lsls	r6, r3, #2
 800710c:	e004      	b.n	8007118 <__gethex+0xb4>
 800710e:	2400      	movs	r4, #0
 8007110:	4626      	mov	r6, r4
 8007112:	e7e1      	b.n	80070d8 <__gethex+0x74>
 8007114:	2e00      	cmp	r6, #0
 8007116:	d1f7      	bne.n	8007108 <__gethex+0xa4>
 8007118:	782b      	ldrb	r3, [r5, #0]
 800711a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800711e:	2b50      	cmp	r3, #80	; 0x50
 8007120:	d13d      	bne.n	800719e <__gethex+0x13a>
 8007122:	786b      	ldrb	r3, [r5, #1]
 8007124:	2b2b      	cmp	r3, #43	; 0x2b
 8007126:	d02f      	beq.n	8007188 <__gethex+0x124>
 8007128:	2b2d      	cmp	r3, #45	; 0x2d
 800712a:	d031      	beq.n	8007190 <__gethex+0x12c>
 800712c:	f04f 0b00 	mov.w	fp, #0
 8007130:	1c69      	adds	r1, r5, #1
 8007132:	7808      	ldrb	r0, [r1, #0]
 8007134:	f7ff ff81 	bl	800703a <__hexdig_fun>
 8007138:	1e42      	subs	r2, r0, #1
 800713a:	b2d2      	uxtb	r2, r2
 800713c:	2a18      	cmp	r2, #24
 800713e:	d82e      	bhi.n	800719e <__gethex+0x13a>
 8007140:	f1a0 0210 	sub.w	r2, r0, #16
 8007144:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007148:	f7ff ff77 	bl	800703a <__hexdig_fun>
 800714c:	f100 3cff 	add.w	ip, r0, #4294967295
 8007150:	fa5f fc8c 	uxtb.w	ip, ip
 8007154:	f1bc 0f18 	cmp.w	ip, #24
 8007158:	d91d      	bls.n	8007196 <__gethex+0x132>
 800715a:	f1bb 0f00 	cmp.w	fp, #0
 800715e:	d000      	beq.n	8007162 <__gethex+0xfe>
 8007160:	4252      	negs	r2, r2
 8007162:	4416      	add	r6, r2
 8007164:	f8ca 1000 	str.w	r1, [sl]
 8007168:	b1dc      	cbz	r4, 80071a2 <__gethex+0x13e>
 800716a:	9b01      	ldr	r3, [sp, #4]
 800716c:	2b00      	cmp	r3, #0
 800716e:	bf14      	ite	ne
 8007170:	f04f 0800 	movne.w	r8, #0
 8007174:	f04f 0806 	moveq.w	r8, #6
 8007178:	4640      	mov	r0, r8
 800717a:	b005      	add	sp, #20
 800717c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007180:	4645      	mov	r5, r8
 8007182:	4626      	mov	r6, r4
 8007184:	2401      	movs	r4, #1
 8007186:	e7c7      	b.n	8007118 <__gethex+0xb4>
 8007188:	f04f 0b00 	mov.w	fp, #0
 800718c:	1ca9      	adds	r1, r5, #2
 800718e:	e7d0      	b.n	8007132 <__gethex+0xce>
 8007190:	f04f 0b01 	mov.w	fp, #1
 8007194:	e7fa      	b.n	800718c <__gethex+0x128>
 8007196:	230a      	movs	r3, #10
 8007198:	fb03 0002 	mla	r0, r3, r2, r0
 800719c:	e7d0      	b.n	8007140 <__gethex+0xdc>
 800719e:	4629      	mov	r1, r5
 80071a0:	e7e0      	b.n	8007164 <__gethex+0x100>
 80071a2:	4621      	mov	r1, r4
 80071a4:	eba5 0308 	sub.w	r3, r5, r8
 80071a8:	3b01      	subs	r3, #1
 80071aa:	2b07      	cmp	r3, #7
 80071ac:	dc0a      	bgt.n	80071c4 <__gethex+0x160>
 80071ae:	4648      	mov	r0, r9
 80071b0:	f7fd ff5a 	bl	8005068 <_Balloc>
 80071b4:	4604      	mov	r4, r0
 80071b6:	b940      	cbnz	r0, 80071ca <__gethex+0x166>
 80071b8:	4602      	mov	r2, r0
 80071ba:	21e4      	movs	r1, #228	; 0xe4
 80071bc:	4b61      	ldr	r3, [pc, #388]	; (8007344 <__gethex+0x2e0>)
 80071be:	4862      	ldr	r0, [pc, #392]	; (8007348 <__gethex+0x2e4>)
 80071c0:	f7ff feb6 	bl	8006f30 <__assert_func>
 80071c4:	3101      	adds	r1, #1
 80071c6:	105b      	asrs	r3, r3, #1
 80071c8:	e7ef      	b.n	80071aa <__gethex+0x146>
 80071ca:	2300      	movs	r3, #0
 80071cc:	469b      	mov	fp, r3
 80071ce:	f100 0a14 	add.w	sl, r0, #20
 80071d2:	f8cd a004 	str.w	sl, [sp, #4]
 80071d6:	45a8      	cmp	r8, r5
 80071d8:	d344      	bcc.n	8007264 <__gethex+0x200>
 80071da:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80071de:	4658      	mov	r0, fp
 80071e0:	f848 bb04 	str.w	fp, [r8], #4
 80071e4:	eba8 080a 	sub.w	r8, r8, sl
 80071e8:	ea4f 02a8 	mov.w	r2, r8, asr #2
 80071ec:	6122      	str	r2, [r4, #16]
 80071ee:	ea4f 1842 	mov.w	r8, r2, lsl #5
 80071f2:	f7fe f82b 	bl	800524c <__hi0bits>
 80071f6:	683d      	ldr	r5, [r7, #0]
 80071f8:	eba8 0800 	sub.w	r8, r8, r0
 80071fc:	45a8      	cmp	r8, r5
 80071fe:	dd59      	ble.n	80072b4 <__gethex+0x250>
 8007200:	eba8 0805 	sub.w	r8, r8, r5
 8007204:	4641      	mov	r1, r8
 8007206:	4620      	mov	r0, r4
 8007208:	f7fe fba9 	bl	800595e <__any_on>
 800720c:	4683      	mov	fp, r0
 800720e:	b1b8      	cbz	r0, 8007240 <__gethex+0x1dc>
 8007210:	f04f 0b01 	mov.w	fp, #1
 8007214:	f108 33ff 	add.w	r3, r8, #4294967295
 8007218:	1159      	asrs	r1, r3, #5
 800721a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800721e:	f003 021f 	and.w	r2, r3, #31
 8007222:	fa0b f202 	lsl.w	r2, fp, r2
 8007226:	420a      	tst	r2, r1
 8007228:	d00a      	beq.n	8007240 <__gethex+0x1dc>
 800722a:	455b      	cmp	r3, fp
 800722c:	dd06      	ble.n	800723c <__gethex+0x1d8>
 800722e:	4620      	mov	r0, r4
 8007230:	f1a8 0102 	sub.w	r1, r8, #2
 8007234:	f7fe fb93 	bl	800595e <__any_on>
 8007238:	2800      	cmp	r0, #0
 800723a:	d138      	bne.n	80072ae <__gethex+0x24a>
 800723c:	f04f 0b02 	mov.w	fp, #2
 8007240:	4641      	mov	r1, r8
 8007242:	4620      	mov	r0, r4
 8007244:	f7ff fea6 	bl	8006f94 <rshift>
 8007248:	4446      	add	r6, r8
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	42b3      	cmp	r3, r6
 800724e:	da41      	bge.n	80072d4 <__gethex+0x270>
 8007250:	4621      	mov	r1, r4
 8007252:	4648      	mov	r0, r9
 8007254:	f7fd ff48 	bl	80050e8 <_Bfree>
 8007258:	2300      	movs	r3, #0
 800725a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800725c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8007260:	6013      	str	r3, [r2, #0]
 8007262:	e789      	b.n	8007178 <__gethex+0x114>
 8007264:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8007268:	2a2e      	cmp	r2, #46	; 0x2e
 800726a:	d014      	beq.n	8007296 <__gethex+0x232>
 800726c:	2b20      	cmp	r3, #32
 800726e:	d106      	bne.n	800727e <__gethex+0x21a>
 8007270:	9b01      	ldr	r3, [sp, #4]
 8007272:	f843 bb04 	str.w	fp, [r3], #4
 8007276:	f04f 0b00 	mov.w	fp, #0
 800727a:	9301      	str	r3, [sp, #4]
 800727c:	465b      	mov	r3, fp
 800727e:	7828      	ldrb	r0, [r5, #0]
 8007280:	9303      	str	r3, [sp, #12]
 8007282:	f7ff feda 	bl	800703a <__hexdig_fun>
 8007286:	9b03      	ldr	r3, [sp, #12]
 8007288:	f000 000f 	and.w	r0, r0, #15
 800728c:	4098      	lsls	r0, r3
 800728e:	ea4b 0b00 	orr.w	fp, fp, r0
 8007292:	3304      	adds	r3, #4
 8007294:	e79f      	b.n	80071d6 <__gethex+0x172>
 8007296:	45a8      	cmp	r8, r5
 8007298:	d8e8      	bhi.n	800726c <__gethex+0x208>
 800729a:	2201      	movs	r2, #1
 800729c:	4628      	mov	r0, r5
 800729e:	4928      	ldr	r1, [pc, #160]	; (8007340 <__gethex+0x2dc>)
 80072a0:	9303      	str	r3, [sp, #12]
 80072a2:	f7ff fe0f 	bl	8006ec4 <strncmp>
 80072a6:	9b03      	ldr	r3, [sp, #12]
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d1df      	bne.n	800726c <__gethex+0x208>
 80072ac:	e793      	b.n	80071d6 <__gethex+0x172>
 80072ae:	f04f 0b03 	mov.w	fp, #3
 80072b2:	e7c5      	b.n	8007240 <__gethex+0x1dc>
 80072b4:	da0b      	bge.n	80072ce <__gethex+0x26a>
 80072b6:	eba5 0808 	sub.w	r8, r5, r8
 80072ba:	4621      	mov	r1, r4
 80072bc:	4642      	mov	r2, r8
 80072be:	4648      	mov	r0, r9
 80072c0:	f7fe f92a 	bl	8005518 <__lshift>
 80072c4:	4604      	mov	r4, r0
 80072c6:	eba6 0608 	sub.w	r6, r6, r8
 80072ca:	f100 0a14 	add.w	sl, r0, #20
 80072ce:	f04f 0b00 	mov.w	fp, #0
 80072d2:	e7ba      	b.n	800724a <__gethex+0x1e6>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	42b3      	cmp	r3, r6
 80072d8:	dd74      	ble.n	80073c4 <__gethex+0x360>
 80072da:	1b9e      	subs	r6, r3, r6
 80072dc:	42b5      	cmp	r5, r6
 80072de:	dc35      	bgt.n	800734c <__gethex+0x2e8>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d023      	beq.n	800732e <__gethex+0x2ca>
 80072e6:	2b03      	cmp	r3, #3
 80072e8:	d025      	beq.n	8007336 <__gethex+0x2d2>
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d115      	bne.n	800731a <__gethex+0x2b6>
 80072ee:	42b5      	cmp	r5, r6
 80072f0:	d113      	bne.n	800731a <__gethex+0x2b6>
 80072f2:	2d01      	cmp	r5, #1
 80072f4:	d10b      	bne.n	800730e <__gethex+0x2aa>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	9a02      	ldr	r2, [sp, #8]
 80072fa:	f04f 0862 	mov.w	r8, #98	; 0x62
 80072fe:	6013      	str	r3, [r2, #0]
 8007300:	2301      	movs	r3, #1
 8007302:	6123      	str	r3, [r4, #16]
 8007304:	f8ca 3000 	str.w	r3, [sl]
 8007308:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800730a:	601c      	str	r4, [r3, #0]
 800730c:	e734      	b.n	8007178 <__gethex+0x114>
 800730e:	4620      	mov	r0, r4
 8007310:	1e69      	subs	r1, r5, #1
 8007312:	f7fe fb24 	bl	800595e <__any_on>
 8007316:	2800      	cmp	r0, #0
 8007318:	d1ed      	bne.n	80072f6 <__gethex+0x292>
 800731a:	4621      	mov	r1, r4
 800731c:	4648      	mov	r0, r9
 800731e:	f7fd fee3 	bl	80050e8 <_Bfree>
 8007322:	2300      	movs	r3, #0
 8007324:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007326:	f04f 0850 	mov.w	r8, #80	; 0x50
 800732a:	6013      	str	r3, [r2, #0]
 800732c:	e724      	b.n	8007178 <__gethex+0x114>
 800732e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1f2      	bne.n	800731a <__gethex+0x2b6>
 8007334:	e7df      	b.n	80072f6 <__gethex+0x292>
 8007336:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1dc      	bne.n	80072f6 <__gethex+0x292>
 800733c:	e7ed      	b.n	800731a <__gethex+0x2b6>
 800733e:	bf00      	nop
 8007340:	08007b3c 	.word	0x08007b3c
 8007344:	080079cf 	.word	0x080079cf
 8007348:	08007ce6 	.word	0x08007ce6
 800734c:	f106 38ff 	add.w	r8, r6, #4294967295
 8007350:	f1bb 0f00 	cmp.w	fp, #0
 8007354:	d133      	bne.n	80073be <__gethex+0x35a>
 8007356:	f1b8 0f00 	cmp.w	r8, #0
 800735a:	d004      	beq.n	8007366 <__gethex+0x302>
 800735c:	4641      	mov	r1, r8
 800735e:	4620      	mov	r0, r4
 8007360:	f7fe fafd 	bl	800595e <__any_on>
 8007364:	4683      	mov	fp, r0
 8007366:	2301      	movs	r3, #1
 8007368:	ea4f 1268 	mov.w	r2, r8, asr #5
 800736c:	f008 081f 	and.w	r8, r8, #31
 8007370:	fa03 f308 	lsl.w	r3, r3, r8
 8007374:	f04f 0802 	mov.w	r8, #2
 8007378:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800737c:	4631      	mov	r1, r6
 800737e:	4213      	tst	r3, r2
 8007380:	4620      	mov	r0, r4
 8007382:	bf18      	it	ne
 8007384:	f04b 0b02 	orrne.w	fp, fp, #2
 8007388:	1bad      	subs	r5, r5, r6
 800738a:	f7ff fe03 	bl	8006f94 <rshift>
 800738e:	687e      	ldr	r6, [r7, #4]
 8007390:	f1bb 0f00 	cmp.w	fp, #0
 8007394:	d04a      	beq.n	800742c <__gethex+0x3c8>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2b02      	cmp	r3, #2
 800739a:	d016      	beq.n	80073ca <__gethex+0x366>
 800739c:	2b03      	cmp	r3, #3
 800739e:	d018      	beq.n	80073d2 <__gethex+0x36e>
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d109      	bne.n	80073b8 <__gethex+0x354>
 80073a4:	f01b 0f02 	tst.w	fp, #2
 80073a8:	d006      	beq.n	80073b8 <__gethex+0x354>
 80073aa:	f8da 3000 	ldr.w	r3, [sl]
 80073ae:	ea4b 0b03 	orr.w	fp, fp, r3
 80073b2:	f01b 0f01 	tst.w	fp, #1
 80073b6:	d10f      	bne.n	80073d8 <__gethex+0x374>
 80073b8:	f048 0810 	orr.w	r8, r8, #16
 80073bc:	e036      	b.n	800742c <__gethex+0x3c8>
 80073be:	f04f 0b01 	mov.w	fp, #1
 80073c2:	e7d0      	b.n	8007366 <__gethex+0x302>
 80073c4:	f04f 0801 	mov.w	r8, #1
 80073c8:	e7e2      	b.n	8007390 <__gethex+0x32c>
 80073ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073cc:	f1c3 0301 	rsb	r3, r3, #1
 80073d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80073d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d0ef      	beq.n	80073b8 <__gethex+0x354>
 80073d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80073dc:	f104 0214 	add.w	r2, r4, #20
 80073e0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80073e4:	9301      	str	r3, [sp, #4]
 80073e6:	2300      	movs	r3, #0
 80073e8:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80073ec:	4694      	mov	ip, r2
 80073ee:	f852 1b04 	ldr.w	r1, [r2], #4
 80073f2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80073f6:	d01e      	beq.n	8007436 <__gethex+0x3d2>
 80073f8:	3101      	adds	r1, #1
 80073fa:	f8cc 1000 	str.w	r1, [ip]
 80073fe:	f1b8 0f02 	cmp.w	r8, #2
 8007402:	f104 0214 	add.w	r2, r4, #20
 8007406:	d13d      	bne.n	8007484 <__gethex+0x420>
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	3b01      	subs	r3, #1
 800740c:	42ab      	cmp	r3, r5
 800740e:	d10b      	bne.n	8007428 <__gethex+0x3c4>
 8007410:	2301      	movs	r3, #1
 8007412:	1169      	asrs	r1, r5, #5
 8007414:	f005 051f 	and.w	r5, r5, #31
 8007418:	fa03 f505 	lsl.w	r5, r3, r5
 800741c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007420:	421d      	tst	r5, r3
 8007422:	bf18      	it	ne
 8007424:	f04f 0801 	movne.w	r8, #1
 8007428:	f048 0820 	orr.w	r8, r8, #32
 800742c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800742e:	601c      	str	r4, [r3, #0]
 8007430:	9b02      	ldr	r3, [sp, #8]
 8007432:	601e      	str	r6, [r3, #0]
 8007434:	e6a0      	b.n	8007178 <__gethex+0x114>
 8007436:	4290      	cmp	r0, r2
 8007438:	f842 3c04 	str.w	r3, [r2, #-4]
 800743c:	d8d6      	bhi.n	80073ec <__gethex+0x388>
 800743e:	68a2      	ldr	r2, [r4, #8]
 8007440:	4593      	cmp	fp, r2
 8007442:	db17      	blt.n	8007474 <__gethex+0x410>
 8007444:	6861      	ldr	r1, [r4, #4]
 8007446:	4648      	mov	r0, r9
 8007448:	3101      	adds	r1, #1
 800744a:	f7fd fe0d 	bl	8005068 <_Balloc>
 800744e:	4682      	mov	sl, r0
 8007450:	b918      	cbnz	r0, 800745a <__gethex+0x3f6>
 8007452:	4602      	mov	r2, r0
 8007454:	2184      	movs	r1, #132	; 0x84
 8007456:	4b1a      	ldr	r3, [pc, #104]	; (80074c0 <__gethex+0x45c>)
 8007458:	e6b1      	b.n	80071be <__gethex+0x15a>
 800745a:	6922      	ldr	r2, [r4, #16]
 800745c:	f104 010c 	add.w	r1, r4, #12
 8007460:	3202      	adds	r2, #2
 8007462:	0092      	lsls	r2, r2, #2
 8007464:	300c      	adds	r0, #12
 8007466:	f7ff fd4f 	bl	8006f08 <memcpy>
 800746a:	4621      	mov	r1, r4
 800746c:	4648      	mov	r0, r9
 800746e:	f7fd fe3b 	bl	80050e8 <_Bfree>
 8007472:	4654      	mov	r4, sl
 8007474:	6922      	ldr	r2, [r4, #16]
 8007476:	1c51      	adds	r1, r2, #1
 8007478:	6121      	str	r1, [r4, #16]
 800747a:	2101      	movs	r1, #1
 800747c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007480:	6151      	str	r1, [r2, #20]
 8007482:	e7bc      	b.n	80073fe <__gethex+0x39a>
 8007484:	6921      	ldr	r1, [r4, #16]
 8007486:	4559      	cmp	r1, fp
 8007488:	dd0b      	ble.n	80074a2 <__gethex+0x43e>
 800748a:	2101      	movs	r1, #1
 800748c:	4620      	mov	r0, r4
 800748e:	f7ff fd81 	bl	8006f94 <rshift>
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	3601      	adds	r6, #1
 8007496:	42b3      	cmp	r3, r6
 8007498:	f6ff aeda 	blt.w	8007250 <__gethex+0x1ec>
 800749c:	f04f 0801 	mov.w	r8, #1
 80074a0:	e7c2      	b.n	8007428 <__gethex+0x3c4>
 80074a2:	f015 051f 	ands.w	r5, r5, #31
 80074a6:	d0f9      	beq.n	800749c <__gethex+0x438>
 80074a8:	9b01      	ldr	r3, [sp, #4]
 80074aa:	f1c5 0520 	rsb	r5, r5, #32
 80074ae:	441a      	add	r2, r3
 80074b0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80074b4:	f7fd feca 	bl	800524c <__hi0bits>
 80074b8:	42a8      	cmp	r0, r5
 80074ba:	dbe6      	blt.n	800748a <__gethex+0x426>
 80074bc:	e7ee      	b.n	800749c <__gethex+0x438>
 80074be:	bf00      	nop
 80074c0:	080079cf 	.word	0x080079cf

080074c4 <L_shift>:
 80074c4:	f1c2 0208 	rsb	r2, r2, #8
 80074c8:	0092      	lsls	r2, r2, #2
 80074ca:	b570      	push	{r4, r5, r6, lr}
 80074cc:	f1c2 0620 	rsb	r6, r2, #32
 80074d0:	6843      	ldr	r3, [r0, #4]
 80074d2:	6804      	ldr	r4, [r0, #0]
 80074d4:	fa03 f506 	lsl.w	r5, r3, r6
 80074d8:	432c      	orrs	r4, r5
 80074da:	40d3      	lsrs	r3, r2
 80074dc:	6004      	str	r4, [r0, #0]
 80074de:	f840 3f04 	str.w	r3, [r0, #4]!
 80074e2:	4288      	cmp	r0, r1
 80074e4:	d3f4      	bcc.n	80074d0 <L_shift+0xc>
 80074e6:	bd70      	pop	{r4, r5, r6, pc}

080074e8 <__match>:
 80074e8:	b530      	push	{r4, r5, lr}
 80074ea:	6803      	ldr	r3, [r0, #0]
 80074ec:	3301      	adds	r3, #1
 80074ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074f2:	b914      	cbnz	r4, 80074fa <__match+0x12>
 80074f4:	6003      	str	r3, [r0, #0]
 80074f6:	2001      	movs	r0, #1
 80074f8:	bd30      	pop	{r4, r5, pc}
 80074fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007502:	2d19      	cmp	r5, #25
 8007504:	bf98      	it	ls
 8007506:	3220      	addls	r2, #32
 8007508:	42a2      	cmp	r2, r4
 800750a:	d0f0      	beq.n	80074ee <__match+0x6>
 800750c:	2000      	movs	r0, #0
 800750e:	e7f3      	b.n	80074f8 <__match+0x10>

08007510 <__hexnan>:
 8007510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007514:	2500      	movs	r5, #0
 8007516:	680b      	ldr	r3, [r1, #0]
 8007518:	4682      	mov	sl, r0
 800751a:	115e      	asrs	r6, r3, #5
 800751c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007520:	f013 031f 	ands.w	r3, r3, #31
 8007524:	bf18      	it	ne
 8007526:	3604      	addne	r6, #4
 8007528:	1f37      	subs	r7, r6, #4
 800752a:	4690      	mov	r8, r2
 800752c:	46b9      	mov	r9, r7
 800752e:	463c      	mov	r4, r7
 8007530:	46ab      	mov	fp, r5
 8007532:	b087      	sub	sp, #28
 8007534:	6801      	ldr	r1, [r0, #0]
 8007536:	9301      	str	r3, [sp, #4]
 8007538:	f846 5c04 	str.w	r5, [r6, #-4]
 800753c:	9502      	str	r5, [sp, #8]
 800753e:	784a      	ldrb	r2, [r1, #1]
 8007540:	1c4b      	adds	r3, r1, #1
 8007542:	9303      	str	r3, [sp, #12]
 8007544:	b342      	cbz	r2, 8007598 <__hexnan+0x88>
 8007546:	4610      	mov	r0, r2
 8007548:	9105      	str	r1, [sp, #20]
 800754a:	9204      	str	r2, [sp, #16]
 800754c:	f7ff fd75 	bl	800703a <__hexdig_fun>
 8007550:	2800      	cmp	r0, #0
 8007552:	d14f      	bne.n	80075f4 <__hexnan+0xe4>
 8007554:	9a04      	ldr	r2, [sp, #16]
 8007556:	9905      	ldr	r1, [sp, #20]
 8007558:	2a20      	cmp	r2, #32
 800755a:	d818      	bhi.n	800758e <__hexnan+0x7e>
 800755c:	9b02      	ldr	r3, [sp, #8]
 800755e:	459b      	cmp	fp, r3
 8007560:	dd13      	ble.n	800758a <__hexnan+0x7a>
 8007562:	454c      	cmp	r4, r9
 8007564:	d206      	bcs.n	8007574 <__hexnan+0x64>
 8007566:	2d07      	cmp	r5, #7
 8007568:	dc04      	bgt.n	8007574 <__hexnan+0x64>
 800756a:	462a      	mov	r2, r5
 800756c:	4649      	mov	r1, r9
 800756e:	4620      	mov	r0, r4
 8007570:	f7ff ffa8 	bl	80074c4 <L_shift>
 8007574:	4544      	cmp	r4, r8
 8007576:	d950      	bls.n	800761a <__hexnan+0x10a>
 8007578:	2300      	movs	r3, #0
 800757a:	f1a4 0904 	sub.w	r9, r4, #4
 800757e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007582:	461d      	mov	r5, r3
 8007584:	464c      	mov	r4, r9
 8007586:	f8cd b008 	str.w	fp, [sp, #8]
 800758a:	9903      	ldr	r1, [sp, #12]
 800758c:	e7d7      	b.n	800753e <__hexnan+0x2e>
 800758e:	2a29      	cmp	r2, #41	; 0x29
 8007590:	d155      	bne.n	800763e <__hexnan+0x12e>
 8007592:	3102      	adds	r1, #2
 8007594:	f8ca 1000 	str.w	r1, [sl]
 8007598:	f1bb 0f00 	cmp.w	fp, #0
 800759c:	d04f      	beq.n	800763e <__hexnan+0x12e>
 800759e:	454c      	cmp	r4, r9
 80075a0:	d206      	bcs.n	80075b0 <__hexnan+0xa0>
 80075a2:	2d07      	cmp	r5, #7
 80075a4:	dc04      	bgt.n	80075b0 <__hexnan+0xa0>
 80075a6:	462a      	mov	r2, r5
 80075a8:	4649      	mov	r1, r9
 80075aa:	4620      	mov	r0, r4
 80075ac:	f7ff ff8a 	bl	80074c4 <L_shift>
 80075b0:	4544      	cmp	r4, r8
 80075b2:	d934      	bls.n	800761e <__hexnan+0x10e>
 80075b4:	4623      	mov	r3, r4
 80075b6:	f1a8 0204 	sub.w	r2, r8, #4
 80075ba:	f853 1b04 	ldr.w	r1, [r3], #4
 80075be:	429f      	cmp	r7, r3
 80075c0:	f842 1f04 	str.w	r1, [r2, #4]!
 80075c4:	d2f9      	bcs.n	80075ba <__hexnan+0xaa>
 80075c6:	1b3b      	subs	r3, r7, r4
 80075c8:	f023 0303 	bic.w	r3, r3, #3
 80075cc:	3304      	adds	r3, #4
 80075ce:	3e03      	subs	r6, #3
 80075d0:	3401      	adds	r4, #1
 80075d2:	42a6      	cmp	r6, r4
 80075d4:	bf38      	it	cc
 80075d6:	2304      	movcc	r3, #4
 80075d8:	2200      	movs	r2, #0
 80075da:	4443      	add	r3, r8
 80075dc:	f843 2b04 	str.w	r2, [r3], #4
 80075e0:	429f      	cmp	r7, r3
 80075e2:	d2fb      	bcs.n	80075dc <__hexnan+0xcc>
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	b91b      	cbnz	r3, 80075f0 <__hexnan+0xe0>
 80075e8:	4547      	cmp	r7, r8
 80075ea:	d126      	bne.n	800763a <__hexnan+0x12a>
 80075ec:	2301      	movs	r3, #1
 80075ee:	603b      	str	r3, [r7, #0]
 80075f0:	2005      	movs	r0, #5
 80075f2:	e025      	b.n	8007640 <__hexnan+0x130>
 80075f4:	3501      	adds	r5, #1
 80075f6:	2d08      	cmp	r5, #8
 80075f8:	f10b 0b01 	add.w	fp, fp, #1
 80075fc:	dd06      	ble.n	800760c <__hexnan+0xfc>
 80075fe:	4544      	cmp	r4, r8
 8007600:	d9c3      	bls.n	800758a <__hexnan+0x7a>
 8007602:	2300      	movs	r3, #0
 8007604:	2501      	movs	r5, #1
 8007606:	f844 3c04 	str.w	r3, [r4, #-4]
 800760a:	3c04      	subs	r4, #4
 800760c:	6822      	ldr	r2, [r4, #0]
 800760e:	f000 000f 	and.w	r0, r0, #15
 8007612:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007616:	6020      	str	r0, [r4, #0]
 8007618:	e7b7      	b.n	800758a <__hexnan+0x7a>
 800761a:	2508      	movs	r5, #8
 800761c:	e7b5      	b.n	800758a <__hexnan+0x7a>
 800761e:	9b01      	ldr	r3, [sp, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d0df      	beq.n	80075e4 <__hexnan+0xd4>
 8007624:	f04f 32ff 	mov.w	r2, #4294967295
 8007628:	f1c3 0320 	rsb	r3, r3, #32
 800762c:	40da      	lsrs	r2, r3
 800762e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007632:	4013      	ands	r3, r2
 8007634:	f846 3c04 	str.w	r3, [r6, #-4]
 8007638:	e7d4      	b.n	80075e4 <__hexnan+0xd4>
 800763a:	3f04      	subs	r7, #4
 800763c:	e7d2      	b.n	80075e4 <__hexnan+0xd4>
 800763e:	2004      	movs	r0, #4
 8007640:	b007      	add	sp, #28
 8007642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007646 <__ascii_mbtowc>:
 8007646:	b082      	sub	sp, #8
 8007648:	b901      	cbnz	r1, 800764c <__ascii_mbtowc+0x6>
 800764a:	a901      	add	r1, sp, #4
 800764c:	b142      	cbz	r2, 8007660 <__ascii_mbtowc+0x1a>
 800764e:	b14b      	cbz	r3, 8007664 <__ascii_mbtowc+0x1e>
 8007650:	7813      	ldrb	r3, [r2, #0]
 8007652:	600b      	str	r3, [r1, #0]
 8007654:	7812      	ldrb	r2, [r2, #0]
 8007656:	1e10      	subs	r0, r2, #0
 8007658:	bf18      	it	ne
 800765a:	2001      	movne	r0, #1
 800765c:	b002      	add	sp, #8
 800765e:	4770      	bx	lr
 8007660:	4610      	mov	r0, r2
 8007662:	e7fb      	b.n	800765c <__ascii_mbtowc+0x16>
 8007664:	f06f 0001 	mvn.w	r0, #1
 8007668:	e7f8      	b.n	800765c <__ascii_mbtowc+0x16>

0800766a <_realloc_r>:
 800766a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800766e:	4680      	mov	r8, r0
 8007670:	4614      	mov	r4, r2
 8007672:	460e      	mov	r6, r1
 8007674:	b921      	cbnz	r1, 8007680 <_realloc_r+0x16>
 8007676:	4611      	mov	r1, r2
 8007678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800767c:	f7fd bc68 	b.w	8004f50 <_malloc_r>
 8007680:	b92a      	cbnz	r2, 800768e <_realloc_r+0x24>
 8007682:	f7fd fbf5 	bl	8004e70 <_free_r>
 8007686:	4625      	mov	r5, r4
 8007688:	4628      	mov	r0, r5
 800768a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800768e:	f000 f8c6 	bl	800781e <_malloc_usable_size_r>
 8007692:	4284      	cmp	r4, r0
 8007694:	4607      	mov	r7, r0
 8007696:	d802      	bhi.n	800769e <_realloc_r+0x34>
 8007698:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800769c:	d812      	bhi.n	80076c4 <_realloc_r+0x5a>
 800769e:	4621      	mov	r1, r4
 80076a0:	4640      	mov	r0, r8
 80076a2:	f7fd fc55 	bl	8004f50 <_malloc_r>
 80076a6:	4605      	mov	r5, r0
 80076a8:	2800      	cmp	r0, #0
 80076aa:	d0ed      	beq.n	8007688 <_realloc_r+0x1e>
 80076ac:	42bc      	cmp	r4, r7
 80076ae:	4622      	mov	r2, r4
 80076b0:	4631      	mov	r1, r6
 80076b2:	bf28      	it	cs
 80076b4:	463a      	movcs	r2, r7
 80076b6:	f7ff fc27 	bl	8006f08 <memcpy>
 80076ba:	4631      	mov	r1, r6
 80076bc:	4640      	mov	r0, r8
 80076be:	f7fd fbd7 	bl	8004e70 <_free_r>
 80076c2:	e7e1      	b.n	8007688 <_realloc_r+0x1e>
 80076c4:	4635      	mov	r5, r6
 80076c6:	e7df      	b.n	8007688 <_realloc_r+0x1e>

080076c8 <__ascii_wctomb>:
 80076c8:	4603      	mov	r3, r0
 80076ca:	4608      	mov	r0, r1
 80076cc:	b141      	cbz	r1, 80076e0 <__ascii_wctomb+0x18>
 80076ce:	2aff      	cmp	r2, #255	; 0xff
 80076d0:	d904      	bls.n	80076dc <__ascii_wctomb+0x14>
 80076d2:	228a      	movs	r2, #138	; 0x8a
 80076d4:	f04f 30ff 	mov.w	r0, #4294967295
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	4770      	bx	lr
 80076dc:	2001      	movs	r0, #1
 80076de:	700a      	strb	r2, [r1, #0]
 80076e0:	4770      	bx	lr
	...

080076e4 <fiprintf>:
 80076e4:	b40e      	push	{r1, r2, r3}
 80076e6:	b503      	push	{r0, r1, lr}
 80076e8:	4601      	mov	r1, r0
 80076ea:	ab03      	add	r3, sp, #12
 80076ec:	4805      	ldr	r0, [pc, #20]	; (8007704 <fiprintf+0x20>)
 80076ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80076f2:	6800      	ldr	r0, [r0, #0]
 80076f4:	9301      	str	r3, [sp, #4]
 80076f6:	f7ff f971 	bl	80069dc <_vfiprintf_r>
 80076fa:	b002      	add	sp, #8
 80076fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007700:	b003      	add	sp, #12
 8007702:	4770      	bx	lr
 8007704:	20000064 	.word	0x20000064

08007708 <__swhatbuf_r>:
 8007708:	b570      	push	{r4, r5, r6, lr}
 800770a:	460c      	mov	r4, r1
 800770c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007710:	4615      	mov	r5, r2
 8007712:	2900      	cmp	r1, #0
 8007714:	461e      	mov	r6, r3
 8007716:	b096      	sub	sp, #88	; 0x58
 8007718:	da0c      	bge.n	8007734 <__swhatbuf_r+0x2c>
 800771a:	89a3      	ldrh	r3, [r4, #12]
 800771c:	2100      	movs	r1, #0
 800771e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007722:	bf0c      	ite	eq
 8007724:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007728:	2340      	movne	r3, #64	; 0x40
 800772a:	2000      	movs	r0, #0
 800772c:	6031      	str	r1, [r6, #0]
 800772e:	602b      	str	r3, [r5, #0]
 8007730:	b016      	add	sp, #88	; 0x58
 8007732:	bd70      	pop	{r4, r5, r6, pc}
 8007734:	466a      	mov	r2, sp
 8007736:	f000 f849 	bl	80077cc <_fstat_r>
 800773a:	2800      	cmp	r0, #0
 800773c:	dbed      	blt.n	800771a <__swhatbuf_r+0x12>
 800773e:	9901      	ldr	r1, [sp, #4]
 8007740:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007744:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007748:	4259      	negs	r1, r3
 800774a:	4159      	adcs	r1, r3
 800774c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007750:	e7eb      	b.n	800772a <__swhatbuf_r+0x22>

08007752 <__smakebuf_r>:
 8007752:	898b      	ldrh	r3, [r1, #12]
 8007754:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007756:	079d      	lsls	r5, r3, #30
 8007758:	4606      	mov	r6, r0
 800775a:	460c      	mov	r4, r1
 800775c:	d507      	bpl.n	800776e <__smakebuf_r+0x1c>
 800775e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007762:	6023      	str	r3, [r4, #0]
 8007764:	6123      	str	r3, [r4, #16]
 8007766:	2301      	movs	r3, #1
 8007768:	6163      	str	r3, [r4, #20]
 800776a:	b002      	add	sp, #8
 800776c:	bd70      	pop	{r4, r5, r6, pc}
 800776e:	466a      	mov	r2, sp
 8007770:	ab01      	add	r3, sp, #4
 8007772:	f7ff ffc9 	bl	8007708 <__swhatbuf_r>
 8007776:	9900      	ldr	r1, [sp, #0]
 8007778:	4605      	mov	r5, r0
 800777a:	4630      	mov	r0, r6
 800777c:	f7fd fbe8 	bl	8004f50 <_malloc_r>
 8007780:	b948      	cbnz	r0, 8007796 <__smakebuf_r+0x44>
 8007782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007786:	059a      	lsls	r2, r3, #22
 8007788:	d4ef      	bmi.n	800776a <__smakebuf_r+0x18>
 800778a:	f023 0303 	bic.w	r3, r3, #3
 800778e:	f043 0302 	orr.w	r3, r3, #2
 8007792:	81a3      	strh	r3, [r4, #12]
 8007794:	e7e3      	b.n	800775e <__smakebuf_r+0xc>
 8007796:	89a3      	ldrh	r3, [r4, #12]
 8007798:	6020      	str	r0, [r4, #0]
 800779a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800779e:	81a3      	strh	r3, [r4, #12]
 80077a0:	9b00      	ldr	r3, [sp, #0]
 80077a2:	6120      	str	r0, [r4, #16]
 80077a4:	6163      	str	r3, [r4, #20]
 80077a6:	9b01      	ldr	r3, [sp, #4]
 80077a8:	b15b      	cbz	r3, 80077c2 <__smakebuf_r+0x70>
 80077aa:	4630      	mov	r0, r6
 80077ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077b0:	f000 f81e 	bl	80077f0 <_isatty_r>
 80077b4:	b128      	cbz	r0, 80077c2 <__smakebuf_r+0x70>
 80077b6:	89a3      	ldrh	r3, [r4, #12]
 80077b8:	f023 0303 	bic.w	r3, r3, #3
 80077bc:	f043 0301 	orr.w	r3, r3, #1
 80077c0:	81a3      	strh	r3, [r4, #12]
 80077c2:	89a3      	ldrh	r3, [r4, #12]
 80077c4:	431d      	orrs	r5, r3
 80077c6:	81a5      	strh	r5, [r4, #12]
 80077c8:	e7cf      	b.n	800776a <__smakebuf_r+0x18>
	...

080077cc <_fstat_r>:
 80077cc:	b538      	push	{r3, r4, r5, lr}
 80077ce:	2300      	movs	r3, #0
 80077d0:	4d06      	ldr	r5, [pc, #24]	; (80077ec <_fstat_r+0x20>)
 80077d2:	4604      	mov	r4, r0
 80077d4:	4608      	mov	r0, r1
 80077d6:	4611      	mov	r1, r2
 80077d8:	602b      	str	r3, [r5, #0]
 80077da:	f7f9 fc88 	bl	80010ee <_fstat>
 80077de:	1c43      	adds	r3, r0, #1
 80077e0:	d102      	bne.n	80077e8 <_fstat_r+0x1c>
 80077e2:	682b      	ldr	r3, [r5, #0]
 80077e4:	b103      	cbz	r3, 80077e8 <_fstat_r+0x1c>
 80077e6:	6023      	str	r3, [r4, #0]
 80077e8:	bd38      	pop	{r3, r4, r5, pc}
 80077ea:	bf00      	nop
 80077ec:	200003b0 	.word	0x200003b0

080077f0 <_isatty_r>:
 80077f0:	b538      	push	{r3, r4, r5, lr}
 80077f2:	2300      	movs	r3, #0
 80077f4:	4d05      	ldr	r5, [pc, #20]	; (800780c <_isatty_r+0x1c>)
 80077f6:	4604      	mov	r4, r0
 80077f8:	4608      	mov	r0, r1
 80077fa:	602b      	str	r3, [r5, #0]
 80077fc:	f7f9 fc86 	bl	800110c <_isatty>
 8007800:	1c43      	adds	r3, r0, #1
 8007802:	d102      	bne.n	800780a <_isatty_r+0x1a>
 8007804:	682b      	ldr	r3, [r5, #0]
 8007806:	b103      	cbz	r3, 800780a <_isatty_r+0x1a>
 8007808:	6023      	str	r3, [r4, #0]
 800780a:	bd38      	pop	{r3, r4, r5, pc}
 800780c:	200003b0 	.word	0x200003b0

08007810 <abort>:
 8007810:	2006      	movs	r0, #6
 8007812:	b508      	push	{r3, lr}
 8007814:	f000 f834 	bl	8007880 <raise>
 8007818:	2001      	movs	r0, #1
 800781a:	f7f9 fc36 	bl	800108a <_exit>

0800781e <_malloc_usable_size_r>:
 800781e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007822:	1f18      	subs	r0, r3, #4
 8007824:	2b00      	cmp	r3, #0
 8007826:	bfbc      	itt	lt
 8007828:	580b      	ldrlt	r3, [r1, r0]
 800782a:	18c0      	addlt	r0, r0, r3
 800782c:	4770      	bx	lr

0800782e <_raise_r>:
 800782e:	291f      	cmp	r1, #31
 8007830:	b538      	push	{r3, r4, r5, lr}
 8007832:	4604      	mov	r4, r0
 8007834:	460d      	mov	r5, r1
 8007836:	d904      	bls.n	8007842 <_raise_r+0x14>
 8007838:	2316      	movs	r3, #22
 800783a:	6003      	str	r3, [r0, #0]
 800783c:	f04f 30ff 	mov.w	r0, #4294967295
 8007840:	bd38      	pop	{r3, r4, r5, pc}
 8007842:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007844:	b112      	cbz	r2, 800784c <_raise_r+0x1e>
 8007846:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800784a:	b94b      	cbnz	r3, 8007860 <_raise_r+0x32>
 800784c:	4620      	mov	r0, r4
 800784e:	f000 f831 	bl	80078b4 <_getpid_r>
 8007852:	462a      	mov	r2, r5
 8007854:	4601      	mov	r1, r0
 8007856:	4620      	mov	r0, r4
 8007858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800785c:	f000 b818 	b.w	8007890 <_kill_r>
 8007860:	2b01      	cmp	r3, #1
 8007862:	d00a      	beq.n	800787a <_raise_r+0x4c>
 8007864:	1c59      	adds	r1, r3, #1
 8007866:	d103      	bne.n	8007870 <_raise_r+0x42>
 8007868:	2316      	movs	r3, #22
 800786a:	6003      	str	r3, [r0, #0]
 800786c:	2001      	movs	r0, #1
 800786e:	e7e7      	b.n	8007840 <_raise_r+0x12>
 8007870:	2400      	movs	r4, #0
 8007872:	4628      	mov	r0, r5
 8007874:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007878:	4798      	blx	r3
 800787a:	2000      	movs	r0, #0
 800787c:	e7e0      	b.n	8007840 <_raise_r+0x12>
	...

08007880 <raise>:
 8007880:	4b02      	ldr	r3, [pc, #8]	; (800788c <raise+0xc>)
 8007882:	4601      	mov	r1, r0
 8007884:	6818      	ldr	r0, [r3, #0]
 8007886:	f7ff bfd2 	b.w	800782e <_raise_r>
 800788a:	bf00      	nop
 800788c:	20000064 	.word	0x20000064

08007890 <_kill_r>:
 8007890:	b538      	push	{r3, r4, r5, lr}
 8007892:	2300      	movs	r3, #0
 8007894:	4d06      	ldr	r5, [pc, #24]	; (80078b0 <_kill_r+0x20>)
 8007896:	4604      	mov	r4, r0
 8007898:	4608      	mov	r0, r1
 800789a:	4611      	mov	r1, r2
 800789c:	602b      	str	r3, [r5, #0]
 800789e:	f7f9 fbe4 	bl	800106a <_kill>
 80078a2:	1c43      	adds	r3, r0, #1
 80078a4:	d102      	bne.n	80078ac <_kill_r+0x1c>
 80078a6:	682b      	ldr	r3, [r5, #0]
 80078a8:	b103      	cbz	r3, 80078ac <_kill_r+0x1c>
 80078aa:	6023      	str	r3, [r4, #0]
 80078ac:	bd38      	pop	{r3, r4, r5, pc}
 80078ae:	bf00      	nop
 80078b0:	200003b0 	.word	0x200003b0

080078b4 <_getpid_r>:
 80078b4:	f7f9 bbd2 	b.w	800105c <_getpid>

080078b8 <_init>:
 80078b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ba:	bf00      	nop
 80078bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078be:	bc08      	pop	{r3}
 80078c0:	469e      	mov	lr, r3
 80078c2:	4770      	bx	lr

080078c4 <_fini>:
 80078c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c6:	bf00      	nop
 80078c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ca:	bc08      	pop	{r3}
 80078cc:	469e      	mov	lr, r3
 80078ce:	4770      	bx	lr
